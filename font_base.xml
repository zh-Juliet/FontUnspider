<?xml version="1.0" encoding="UTF-8"?>
<ttFont sfntVersion="\x00\x01\x00\x00" ttLibVersion="3.36">

  <GlyphOrder>
    <!-- The 'id' attribute is only for humans; it is ignored when parsed. -->
    <GlyphID id="0" name=".notdef"/>
    <GlyphID id="1" name="uniE797"/>
    <GlyphID id="2" name="uniE77C"/>
    <GlyphID id="3" name="uniE7A9"/>
    <GlyphID id="4" name="uniE790"/>
    <GlyphID id="5" name="uniE7A7"/>
    <GlyphID id="6" name="uniE795"/>
    <GlyphID id="7" name="uniE79F"/>
    <GlyphID id="8" name="uniE78F"/>
    <GlyphID id="9" name="uniE79E"/>
    <GlyphID id="10" name="uniE781"/>
    <GlyphID id="11" name="uniE77E"/>
    <GlyphID id="12" name="uniE7A5"/>
    <GlyphID id="13" name="uniE799"/>
    <GlyphID id="14" name="uniE794"/>
    <GlyphID id="15" name="uniE79B"/>
    <GlyphID id="16" name="uniE7A3"/>
    <GlyphID id="17" name="uniE7A6"/>
    <GlyphID id="18" name="uniE784"/>
    <GlyphID id="19" name="uniE783"/>
    <GlyphID id="20" name="uniE78D"/>
    <GlyphID id="21" name="uniE7A4"/>
    <GlyphID id="22" name="uniE7A2"/>
    <GlyphID id="23" name="uniE789"/>
    <GlyphID id="24" name="uniE793"/>
    <GlyphID id="25" name="uniE77D"/>
    <GlyphID id="26" name="uniE796"/>
    <GlyphID id="27" name="uniE79A"/>
    <GlyphID id="28" name="uniE78B"/>
    <GlyphID id="29" name="uniE77F"/>
    <GlyphID id="30" name="uniE780"/>
    <GlyphID id="31" name="uniE791"/>
    <GlyphID id="32" name="uniE7A0"/>
    <GlyphID id="33" name="uniE7A1"/>
    <GlyphID id="34" name="uniE7A8"/>
    <GlyphID id="35" name="uniE785"/>
    <GlyphID id="36" name="uniE798"/>
    <GlyphID id="37" name="uniE78E"/>
    <GlyphID id="38" name="uniE79C"/>
    <GlyphID id="39" name="uniE787"/>
    <GlyphID id="40" name="uniE79D"/>
    <GlyphID id="41" name="uniE792"/>
    <GlyphID id="42" name="uniE786"/>
    <GlyphID id="43" name="uniE78A"/>
    <GlyphID id="44" name="uniE788"/>
    <GlyphID id="45" name="uniE78C"/>
  </GlyphOrder>

  <head>
    <!-- Most of this table will be recalculated by the compiler -->
    <tableVersion value="1.0"/>
    <fontRevision value="6.22"/>
    <checkSumAdjustment value="0x158d640d"/>
    <magicNumber value="0x5f0f3cf5"/>
    <flags value="00100000 00011011"/>
    <unitsPerEm value="2048"/>
    <created value="Fri Jul 18 15:30:55 1997"/>
    <modified value="Fri Jun 16 14:52:23 2017"/>
    <xMin value="6"/>
    <yMin value="-303"/>
    <xMax value="2036"/>
    <yMax value="1729"/>
    <macStyle value="00000000 00000000"/>
    <lowestRecPPEM value="9"/>
    <fontDirectionHint value="1"/>
    <indexToLocFormat value="0"/>
    <glyphDataFormat value="0"/>
  </head>

  <hhea>
    <tableVersion value="0x00010000"/>
    <ascent value="2167"/>
    <descent value="-536"/>
    <lineGap value="0"/>
    <advanceWidthMax value="2048"/>
    <minLeftSideBearing value="6"/>
    <minRightSideBearing value="12"/>
    <xMaxExtent value="2036"/>
    <caretSlopeRise value="1"/>
    <caretSlopeRun value="0"/>
    <caretOffset value="0"/>
    <reserved0 value="0"/>
    <reserved1 value="0"/>
    <reserved2 value="0"/>
    <reserved3 value="0"/>
    <metricDataFormat value="0"/>
    <numberOfHMetrics value="46"/>
  </hhea>

  <maxp>
    <!-- Most of this table will be recalculated by the compiler -->
    <tableVersion value="0x10000"/>
    <numGlyphs value="46"/>
    <maxPoints value="85"/>
    <maxContours value="9"/>
    <maxCompositePoints value="0"/>
    <maxCompositeContours value="0"/>
    <maxZones value="2"/>
    <maxTwilightPoints value="16"/>
    <maxStorage value="47"/>
    <maxFunctionDefs value="92"/>
    <maxInstructionDefs value="0"/>
    <maxStackElements value="2225"/>
    <maxSizeOfInstructions value="2566"/>
    <maxComponentElements value="0"/>
    <maxComponentDepth value="0"/>
  </maxp>

  <OS_2>
    <!-- The fields 'usFirstCharIndex' and 'usLastCharIndex'
         will be recalculated by the compiler -->
    <version value="3"/>
    <xAvgCharWidth value="987"/>
    <usWeightClass value="400"/>
    <usWidthClass value="5"/>
    <fsType value="00000000 00001000"/>
    <ySubscriptXSize value="1434"/>
    <ySubscriptYSize value="1331"/>
    <ySubscriptXOffset value="0"/>
    <ySubscriptYOffset value="182"/>
    <ySuperscriptXSize value="1434"/>
    <ySuperscriptYSize value="1331"/>
    <ySuperscriptXOffset value="0"/>
    <ySuperscriptYOffset value="581"/>
    <yStrikeoutSize value="102"/>
    <yStrikeoutPosition value="655"/>
    <sFamilyClass value="2053"/>
    <panose>
      <bFamilyType value="2"/>
      <bSerifStyle value="11"/>
      <bWeight value="5"/>
      <bProportion value="3"/>
      <bContrast value="2"/>
      <bStrokeVariation value="2"/>
      <bArmStyle value="4"/>
      <bLetterForm value="2"/>
      <bMidline value="2"/>
      <bXHeight value="4"/>
    </panose>
    <ulUnicodeRange1 value="10000000 00000000 00000010 10000111"/>
    <ulUnicodeRange2 value="00101000 11001111 00111100 01010000"/>
    <ulUnicodeRange3 value="00000000 00000000 00000000 00010110"/>
    <ulUnicodeRange4 value="00000000 00000000 00000000 00000000"/>
    <achVendID value="MS  "/>
    <fsSelection value="00000000 01000000"/>
    <usFirstCharIndex value="49"/>
    <usLastCharIndex value="40644"/>
    <sTypoAscender value="1663"/>
    <sTypoDescender value="-519"/>
    <sTypoLineGap value="9"/>
    <usWinAscent value="2167"/>
    <usWinDescent value="536"/>
    <ulCodePageRange1 value="00000000 00000100 00000000 00011111"/>
    <ulCodePageRange2 value="00000000 00000000 00000000 00000000"/>
    <sxHeight value="1106"/>
    <sCapHeight value="1549"/>
    <usDefaultChar value="0"/>
    <usBreakChar value="32"/>
    <usMaxContext value="2"/>
  </OS_2>

  <hmtx>
    <mtx name=".notdef" width="1201" lsb="91"/>
    <mtx name="uniE77C" width="2048" lsb="119"/>
    <mtx name="uniE77D" width="2048" lsb="26"/>
    <mtx name="uniE77E" width="1201" lsb="200"/>
    <mtx name="uniE77F" width="2048" lsb="36"/>
    <mtx name="uniE780" width="2048" lsb="32"/>
    <mtx name="uniE781" width="1126" lsb="23"/>
    <mtx name="uniE783" width="2048" lsb="30"/>
    <mtx name="uniE784" width="2048" lsb="36"/>
    <mtx name="uniE785" width="2048" lsb="26"/>
    <mtx name="uniE786" width="2048" lsb="12"/>
    <mtx name="uniE787" width="2048" lsb="40"/>
    <mtx name="uniE788" width="2048" lsb="56"/>
    <mtx name="uniE789" width="1201" lsb="28"/>
    <mtx name="uniE78A" width="2048" lsb="40"/>
    <mtx name="uniE78B" width="2048" lsb="24"/>
    <mtx name="uniE78C" width="1285" lsb="179"/>
    <mtx name="uniE78D" width="2048" lsb="42"/>
    <mtx name="uniE78E" width="1201" lsb="6"/>
    <mtx name="uniE78F" width="1201" lsb="98"/>
    <mtx name="uniE790" width="2048" lsb="17"/>
    <mtx name="uniE791" width="1441" lsb="26"/>
    <mtx name="uniE792" width="2048" lsb="128"/>
    <mtx name="uniE793" width="2048" lsb="38"/>
    <mtx name="uniE794" width="2001" lsb="52"/>
    <mtx name="uniE795" width="2048" lsb="118"/>
    <mtx name="uniE796" width="2048" lsb="8"/>
    <mtx name="uniE797" width="2048" lsb="212"/>
    <mtx name="uniE798" width="1201" lsb="60"/>
    <mtx name="uniE799" width="2048" lsb="200"/>
    <mtx name="uniE79A" width="2048" lsb="80"/>
    <mtx name="uniE79B" width="2048" lsb="50"/>
    <mtx name="uniE79C" width="1201" lsb="24"/>
    <mtx name="uniE79D" width="2048" lsb="28"/>
    <mtx name="uniE79E" width="2048" lsb="100"/>
    <mtx name="uniE79F" width="1201" lsb="111"/>
    <mtx name="uniE7A0" width="2048" lsb="26"/>
    <mtx name="uniE7A1" width="2048" lsb="28"/>
    <mtx name="uniE7A2" width="2048" lsb="46"/>
    <mtx name="uniE7A3" width="1201" lsb="168"/>
    <mtx name="uniE7A4" width="2048" lsb="18"/>
    <mtx name="uniE7A5" width="1201" lsb="200"/>
    <mtx name="uniE7A6" width="2048" lsb="100"/>
    <mtx name="uniE7A7" width="2048" lsb="174"/>
    <mtx name="uniE7A8" width="1201" lsb="66"/>
    <mtx name="uniE7A9" width="2048" lsb="143"/>
  </hmtx>

  <cmap>
    <tableVersion version="0"/>
    <cmap_format_4 platformID="3" platEncID="1" language="0">
      <map code="0xe77c" name="uniE77C"/><!-- ???? -->
      <map code="0xe77d" name="uniE77D"/><!-- ???? -->
      <map code="0xe77e" name="uniE77E"/><!-- ???? -->
      <map code="0xe77f" name="uniE77F"/><!-- ???? -->
      <map code="0xe780" name="uniE780"/><!-- ???? -->
      <map code="0xe781" name="uniE781"/><!-- ???? -->
      <map code="0xe783" name="uniE783"/><!-- ???? -->
      <map code="0xe784" name="uniE784"/><!-- ???? -->
      <map code="0xe785" name="uniE785"/><!-- ???? -->
      <map code="0xe786" name="uniE786"/><!-- ???? -->
      <map code="0xe787" name="uniE787"/><!-- ???? -->
      <map code="0xe788" name="uniE788"/><!-- ???? -->
      <map code="0xe789" name="uniE789"/><!-- ???? -->
      <map code="0xe78a" name="uniE78A"/><!-- ???? -->
      <map code="0xe78b" name="uniE78B"/><!-- ???? -->
      <map code="0xe78c" name="uniE78C"/><!-- ???? -->
      <map code="0xe78d" name="uniE78D"/><!-- ???? -->
      <map code="0xe78e" name="uniE78E"/><!-- ???? -->
      <map code="0xe78f" name="uniE78F"/><!-- ???? -->
      <map code="0xe790" name="uniE790"/><!-- ???? -->
      <map code="0xe791" name="uniE791"/><!-- ???? -->
      <map code="0xe792" name="uniE792"/><!-- ???? -->
      <map code="0xe793" name="uniE793"/><!-- ???? -->
      <map code="0xe794" name="uniE794"/><!-- ???? -->
      <map code="0xe795" name="uniE795"/><!-- ???? -->
      <map code="0xe796" name="uniE796"/><!-- ???? -->
      <map code="0xe797" name="uniE797"/><!-- ???? -->
      <map code="0xe798" name="uniE798"/><!-- ???? -->
      <map code="0xe799" name="uniE799"/><!-- ???? -->
      <map code="0xe79a" name="uniE79A"/><!-- ???? -->
      <map code="0xe79b" name="uniE79B"/><!-- ???? -->
      <map code="0xe79c" name="uniE79C"/><!-- ???? -->
      <map code="0xe79d" name="uniE79D"/><!-- ???? -->
      <map code="0xe79e" name="uniE79E"/><!-- ???? -->
      <map code="0xe79f" name="uniE79F"/><!-- ???? -->
      <map code="0xe7a0" name="uniE7A0"/><!-- ???? -->
      <map code="0xe7a1" name="uniE7A1"/><!-- ???? -->
      <map code="0xe7a2" name="uniE7A2"/><!-- ???? -->
      <map code="0xe7a3" name="uniE7A3"/><!-- ???? -->
      <map code="0xe7a4" name="uniE7A4"/><!-- ???? -->
      <map code="0xe7a5" name="uniE7A5"/><!-- ???? -->
      <map code="0xe7a6" name="uniE7A6"/><!-- ???? -->
      <map code="0xe7a7" name="uniE7A7"/><!-- ???? -->
      <map code="0xe7a8" name="uniE7A8"/><!-- ???? -->
      <map code="0xe7a9" name="uniE7A9"/><!-- ???? -->
    </cmap_format_4>
  </cmap>

  <fpgm>
    <assembly>
      NPUSHB[ ]	/* 81 values pushed */
      91 90 89 84 82 77 76 75 74 73 72 71 70 67 66 65 64 63 62 61 60 59 58 57 56
      55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31
      30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6
      5 4 3 2 1 0
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        RTG[ ]	/* RoundToGrid */
        PUSHB[ ]	/* 1 value pushed */
        24
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          RCVT[ ]	/* ReadCVT */
          ROUND[10]	/* Round */
          PUSHB[ ]	/* 1 value pushed */
          25
          RS[ ]	/* ReadStore */
          ADD[ ]	/* Add */
          PUSHB[ ]	/* 1 value pushed */
          12
          SWAP[ ]	/* SwapTopStack */
          WCVTP[ ]	/* WriteCVTInPixels */
          SWAP[ ]	/* SwapTopStack */
          SRP0[ ]	/* SetRefPoint0 */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          12
          FLIPOFF[ ]	/* SetAutoFlipOff */
          MIRP[10000]	/* MoveIndirectRelPt */
          FLIPON[ ]	/* SetAutoFlipOn */
          MDAP[1]	/* MoveDirectAbsPt */
          PUSHB[ ]	/* 1 value pushed */
          0
          SRP2[ ]	/* SetRefPoint2 */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          SWAP[ ]	/* SwapTopStack */
          SRP1[ ]	/* SetRefPoint1 */
          DUP[ ]	/* DuplicateTopStack */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        RTG[ ]	/* RoundToGrid */
        PUSHB[ ]	/* 1 value pushed */
        24
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          5
          CALL[ ]	/* CallFunction */
          PUSHB[ ]	/* 1 value pushed */
          0
          SZP0[ ]	/* SetZonePointer0 */
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          20
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            PUSHB[ ]	/* 2 values pushed */
            0 64
            SHPIX[ ]	/* ShiftZoneByPixel */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          6
          CALL[ ]	/* CallFunction */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          SWAP[ ]	/* SwapTopStack */
          SRP1[ ]	/* SetRefPoint1 */
          DUP[ ]	/* DuplicateTopStack */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        RTG[ ]	/* RoundToGrid */
        PUSHB[ ]	/* 1 value pushed */
        24
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          FLIPOFF[ ]	/* SetAutoFlipOff */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[10010]	/* MoveIndirectRelPt */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          0
          SRP2[ ]	/* SetRefPoint2 */
          FLIPON[ ]	/* SetAutoFlipOn */
        ELSE[ ]	/* Else */
          DUP[ ]	/* DuplicateTopStack */
          RCVT[ ]	/* ReadCVT */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          SWAP[ ]	/* SwapTopStack */
          MD[1]	/* MeasureDistance */
          SUB[ ]	/* Subtract */
          ABS[ ]	/* Absolute */
          PUSHB[ ]	/* 1 value pushed */
          40
          GT[ ]	/* GreaterThan */
          IF[ ]	/* If */
            POP[ ]	/* PopTopStack */
            SWAP[ ]	/* SwapTopStack */
            SRP0[ ]	/* SetRefPoint0 */
            MDRP[10110]	/* MoveDirectRelPt */
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 1 value pushed */
            3
            CINDEX[ ]	/* CopyXToTopStack */
            SRP0[ ]	/* SetRefPoint0 */
            MIRP[10010]	/* MoveIndirectRelPt */
            POP[ ]	/* PopTopStack */
            PUSHB[ ]	/* 1 value pushed */
            0
            SRP2[ ]	/* SetRefPoint2 */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        26
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          MD[0]	/* MeasureDistance */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          MD[1]	/* MeasureDistance */
          SUB[ ]	/* Subtract */
          DUP[ ]	/* DuplicateTopStack */
          ABS[ ]	/* Absolute */
          PUSHB[ ]	/* 1 value pushed */
          16
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 1 value pushed */
            3
            CINDEX[ ]	/* CopyXToTopStack */
            PUSHB[ ]	/* 1 value pushed */
            3
            CINDEX[ ]	/* CopyXToTopStack */
            MD[0]	/* MeasureDistance */
            PUSHB[ ]	/* 1 value pushed */
            0
            LT[ ]	/* LessThan */
            IF[ ]	/* If */
              PUSHB[ ]	/* 1 value pushed */
              0
              LT[ ]	/* LessThan */
              IF[ ]	/* If */
                PUSHW[ ]	/* 1 value pushed */
                -30
                SHPIX[ ]	/* ShiftZoneByPixel */
                POP[ ]	/* PopTopStack */
              ELSE[ ]	/* Else */
                PUSHB[ ]	/* 1 value pushed */
                0
                SHPIX[ ]	/* ShiftZoneByPixel */
                POP[ ]	/* PopTopStack */
              EIF[ ]	/* EndIf */
            ELSE[ ]	/* Else */
              PUSHB[ ]	/* 1 value pushed */
              0
              GT[ ]	/* GreaterThan */
              IF[ ]	/* If */
                PUSHB[ ]	/* 1 value pushed */
                30
                SHPIX[ ]	/* ShiftZoneByPixel */
                POP[ ]	/* PopTopStack */
              ELSE[ ]	/* Else */
                PUSHB[ ]	/* 1 value pushed */
                0
                SHPIX[ ]	/* ShiftZoneByPixel */
                POP[ ]	/* PopTopStack */
              EIF[ ]	/* EndIf */
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        RTG[ ]	/* RoundToGrid */
        PUSHB[ ]	/* 1 value pushed */
        24
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          5
          CALL[ ]	/* CallFunction */
          PUSHB[ ]	/* 1 value pushed */
          0
          SZP0[ ]	/* SetZonePointer0 */
          MPPEM[ ]	/* MeasurePixelPerEm */
          PUSHB[ ]	/* 1 value pushed */
          20
          LT[ ]	/* LessThan */
          IF[ ]	/* If */
            PUSHW[ ]	/* 2 values pushed */
            0 -64
            SHPIX[ ]	/* ShiftZoneByPixel */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          6
          CALL[ ]	/* CallFunction */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          SWAP[ ]	/* SwapTopStack */
          SRP1[ ]	/* SetRefPoint1 */
          DUP[ ]	/* DuplicateTopStack */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        FLIPOFF[ ]	/* SetAutoFlipOff */
        SVTCA[1]	/* SetFPVectorToAxis */
        ROLL[ ]	/* RollTopThreeStack */
        SRP0[ ]	/* SetRefPoint0 */
        PUSHB[ ]	/* 2 values pushed */
        12 25
        RS[ ]	/* ReadStore */
        WCVTP[ ]	/* WriteCVTInPixels */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZP1[ ]	/* SetZonePointer1 */
        PUSHB[ ]	/* 2 values pushed */
        0 12
        MIRP[00010]	/* MoveIndirectRelPt */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZP2[ ]	/* SetZonePointer2 */
        PUSHW[ ]	/* 2 values pushed */
        0 -16
        SHPIX[ ]	/* ShiftZoneByPixel */
        SVTCA[0]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        0
        ALIGNRP[ ]	/* AlignRelativePt */
        PUSHB[ ]	/* 1 value pushed */
        40
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        PUSHB[ ]	/* 1 value pushed */
        0
        ALIGNRP[ ]	/* AlignRelativePt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        RTG[ ]	/* RoundToGrid */
        PUSHB[ ]	/* 1 value pushed */
        0
        MDAP[1]	/* MoveDirectAbsPt */
        PUSHB[ ]	/* 1 value pushed */
        1
        SZP1[ ]	/* SetZonePointer1 */
        MIRP[10010]	/* MoveIndirectRelPt */
        PUSHB[ ]	/* 1 value pushed */
        1
        SZP0[ ]	/* SetZonePointer0 */
        PUSHB[ ]	/* 1 value pushed */
        1
        SZP2[ ]	/* SetZonePointer2 */
        FLIPON[ ]	/* SetAutoFlipOn */
        PUSHB[ ]	/* 1 value pushed */
        0
        SRP2[ ]	/* SetRefPoint2 */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        RTG[ ]	/* RoundToGrid */
        PUSHB[ ]	/* 1 value pushed */
        24
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          5
          CALL[ ]	/* CallFunction */
          PUSHB[ ]	/* 1 value pushed */
          0
          SZP0[ ]	/* SetZonePointer0 */
          PUSHW[ ]	/* 2 values pushed */
          0 -32
          SHPIX[ ]	/* ShiftZoneByPixel */
          PUSHB[ ]	/* 1 value pushed */
          6
          CALL[ ]	/* CallFunction */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          SWAP[ ]	/* SwapTopStack */
          SRP1[ ]	/* SetRefPoint1 */
          DUP[ ]	/* DuplicateTopStack */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        RTG[ ]	/* RoundToGrid */
        PUSHB[ ]	/* 1 value pushed */
        24
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          RCVT[ ]	/* ReadCVT */
          ABS[ ]	/* Absolute */
          ROUND[10]	/* Round */
          SWAP[ ]	/* SwapTopStack */
          RCVT[ ]	/* ReadCVT */
          ABS[ ]	/* Absolute */
          ROUND[01]	/* Round */
          PUSHB[ ]	/* 1 value pushed */
          25
          RS[ ]	/* ReadStore */
          ABS[ ]	/* Absolute */
          ADD[ ]	/* Add */
          ADD[ ]	/* Add */
          PUSHB[ ]	/* 1 value pushed */
          12
          SWAP[ ]	/* SwapTopStack */
          WCVTP[ ]	/* WriteCVTInPixels */
          SWAP[ ]	/* SwapTopStack */
          SRP0[ ]	/* SetRefPoint0 */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          12
          MIRP[10000]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          PUSHB[ ]	/* 1 value pushed */
          0
          SRP2[ ]	/* SetRefPoint2 */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          DUP[ ]	/* DuplicateTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          DUP[ ]	/* DuplicateTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          GT[ ]	/* GreaterThan */
          IF[ ]	/* If */
            SRP1[ ]	/* SetRefPoint1 */
            SHP[1]	/* ShiftPointByLastPoint */
          ELSE[ ]	/* Else */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        MPPEM[ ]	/* MeasurePixelPerEm */
        PUSHB[ ]	/* 1 value pushed */
        200
        LTEQ[ ]	/* LessThenOrEqual */
        IF[ ]	/* If */
          PUSHB[ ]	/* 2 values pushed */
          11 10
          RS[ ]	/* ReadStore */
          SWAP[ ]	/* SwapTopStack */
          RS[ ]	/* ReadStore */
          NEG[ ]	/* Negate */
          SPVFS[ ]	/* SetPVectorFromStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[0]	/* SetFPVectorToAxis */
        MPPEM[ ]	/* MeasurePixelPerEm */
        PUSHB[ ]	/* 1 value pushed */
        200
        LTEQ[ ]	/* LessThenOrEqual */
        IF[ ]	/* If */
          SVTCA[0]	/* SetFPVectorToAxis */
          PUSHB[ ]	/* 2 values pushed */
          10 11
          RS[ ]	/* ReadStore */
          SWAP[ ]	/* SwapTopStack */
          RS[ ]	/* ReadStore */
          SFVFS[ ]	/* SetFVectorFromStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[0]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        12
        SWAP[ ]	/* SwapTopStack */
        WCVTF[ ]	/* WriteCVTInFUnits */
        PUSHB[ ]	/* 2 values pushed */
        1 12
        MIAP[0]	/* MoveIndirectAbsPt */
        SVTCA[1]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        12
        SWAP[ ]	/* SwapTopStack */
        WCVTF[ ]	/* WriteCVTInFUnits */
        PUSHB[ ]	/* 2 values pushed */
        2 12
        RCVT[ ]	/* ReadCVT */
        MSIRP[0]	/* MoveStackIndirRelPt */
        PUSHB[ ]	/* 2 values pushed */
        2 0
        SFVTL[0]	/* SetFVectorToLine */
        GFV[ ]	/* GetFVector */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        18
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        RCVT[ ]	/* ReadCVT */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        RCVT[ ]	/* ReadCVT */
        ROUND[10]	/* Round */
        PUSHB[ ]	/* 1 value pushed */
        64
        MAX[ ]	/* Maximum */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        SWAP[ ]	/* SwapTopStack */
        WCVTP[ ]	/* WriteCVTInPixels */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        19
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        RCVT[ ]	/* ReadCVT */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        RCVT[ ]	/* ReadCVT */
        ROUND[10]	/* Round */
        PUSHW[ ]	/* 1 value pushed */
        -64
        MIN[ ]	/* Minimum */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        SWAP[ ]	/* SwapTopStack */
        WCVTP[ ]	/* WriteCVTInPixels */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        0
        PUSHB[ ]	/* 1 value pushed */
        18
        CALL[ ]	/* CallFunction */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        0
        PUSHB[ ]	/* 1 value pushed */
        19
        CALL[ ]	/* CallFunction */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        MPPEM[ ]	/* MeasurePixelPerEm */
        PUSHB[ ]	/* 1 value pushed */
        200
        LTEQ[ ]	/* LessThenOrEqual */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          6
          RS[ ]	/* ReadStore */
          PUSHB[ ]	/* 1 value pushed */
          7
          RS[ ]	/* ReadStore */
          NEG[ ]	/* Negate */
          SPVFS[ ]	/* SetPVectorFromStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        ROUND[01]	/* Round */
        PUSHB[ ]	/* 1 value pushed */
        64
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        0
        MAX[ ]	/* Maximum */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 2 values pushed */
        44 192
        ROLL[ ]	/* RollTopThreeStack */
        MIN[ ]	/* Minimum */
        PUSHW[ ]	/* 1 value pushed */
        4096
        DIV[ ]	/* Divide */
        ADD[ ]	/* Add */
        CALL[ ]	/* CallFunction */
        GPV[ ]	/* GetPVector */
        ABS[ ]	/* Absolute */
        SWAP[ ]	/* SwapTopStack */
        ABS[ ]	/* Absolute */
        SUB[ ]	/* Subtract */
        NOT[ ]	/* LogicalNot */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          3
          SUB[ ]	/* Subtract */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        0 3
        CINDEX[ ]	/* CopyXToTopStack */
        RCVT[ ]	/* ReadCVT */
        ROUND[00]	/* Round */
        EQ[ ]	/* Equal */
        PUSHB[ ]	/* 1 value pushed */
        28
        MPPEM[ ]	/* MeasurePixelPerEm */
        LT[ ]	/* LessThan */
        AND[ ]	/* LogicalAnd */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          ADD[ ]	/* Add */
          ROUND[00]	/* Round */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          SWAP[ ]	/* SwapTopStack */
          WCVTP[ ]	/* WriteCVTInPixels */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          SWAP[ ]	/* SwapTopStack */
          WCVTP[ ]	/* WriteCVTInPixels */
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          DUP[ ]	/* DuplicateTopStack */
          RCVT[ ]	/* ReadCVT */
          ROUND[00]	/* Round */
          DUP[ ]	/* DuplicateTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          SWAP[ ]	/* SwapTopStack */
          WCVTP[ ]	/* WriteCVTInPixels */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          ROUND[00]	/* Round */
          ADD[ ]	/* Add */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          SWAP[ ]	/* SwapTopStack */
          WCVTP[ ]	/* WriteCVTInPixels */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        ROUND[00]	/* Round */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        SWAP[ ]	/* SwapTopStack */
        WCVTP[ ]	/* WriteCVTInPixels */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        RCVT[ ]	/* ReadCVT */
        ABS[ ]	/* Absolute */
        ROUND[00]	/* Round */
        NEG[ ]	/* Negate */
        ADD[ ]	/* Add */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
        SWAP[ ]	/* SwapTopStack */
        WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        9
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          SDPVTL[1]	/* SetDualPVectorToLine */
          POP[ ]	/* PopTopStack */
          MDRP[00000]	/* MoveDirectRelPt */
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          18
          RS[ ]	/* ReadStore */
          IF[ ]	/* If */
            SDPVTL[1]	/* SetDualPVectorToLine */
            RCVT[ ]	/* ReadCVT */
            PUSHB[ ]	/* 1 value pushed */
            17
            CALL[ ]	/* CallFunction */
            PUSHB[ ]	/* 1 value pushed */
            13
            SWAP[ ]	/* SwapTopStack */
            WCVTP[ ]	/* WriteCVTInPixels */
            PUSHB[ ]	/* 1 value pushed */
            13
            ROFF[ ]	/* RoundOff */
            MIRP[00100]	/* MoveIndirectRelPt */
          ELSE[ ]	/* Else */
            SPVTCA[1]	/* SetPVectorToAxis */
            ROLL[ ]	/* RollTopThreeStack */
            RCVT[ ]	/* ReadCVT */
            RTG[ ]	/* RoundToGrid */
            ROUND[01]	/* Round */
            DUP[ ]	/* DuplicateTopStack */
            PUSHB[ ]	/* 1 value pushed */
            13
            SWAP[ ]	/* SwapTopStack */
            WCVTP[ ]	/* WriteCVTInPixels */
            ROLL[ ]	/* RollTopThreeStack */
            ROLL[ ]	/* RollTopThreeStack */
            SDPVTL[1]	/* SetDualPVectorToLine */
            DUP[ ]	/* DuplicateTopStack */
            PUSHB[ ]	/* 1 value pushed */
            160
            LTEQ[ ]	/* LessThenOrEqual */
            IF[ ]	/* If */
              PUSHB[ ]	/* 1 value pushed */
              17
              CALL[ ]	/* CallFunction */
              PUSHB[ ]	/* 1 value pushed */
              13
              SWAP[ ]	/* SwapTopStack */
              WCVTP[ ]	/* WriteCVTInPixels */
              PUSHB[ ]	/* 1 value pushed */
              13
              ROFF[ ]	/* RoundOff */
              MIRP[00100]	/* MoveIndirectRelPt */
            ELSE[ ]	/* Else */
              POP[ ]	/* PopTopStack */
              PUSHB[ ]	/* 1 value pushed */
              13
              ROFF[ ]	/* RoundOff */
              MIRP[00100]	/* MoveIndirectRelPt */
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
        RTG[ ]	/* RoundToGrid */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        RCVT[ ]	/* ReadCVT */
        SWAP[ ]	/* SwapTopStack */
        RCVT[ ]	/* ReadCVT */
        ROUND[00]	/* Round */
        ADD[ ]	/* Add */
        WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        RCVT[ ]	/* ReadCVT */
        ROUND[10]	/* Round */
        WS[ ]	/* WriteStore */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        RTG[ ]	/* RoundToGrid */
        MDAP[1]	/* MoveDirectAbsPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        RTG[ ]	/* RoundToGrid */
        PUSHB[ ]	/* 1 value pushed */
        24
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          MD[0]	/* MeasureDistance */
          ABS[ ]	/* Absolute */
          SWAP[ ]	/* SwapTopStack */
          RCVT[ ]	/* ReadCVT */
          ABS[ ]	/* Absolute */
          ROUND[01]	/* Round */
          PUSHB[ ]	/* 1 value pushed */
          64
          MAX[ ]	/* Maximum */
          SUB[ ]	/* Subtract */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          128
          DIV[ ]	/* Divide */
          ROUND[10]	/* Round */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          SUB[ ]	/* Subtract */
          MIN[ ]	/* Minimum */
          PUSHB[ ]	/* 1 value pushed */
          25
          RS[ ]	/* ReadStore */
          ADD[ ]	/* Add */
          PUSHB[ ]	/* 1 value pushed */
          12
          SWAP[ ]	/* SwapTopStack */
          WCVTP[ ]	/* WriteCVTInPixels */
          POP[ ]	/* PopTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 1 value pushed */
          12
          MIRP[10110]	/* MoveIndirectRelPt */
          POP[ ]	/* PopTopStack */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        24
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          ABS[ ]	/* Absolute */
          ADD[ ]	/* Add */
          ROUND[10]	/* Round */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          ROUND[10]	/* Round */
          SUB[ ]	/* Subtract */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          ROUND[10]	/* Round */
          DUP[ ]	/* DuplicateTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          MAX[ ]	/* Maximum */
          NEG[ ]	/* Negate */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          SWAP[ ]	/* SwapTopStack */
          WCVTP[ ]	/* WriteCVTInPixels */
          MIN[ ]	/* Minimum */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          SWAP[ ]	/* SwapTopStack */
          WCVTP[ ]	/* WriteCVTInPixels */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        ELSE[ ]	/* Else */
          DUP[ ]	/* DuplicateTopStack */
          RCVT[ ]	/* ReadCVT */
          ROUND[10]	/* Round */
          WCVTP[ ]	/* WriteCVTInPixels */
          DUP[ ]	/* DuplicateTopStack */
          RCVT[ ]	/* ReadCVT */
          ROUND[10]	/* Round */
          WCVTP[ ]	/* WriteCVTInPixels */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        PUSHB[ ]	/* 1 value pushed */
        0
        NEQ[ ]	/* NotEqual */
        PUSHB[ ]	/* 1 value pushed */
        24
        RS[ ]	/* ReadStore */
        AND[ ]	/* LogicalAnd */
        IF[ ]	/* If */
          RCVT[ ]	/* ReadCVT */
          ROUND[00]	/* Round */
          SWAP[ ]	/* SwapTopStack */
          RCVT[ ]	/* ReadCVT */
          ROUND[01]	/* Round */
          PUSHB[ ]	/* 1 value pushed */
          64
          MAX[ ]	/* Maximum */
          SUB[ ]	/* Subtract */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          128
          DIV[ ]	/* Divide */
          ROUND[10]	/* Round */
          DUP[ ]	/* DuplicateTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          SWAP[ ]	/* SwapTopStack */
          SUB[ ]	/* Subtract */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          MAX[ ]	/* Maximum */
          NEG[ ]	/* Negate */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          SWAP[ ]	/* SwapTopStack */
          WCVTP[ ]	/* WriteCVTInPixels */
          MIN[ ]	/* Minimum */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          SWAP[ ]	/* SwapTopStack */
          WCVTP[ ]	/* WriteCVTInPixels */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          25
          CALL[ ]	/* CallFunction */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        ROLL[ ]	/* RollTopThreeStack */
        ROLL[ ]	/* RollTopThreeStack */
        RCVT[ ]	/* ReadCVT */
        ABS[ ]	/* Absolute */
        SWAP[ ]	/* SwapTopStack */
        RCVT[ ]	/* ReadCVT */
        ABS[ ]	/* Absolute */
        SUB[ ]	/* Subtract */
        ABS[ ]	/* Absolute */
        WS[ ]	/* WriteStore */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        25
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        24
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          27
          CALL[ ]	/* CallFunction */
          SVTCA[1]	/* SetFPVectorToAxis */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          RS[ ]	/* ReadStore */
          PUSHB[ ]	/* 1 value pushed */
          64
          EQ[ ]	/* Equal */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          RS[ ]	/* ReadStore */
          PUSHB[ ]	/* 1 value pushed */
          0
          EQ[ ]	/* Equal */
          AND[ ]	/* LogicalAnd */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            3
            CINDEX[ ]	/* CopyXToTopStack */
            DUP[ ]	/* DuplicateTopStack */
            RCVT[ ]	/* ReadCVT */
            PUSHB[ ]	/* 1 value pushed */
            64
            SUB[ ]	/* Subtract */
            WCVTP[ ]	/* WriteCVTInPixels */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          RS[ ]	/* ReadStore */
          PUSHB[ ]	/* 1 value pushed */
          0
          EQ[ ]	/* Equal */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          RS[ ]	/* ReadStore */
          PUSHB[ ]	/* 1 value pushed */
          64
          EQ[ ]	/* Equal */
          AND[ ]	/* LogicalAnd */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            4
            CINDEX[ ]	/* CopyXToTopStack */
            DUP[ ]	/* DuplicateTopStack */
            RCVT[ ]	/* ReadCVT */
            PUSHB[ ]	/* 1 value pushed */
            64
            ADD[ ]	/* Add */
            WCVTP[ ]	/* WriteCVTInPixels */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        7
        CINDEX[ ]	/* CopyXToTopStack */
        SDPVTL[1]	/* SetDualPVectorToLine */
        SFVTCA[1]	/* SetFVectorToAxis */
        MDAP[0]	/* MoveDirectAbsPt */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        PUSHB[ ]	/* 1 value pushed */
        4
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        7
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        20
        CALL[ ]	/* CallFunction */
        SRP0[ ]	/* SetRefPoint0 */
        POP[ ]	/* PopTopStack */
        MDRP[00100]	/* MoveDirectRelPt */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MDRP[00000]	/* MoveDirectRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        GT[ ]	/* GreaterThan */
        IF[ ]	/* If */
          RCVT[ ]	/* ReadCVT */
          WCVTP[ ]	/* WriteCVTInPixels */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          RTDG[ ]	/* RoundToDoubleGrid */
          MIRP[01101]	/* MoveIndirectRelPt */
          RTG[ ]	/* RoundToGrid */
        ELSE[ ]	/* Else */
          MIRP[01101]	/* MoveIndirectRelPt */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          RCVT[ ]	/* ReadCVT */
          WCVTP[ ]	/* WriteCVTInPixels */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        RTG[ ]	/* RoundToGrid */
        MPPEM[ ]	/* MeasurePixelPerEm */
        GT[ ]	/* GreaterThan */
        IF[ ]	/* If */
          ROLL[ ]	/* RollTopThreeStack */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        GTEQ[ ]	/* GreaterThanOrEqual */
        SWAP[ ]	/* SwapTopStack */
        MPPEM[ ]	/* MeasurePixelPerEm */
        LTEQ[ ]	/* LessThenOrEqual */
        AND[ ]	/* LogicalAnd */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          ROUND[00]	/* Round */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          ROUND[00]	/* Round */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          ADD[ ]	/* Add */
          EQ[ ]	/* Equal */
          IF[ ]	/* If */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 1 value pushed */
            2
            CINDEX[ ]	/* CopyXToTopStack */
            RCVT[ ]	/* ReadCVT */
            ROUND[00]	/* Round */
            ADD[ ]	/* Add */
            PUSHB[ ]	/* 1 value pushed */
            3
            CINDEX[ ]	/* CopyXToTopStack */
            SWAP[ ]	/* SwapTopStack */
            WCVTP[ ]	/* WriteCVTInPixels */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          RTDG[ ]	/* RoundToDoubleGrid */
          MDRP[01101]	/* MoveDirectRelPt */
          RTG[ ]	/* RoundToGrid */
        ELSE[ ]	/* Else */
          MDRP[01101]	/* MoveDirectRelPt */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        GC[0]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        GC[0]	/* GetCoordOnPVector */
        ADD[ ]	/* Add */
        ROLL[ ]	/* RollTopThreeStack */
        ROLL[ ]	/* RollTopThreeStack */
        GC[0]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        GC[0]	/* GetCoordOnPVector */
        ROLL[ ]	/* RollTopThreeStack */
        ADD[ ]	/* Add */
        ROLL[ ]	/* RollTopThreeStack */
        SUB[ ]	/* Subtract */
        PUSHW[ ]	/* 1 value pushed */
        -128
        DIV[ ]	/* Divide */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        SWAP[ ]	/* SwapTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        PUSHB[ ]	/* 2 values pushed */
        12 12
        ROLL[ ]	/* RollTopThreeStack */
        WCVTF[ ]	/* WriteCVTInFUnits */
        RCVT[ ]	/* ReadCVT */
        ADD[ ]	/* Add */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          1
          SUB[ ]	/* Subtract */
          PUSHW[ ]	/* 1 value pushed */
          -70
          MAX[ ]	/* Maximum */
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          70
          MIN[ ]	/* Minimum */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        16
        ADD[ ]	/* Add */
        ROUND[00]	/* Round */
        SVTCA[1]	/* SetFPVectorToAxis */
        MSIRP[0]	/* MoveStackIndirRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        GT[ ]	/* GreaterThan */
        MPPEM[ ]	/* MeasurePixelPerEm */
        PUSHB[ ]	/* 1 value pushed */
        19
        LTEQ[ ]	/* LessThenOrEqual */
        OR[ ]	/* LogicalOr */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          GC[0]	/* GetCoordOnPVector */
          DUP[ ]	/* DuplicateTopStack */
          ROUND[00]	/* Round */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          MIAP[1]	/* MoveIndirectAbsPt */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
          SHPIX[ ]	/* ShiftZoneByPixel */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          SRP1[ ]	/* SetRefPoint1 */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        RCVT[ ]	/* ReadCVT */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          GC[0]	/* GetCoordOnPVector */
          DUP[ ]	/* DuplicateTopStack */
          ROUND[00]	/* Round */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          MIAP[1]	/* MoveIndirectAbsPt */
          SWAP[ ]	/* SwapTopStack */
          POP[ ]	/* PopTopStack */
          SHPIX[ ]	/* ShiftZoneByPixel */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          SRP1[ ]	/* SetRefPoint1 */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[0]	/* SetFPVectorToAxis */
        MPPEM[ ]	/* MeasurePixelPerEm */
        PUSHB[ ]	/* 1 value pushed */
        200
        LTEQ[ ]	/* LessThenOrEqual */
        IF[ ]	/* If */
          SVTCA[0]	/* SetFPVectorToAxis */
          PUSHB[ ]	/* 1 value pushed */
          7
          RS[ ]	/* ReadStore */
          PUSHB[ ]	/* 1 value pushed */
          6
          RS[ ]	/* ReadStore */
          SFVFS[ ]	/* SetFVectorFromStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        ROLL[ ]	/* RollTopThreeStack */
        SRP0[ ]	/* SetRefPoint0 */
        MIRP[01100]	/* MoveIndirectRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        12
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
        ELSE[ ]	/* Else */
          DUP[ ]	/* DuplicateTopStack */
          GC[0]	/* GetCoordOnPVector */
          PUSHB[ ]	/* 1 value pushed */
          0
          GT[ ]	/* GreaterThan */
          IF[ ]	/* If */
            PUSHW[ ]	/* 1 value pushed */
            -16
            SHPIX[ ]	/* ShiftZoneByPixel */
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 1 value pushed */
            16
            SHPIX[ ]	/* ShiftZoneByPixel */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        NEQ[ ]	/* NotEqual */
        IF[ ]	/* If */
          PUSHW[ ]	/* 1 value pushed */
          4096
          MUL[ ]	/* Multiply */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          ABS[ ]	/* Absolute */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          ABS[ ]	/* Absolute */
          SUB[ ]	/* Subtract */
          PUSHB[ ]	/* 1 value pushed */
          0
          GTEQ[ ]	/* GreaterThanOrEqual */
          IF[ ]	/* If */
            PUSHB[ ]	/* 1 value pushed */
            2
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 1 value pushed */
            64
            SUB[ ]	/* Subtract */
            PUSHB[ ]	/* 1 value pushed */
            3
          EIF[ ]	/* EndIf */
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          ROUND[01]	/* Round */
          GTEQ[ ]	/* GreaterThanOrEqual */
          IF[ ]	/* If */
            RCVT[ ]	/* ReadCVT */
            WCVTP[ ]	/* WriteCVTInPixels */
          ELSE[ ]	/* Else */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          RCVT[ ]	/* ReadCVT */
          SUB[ ]	/* Subtract */
          ABS[ ]	/* Absolute */
          PUSHB[ ]	/* 1 value pushed */
          40
          LTEQ[ ]	/* LessThenOrEqual */
          IF[ ]	/* If */
            RCVT[ ]	/* ReadCVT */
            WCVTP[ ]	/* WriteCVTInPixels */
          ELSE[ ]	/* Else */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
        GPV[ ]	/* GetPVector */
        ABS[ ]	/* Absolute */
        SWAP[ ]	/* SwapTopStack */
        ABS[ ]	/* Absolute */
        MAX[ ]	/* Maximum */
        PUSHW[ ]	/* 1 value pushed */
        16384
        DIV[ ]	/* Divide */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        POP[ ]	/* PopTopStack */
        PUSHB[ ]	/* 1 value pushed */
        128
        LTEQ[ ]	/* LessThenOrEqual */
        IF[ ]	/* If */
          GPV[ ]	/* GetPVector */
          ABS[ ]	/* Absolute */
          SWAP[ ]	/* SwapTopStack */
          ABS[ ]	/* Absolute */
          MAX[ ]	/* Maximum */
          PUSHW[ ]	/* 1 value pushed */
          8192
          DIV[ ]	/* Divide */
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 3 values pushed */
          0 64 47
          CALL[ ]	/* CallFunction */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        2
        ADD[ ]	/* Add */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        POP[ ]	/* PopTopStack */
        PUSHB[ ]	/* 1 value pushed */
        192
        LTEQ[ ]	/* LessThenOrEqual */
        IF[ ]	/* If */
          GPV[ ]	/* GetPVector */
          ABS[ ]	/* Absolute */
          SWAP[ ]	/* SwapTopStack */
          ABS[ ]	/* Absolute */
          MAX[ ]	/* Maximum */
          PUSHW[ ]	/* 1 value pushed */
          5461
          DIV[ ]	/* Divide */
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 3 values pushed */
          0 128 47
          CALL[ ]	/* CallFunction */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        2
        ADD[ ]	/* Add */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        GPV[ ]	/* GetPVector */
        ABS[ ]	/* Absolute */
        SWAP[ ]	/* SwapTopStack */
        ABS[ ]	/* Absolute */
        MAX[ ]	/* Maximum */
        PUSHW[ ]	/* 1 value pushed */
        16384
        DIV[ ]	/* Divide */
        ADD[ ]	/* Add */
        SWAP[ ]	/* SwapTopStack */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        RTG[ ]	/* RoundToGrid */
        MPPEM[ ]	/* MeasurePixelPerEm */
        GTEQ[ ]	/* GreaterThanOrEqual */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          MD[0]	/* MeasureDistance */
          ABS[ ]	/* Absolute */
          SWAP[ ]	/* SwapTopStack */
          RCVT[ ]	/* ReadCVT */
          ABS[ ]	/* Absolute */
          ROUND[01]	/* Round */
          PUSHB[ ]	/* 1 value pushed */
          64
          MAX[ ]	/* Maximum */
          SUB[ ]	/* Subtract */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          128
          DIV[ ]	/* Divide */
          ROUND[10]	/* Round */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          SUB[ ]	/* Subtract */
          MIN[ ]	/* Minimum */
          PUSHB[ ]	/* 1 value pushed */
          12
          SWAP[ ]	/* SwapTopStack */
          WCVTP[ ]	/* WriteCVTInPixels */
          POP[ ]	/* PopTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 1 value pushed */
          12
          MIRP[10110]	/* MoveIndirectRelPt */
          POP[ ]	/* PopTopStack */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          ROLL[ ]	/* RollTopThreeStack */
          SRP1[ ]	/* SetRefPoint1 */
          SWAP[ ]	/* SwapTopStack */
          SRP2[ ]	/* SetRefPoint2 */
          DUP[ ]	/* DuplicateTopStack */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        MD[0]	/* MeasureDistance */
        ABS[ ]	/* Absolute */
        PUSHB[ ]	/* 1 value pushed */
        192
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHW[ ]	/* 1 value pushed */
          -8
          SHPIX[ ]	/* ShiftZoneByPixel */
          PUSHB[ ]	/* 1 value pushed */
          8
          SHPIX[ ]	/* ShiftZoneByPixel */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        19
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          SPVTCA[1]	/* SetPVectorToAxis */
        ELSE[ ]	/* Else */
          SPVTCA[0]	/* SetPVectorToAxis */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        19
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          SPVTCA[0]	/* SetPVectorToAxis */
        ELSE[ ]	/* Else */
          SPVTCA[1]	/* SetPVectorToAxis */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        10
        CALL[ ]	/* CallFunction */
        SWAP[ ]	/* SwapTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        DUP[ ]	/* DuplicateTopStack */
        ALIGNRP[ ]	/* AlignRelativePt */
        PUSHB[ ]	/* 1 value pushed */
        23
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHW[ ]	/* 1 value pushed */
        -16
        SHPIX[ ]	/* ShiftZoneByPixel */
        PUSHB[ ]	/* 1 value pushed */
        40
        CALL[ ]	/* CallFunction */
        ROLL[ ]	/* RollTopThreeStack */
        SRP0[ ]	/* SetRefPoint0 */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        MDRP[10000]	/* MoveDirectRelPt */
        SWAP[ ]	/* SwapTopStack */
        PUSHB[ ]	/* 1 value pushed */
        16
        CALL[ ]	/* CallFunction */
        PUSHB[ ]	/* 1 value pushed */
        5
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          MDRP[00000]	/* MoveDirectRelPt */
        ELSE[ ]	/* Else */
          ALIGNRP[ ]	/* AlignRelativePt */
        EIF[ ]	/* EndIf */
        DUP[ ]	/* DuplicateTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        SRP1[ ]	/* SetRefPoint1 */
        PUSHB[ ]	/* 1 value pushed */
        0
        SRP2[ ]	/* SetRefPoint2 */
        SVTCA[1]	/* SetFPVectorToAxis */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        72
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        MDRP[10000]	/* MoveDirectRelPt */
        SWAP[ ]	/* SwapTopStack */
        MDRP[01001]	/* MoveDirectRelPt */
        SVTCA[1]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        1
        SZP0[ ]	/* SetZonePointer0 */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZP1[ ]	/* SetZonePointer1 */
        SRP0[ ]	/* SetRefPoint0 */
        PUSHB[ ]	/* 1 value pushed */
        1
        ALIGNRP[ ]	/* AlignRelativePt */
        PUSHB[ ]	/* 1 value pushed */
        1
        SZPS[ ]	/* SetZonePointerS */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        PUSHB[ ]	/* 1 value pushed */
        0
        SZP0[ ]	/* SetZonePointer0 */
        PUSHB[ ]	/* 1 value pushed */
        1
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        MD[0]	/* MeasureDistance */
        PUSHB[ ]	/* 1 value pushed */
        3
        SLOOP[ ]	/* SetLoopVariable */
        SHPIX[ ]	/* ShiftZoneByPixel */
        PUSHB[ ]	/* 1 value pushed */
        1
        SZP0[ ]	/* SetZonePointer0 */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        GTEQ[ ]	/* GreaterThanOrEqual */
        SWAP[ ]	/* SwapTopStack */
        MPPEM[ ]	/* MeasurePixelPerEm */
        LTEQ[ ]	/* LessThenOrEqual */
        AND[ ]	/* LogicalAnd */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          RCVT[ ]	/* ReadCVT */
          ROLL[ ]	/* RollTopThreeStack */
          ADD[ ]	/* Add */
          WCVTP[ ]	/* WriteCVTInPixels */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        RTG[ ]	/* RoundToGrid */
        MPPEM[ ]	/* MeasurePixelPerEm */
        GTEQ[ ]	/* GreaterThanOrEqual */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          MD[0]	/* MeasureDistance */
          ABS[ ]	/* Absolute */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          3
          CINDEX[ ]	/* CopyXToTopStack */
          MD[0]	/* MeasureDistance */
          ABS[ ]	/* Absolute */
          ROUND[00]	/* Round */
          PUSHB[ ]	/* 1 value pushed */
          64
          MAX[ ]	/* Maximum */
          SUB[ ]	/* Subtract */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          128
          DIV[ ]	/* Divide */
          ROUND[10]	/* Round */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          2
          CINDEX[ ]	/* CopyXToTopStack */
          SUB[ ]	/* Subtract */
          MIN[ ]	/* Minimum */
          PUSHB[ ]	/* 1 value pushed */
          12
          SWAP[ ]	/* SwapTopStack */
          WCVTP[ ]	/* WriteCVTInPixels */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          SRP0[ ]	/* SetRefPoint0 */
          SWAP[ ]	/* SwapTopStack */
          PUSHB[ ]	/* 1 value pushed */
          12
          MIRP[10110]	/* MoveIndirectRelPt */
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SWAP[ ]	/* SwapTopStack */
          DUP[ ]	/* DuplicateTopStack */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
        EIF[ ]	/* EndIf */
        MDRP[01100]	/* MoveDirectRelPt */
        POP[ ]	/* PopTopStack */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        SVTCA[1]	/* SetFPVectorToAxis */
        RTG[ ]	/* RoundToGrid */
        PUSHB[ ]	/* 1 value pushed */
        24
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          5
          CINDEX[ ]	/* CopyXToTopStack */
          GC[0]	/* GetCoordOnPVector */
          SWAP[ ]	/* SwapTopStack */
          RCVT[ ]	/* ReadCVT */
          ABS[ ]	/* Absolute */
          SUB[ ]	/* Subtract */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          PUSHB[ ]	/* 1 value pushed */
          4
          CINDEX[ ]	/* CopyXToTopStack */
          MD[1]	/* MeasureDistance */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 1 value pushed */
        14
        SWAP[ ]	/* SwapTopStack */
        WCVTP[ ]	/* WriteCVTInPixels */
        SWAP[ ]	/* SwapTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        PUSHB[ ]	/* 1 value pushed */
        14
        MIRP[01100]	/* MoveIndirectRelPt */
        SWAP[ ]	/* SwapTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        PUSHB[ ]	/* 1 value pushed */
        14
        MIRP[01100]	/* MoveIndirectRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        27
        RS[ ]	/* ReadStore */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          PUSHB[ ]	/* 1 value pushed */
          1
          ADD[ ]	/* Add */
          RCVT[ ]	/* ReadCVT */
          PUSHB[ ]	/* 1 value pushed */
          0
          LTEQ[ ]	/* LessThenOrEqual */
          IF[ ]	/* If */
            DUP[ ]	/* DuplicateTopStack */
            PUSHB[ ]	/* 1 value pushed */
            1
            ADD[ ]	/* Add */
            DUP[ ]	/* DuplicateTopStack */
            RCVT[ ]	/* ReadCVT */
            DUP[ ]	/* DuplicateTopStack */
            ROUND[00]	/* Round */
            PUSHB[ ]	/* 1 value pushed */
            0
            NEQ[ ]	/* NotEqual */
            IF[ ]	/* If */
              PUSHB[ ]	/* 1 value pushed */
              32
              ADD[ ]	/* Add */
              WCVTP[ ]	/* WriteCVTInPixels */
              POP[ ]	/* PopTopStack */
            ELSE[ ]	/* Else */
              POP[ ]	/* PopTopStack */
              POP[ ]	/* PopTopStack */
              POP[ ]	/* PopTopStack */
            EIF[ ]	/* EndIf */
          ELSE[ ]	/* Else */
            DUP[ ]	/* DuplicateTopStack */
            PUSHB[ ]	/* 1 value pushed */
            1
            ADD[ ]	/* Add */
            DUP[ ]	/* DuplicateTopStack */
            RCVT[ ]	/* ReadCVT */
            DUP[ ]	/* DuplicateTopStack */
            ROUND[00]	/* Round */
            PUSHB[ ]	/* 1 value pushed */
            0
            NEQ[ ]	/* NotEqual */
            IF[ ]	/* If */
              PUSHW[ ]	/* 1 value pushed */
              -32
              ADD[ ]	/* Add */
              WCVTP[ ]	/* WriteCVTInPixels */
              PUSHB[ ]	/* 1 value pushed */
              28
              MPPEM[ ]	/* MeasurePixelPerEm */
              LT[ ]	/* LessThan */
              IF[ ]	/* If */
                DUP[ ]	/* DuplicateTopStack */
                RCVT[ ]	/* ReadCVT */
                PUSHB[ ]	/* 1 value pushed */
                32
                ADD[ ]	/* Add */
                WCVTP[ ]	/* WriteCVTInPixels */
              ELSE[ ]	/* Else */
                POP[ ]	/* PopTopStack */
              EIF[ ]	/* EndIf */
            ELSE[ ]	/* Else */
              POP[ ]	/* PopTopStack */
              POP[ ]	/* PopTopStack */
              POP[ ]	/* PopTopStack */
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        CINDEX[ ]	/* CopyXToTopStack */
        GC[0]	/* GetCoordOnPVector */
        DUP[ ]	/* DuplicateTopStack */
        ROUND[00]	/* Round */
        SUB[ ]	/* Subtract */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        PUSHB[ ]	/* 1 value pushed */
        3
        CINDEX[ ]	/* CopyXToTopStack */
        MIAP[1]	/* MoveIndirectAbsPt */
        SWAP[ ]	/* SwapTopStack */
        POP[ ]	/* PopTopStack */
        SHPIX[ ]	/* ShiftZoneByPixel */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        GC[0]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        GC[0]	/* GetCoordOnPVector */
        ADD[ ]	/* Add */
        ROLL[ ]	/* RollTopThreeStack */
        ROLL[ ]	/* RollTopThreeStack */
        GC[0]	/* GetCoordOnPVector */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        GC[0]	/* GetCoordOnPVector */
        ROLL[ ]	/* RollTopThreeStack */
        ADD[ ]	/* Add */
        ROLL[ ]	/* RollTopThreeStack */
        SUB[ ]	/* Subtract */
        PUSHW[ ]	/* 1 value pushed */
        -128
        DIV[ ]	/* Divide */
        SWAP[ ]	/* SwapTopStack */
        DUP[ ]	/* DuplicateTopStack */
        SRP0[ ]	/* SetRefPoint0 */
        SWAP[ ]	/* SwapTopStack */
        ROLL[ ]	/* RollTopThreeStack */
        PUSHB[ ]	/* 2 values pushed */
        12 12
        ROLL[ ]	/* RollTopThreeStack */
        WCVTF[ ]	/* WriteCVTInFUnits */
        RCVT[ ]	/* ReadCVT */
        ADD[ ]	/* Add */
        DUP[ ]	/* DuplicateTopStack */
        PUSHB[ ]	/* 1 value pushed */
        0
        LT[ ]	/* LessThan */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          1
          SUB[ ]	/* Subtract */
          PUSHW[ ]	/* 1 value pushed */
          -128
          MAX[ ]	/* Maximum */
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 1 value pushed */
          129
          MIN[ ]	/* Minimum */
        EIF[ ]	/* EndIf */
        ROUND[00]	/* Round */
        MSIRP[0]	/* MoveStackIndirRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        64
        LOOPCALL[ ]	/* LoopAndCallFunction */
        POP[ ]	/* PopTopStack */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        DUP[ ]	/* DuplicateTopStack */
        SHC[1]	/* ShiftContourByLastPt */
        PUSHB[ ]	/* 1 value pushed */
        1
        ADD[ ]	/* Add */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          MPPEM[ ]	/* MeasurePixelPerEm */
          GTEQ[ ]	/* GreaterThanOrEqual */
          SWAP[ ]	/* SwapTopStack */
          MPPEM[ ]	/* MeasurePixelPerEm */
          LTEQ[ ]	/* LessThenOrEqual */
          AND[ ]	/* LogicalAnd */
          IF[ ]	/* If */
            SHPIX[ ]	/* ShiftZoneByPixel */
          ELSE[ ]	/* Else */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MD[0]	/* MeasureDistance */
        PUSHB[ ]	/* 1 value pushed */
        14
        SWAP[ ]	/* SwapTopStack */
        WCVTP[ ]	/* WriteCVTInPixels */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          MPPEM[ ]	/* MeasurePixelPerEm */
          GTEQ[ ]	/* GreaterThanOrEqual */
          SWAP[ ]	/* SwapTopStack */
          MPPEM[ ]	/* MeasurePixelPerEm */
          LTEQ[ ]	/* LessThenOrEqual */
          AND[ ]	/* LogicalAnd */
          IF[ ]	/* If */
            DUP[ ]	/* DuplicateTopStack */
            RCVT[ ]	/* ReadCVT */
            ROLL[ ]	/* RollTopThreeStack */
            ADD[ ]	/* Add */
            WCVTP[ ]	/* WriteCVTInPixels */
          ELSE[ ]	/* Else */
            POP[ ]	/* PopTopStack */
            POP[ ]	/* PopTopStack */
          EIF[ ]	/* EndIf */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        GTEQ[ ]	/* GreaterThanOrEqual */
        SWAP[ ]	/* SwapTopStack */
        MPPEM[ ]	/* MeasurePixelPerEm */
        LTEQ[ ]	/* LessThenOrEqual */
        AND[ ]	/* LogicalAnd */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          RCVT[ ]	/* ReadCVT */
          ROLL[ ]	/* RollTopThreeStack */
          ADD[ ]	/* Add */
          WCVTP[ ]	/* WriteCVTInPixels */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          DUP[ ]	/* DuplicateTopStack */
          RCVT[ ]	/* ReadCVT */
          ROLL[ ]	/* RollTopThreeStack */
          ADD[ ]	/* Add */
          WCVTP[ ]	/* WriteCVTInPixels */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        GTEQ[ ]	/* GreaterThanOrEqual */
        SWAP[ ]	/* SwapTopStack */
        MPPEM[ ]	/* MeasurePixelPerEm */
        LTEQ[ ]	/* LessThenOrEqual */
        AND[ ]	/* LogicalAnd */
        IF[ ]	/* If */
          SHPIX[ ]	/* ShiftZoneByPixel */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          SHPIX[ ]	/* ShiftZoneByPixel */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          70
          CALL[ ]	/* CallFunction */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          71
          CALL[ ]	/* CallFunction */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          72
          CALL[ ]	/* CallFunction */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          PUSHB[ ]	/* 1 value pushed */
          73
          CALL[ ]	/* CallFunction */
        ELSE[ ]	/* Else */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
          POP[ ]	/* PopTopStack */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        MPPEM[ ]	/* MeasurePixelPerEm */
        GT[ ]	/* GreaterThan */
        IF[ ]	/* If */
          RDTG[ ]	/* RoundDownToGrid */
        ELSE[ ]	/* Else */
          ROFF[ ]	/* RoundOff */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 2 values pushed */
        2 1
        WS[ ]	/* WriteStore */
        PUSHB[ ]	/* 2 values pushed */
        35 1
        GETINFO[ ]	/* GetInfo */
        LTEQ[ ]	/* LessThenOrEqual */
        PUSHB[ ]	/* 2 values pushed */
        64 1
        GETINFO[ ]	/* GetInfo */
        GTEQ[ ]	/* GreaterThanOrEqual */
        AND[ ]	/* LogicalAnd */
        IF[ ]	/* If */
          PUSHB[ ]	/* 2 values pushed */
          2 0
          WS[ ]	/* WriteStore */
          PUSHW[ ]	/* 2 values pushed */
          4096 32
          GETINFO[ ]	/* GetInfo */
          EQ[ ]	/* Equal */
          IF[ ]	/* If */
            PUSHB[ ]	/* 3 values pushed */
            2 1 2
            RS[ ]	/* ReadStore */
            ADD[ ]	/* Add */
            WS[ ]	/* WriteStore */
          EIF[ ]	/* EndIf */
          PUSHB[ ]	/* 2 values pushed */
          36 1
          GETINFO[ ]	/* GetInfo */
          LTEQ[ ]	/* LessThenOrEqual */
          IF[ ]	/* If */
            PUSHW[ ]	/* 2 values pushed */
            8192 64
            GETINFO[ ]	/* GetInfo */
            EQ[ ]	/* Equal */
            IF[ ]	/* If */
              PUSHB[ ]	/* 3 values pushed */
              2 2 2
              RS[ ]	/* ReadStore */
              ADD[ ]	/* Add */
              WS[ ]	/* WriteStore */
              PUSHB[ ]	/* 2 values pushed */
              36 1
              GETINFO[ ]	/* GetInfo */
              EQ[ ]	/* Equal */
              IF[ ]	/* If */
                PUSHB[ ]	/* 3 values pushed */
                2 32 2
                RS[ ]	/* ReadStore */
                ADD[ ]	/* Add */
                WS[ ]	/* WriteStore */
                SVTCA[0]	/* SetFPVectorToAxis */
                MPPEM[ ]	/* MeasurePixelPerEm */
                SVTCA[1]	/* SetFPVectorToAxis */
                MPPEM[ ]	/* MeasurePixelPerEm */
                GT[ ]	/* GreaterThan */
                IF[ ]	/* If */
                  PUSHB[ ]	/* 3 values pushed */
                  2 8 2
                  RS[ ]	/* ReadStore */
                  ADD[ ]	/* Add */
                  WS[ ]	/* WriteStore */
                EIF[ ]	/* EndIf */
              ELSE[ ]	/* Else */
                PUSHW[ ]	/* 2 values pushed */
                16384 128
                GETINFO[ ]	/* GetInfo */
                EQ[ ]	/* Equal */
                IF[ ]	/* If */
                  PUSHB[ ]	/* 3 values pushed */
                  2 4 2
                  RS[ ]	/* ReadStore */
                  ADD[ ]	/* Add */
                  WS[ ]	/* WriteStore */
                EIF[ ]	/* EndIf */
                PUSHW[ ]	/* 2 values pushed */
                16384 128
                MUL[ ]	/* Multiply */
                PUSHW[ ]	/* 1 value pushed */
                256
                GETINFO[ ]	/* GetInfo */
                EQ[ ]	/* Equal */
                IF[ ]	/* If */
                  PUSHB[ ]	/* 3 values pushed */
                  2 8 2
                  RS[ ]	/* ReadStore */
                  ADD[ ]	/* Add */
                  WS[ ]	/* WriteStore */
                EIF[ ]	/* EndIf */
                PUSHW[ ]	/* 2 values pushed */
                16384 256
                MUL[ ]	/* Multiply */
                PUSHW[ ]	/* 1 value pushed */
                512
                GETINFO[ ]	/* GetInfo */
                EQ[ ]	/* Equal */
                IF[ ]	/* If */
                  PUSHB[ ]	/* 3 values pushed */
                  2 16 2
                  RS[ ]	/* ReadStore */
                  ADD[ ]	/* Add */
                  WS[ ]	/* WriteStore */
                EIF[ ]	/* EndIf */
                PUSHB[ ]	/* 2 values pushed */
                38 1
                GETINFO[ ]	/* GetInfo */
                LTEQ[ ]	/* LessThenOrEqual */
                IF[ ]	/* If */
                  PUSHW[ ]	/* 2 values pushed */
                  16384 512
                  MUL[ ]	/* Multiply */
                  PUSHW[ ]	/* 1 value pushed */
                  1024
                  GETINFO[ ]	/* GetInfo */
                  EQ[ ]	/* Equal */
                  IF[ ]	/* If */
                    PUSHB[ ]	/* 3 values pushed */
                    2 64 2
                    RS[ ]	/* ReadStore */
                    ADD[ ]	/* Add */
                    WS[ ]	/* WriteStore */
                  EIF[ ]	/* EndIf */
                  PUSHW[ ]	/* 2 values pushed */
                  16384 1024
                  MUL[ ]	/* Multiply */
                  PUSHW[ ]	/* 1 value pushed */
                  2048
                  GETINFO[ ]	/* GetInfo */
                  EQ[ ]	/* Equal */
                  IF[ ]	/* If */
                    PUSHB[ ]	/* 3 values pushed */
                    2 128 2
                    RS[ ]	/* ReadStore */
                    ADD[ ]	/* Add */
                    WS[ ]	/* WriteStore */
                  EIF[ ]	/* EndIf */
                EIF[ ]	/* EndIf */
              EIF[ ]	/* EndIf */
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
        PUSHB[ ]	/* 2 values pushed */
        0 2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        IF[ ]	/* If */
          NPUSHB[ ]	/* 10 values pushed */
          5 64 8 64 9 64 12 2 13 2
        ELSE[ ]	/* Else */
          PUSHB[ ]	/* 2 values pushed */
          1 2
          RS[ ]	/* ReadStore */
          EQ[ ]	/* Equal */
          IF[ ]	/* If */
            PUSHB[ ]	/* 3 values pushed */
            5 64 8
            PUSHW[ ]	/* 3 values pushed */
            256 9 256
            PUSHB[ ]	/* 4 values pushed */
            12 1 13 1
          ELSE[ ]	/* Else */
            PUSHB[ ]	/* 2 values pushed */
            128 2
            RS[ ]	/* ReadStore */
            GT[ ]	/* GreaterThan */
            IF[ ]	/* If */
              PUSHB[ ]	/* 3 values pushed */
              5 64 8
              PUSHW[ ]	/* 1 value pushed */
              384
              PUSHB[ ]	/* 2 values pushed */
              9 64
            ELSE[ ]	/* Else */
              PUSHB[ ]	/* 3 values pushed */
              5 64 8
              PUSHW[ ]	/* 3 values pushed */
              384 9 320
            EIF[ ]	/* EndIf */
            PUSHW[ ]	/* 2 values pushed */
            16384 128
            GETINFO[ ]	/* GetInfo */
            NEQ[ ]	/* NotEqual */
            PUSHW[ ]	/* 2 values pushed */
            16384 512
            MUL[ ]	/* Multiply */
            PUSHW[ ]	/* 1 value pushed */
            1024
            GETINFO[ ]	/* GetInfo */
            NEQ[ ]	/* NotEqual */
            AND[ ]	/* LogicalAnd */
            IF[ ]	/* If */
              PUSHB[ ]	/* 4 values pushed */
              12 0 13 1
            ELSE[ ]	/* Else */
              PUSHB[ ]	/* 4 values pushed */
              12 0 13 1
            EIF[ ]	/* EndIf */
          EIF[ ]	/* EndIf */
        EIF[ ]	/* EndIf */
        WS[ ]	/* WriteStore */
        WS[ ]	/* WriteStore */
        WS[ ]	/* WriteStore */
        WS[ ]	/* WriteStore */
        WS[ ]	/* WriteStore */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        128
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        LT[ ]	/* LessThan */
        PUSHB[ ]	/* 1 value pushed */
        1
        PUSHB[ ]	/* 1 value pushed */
        2
        RS[ ]	/* ReadStore */
        EQ[ ]	/* Equal */
        OR[ ]	/* LogicalOr */
        IF[ ]	/* If */
          POP[ ]	/* PopTopStack */
          SWAP[ ]	/* SwapTopStack */
          SRP0[ ]	/* SetRefPoint0 */
          PUSHB[ ]	/* 1 value pushed */
          32
          SMD[ ]	/* SetMinimumDistance */
          MDRP[01001]	/* MoveDirectRelPt */
        ELSE[ ]	/* Else */
          ROLL[ ]	/* RollTopThreeStack */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
        EIF[ ]	/* EndIf */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        PUSHB[ ]	/* 1 value pushed */
        89
        CALL[ ]	/* CallFunction */
      ENDF[ ]	/* EndFunctionDefinition */
      FDEF[ ]	/* FunctionDefinition */
        ROLL[ ]	/* RollTopThreeStack */
        SRP0[ ]	/* SetRefPoint0 */
        MIRP[00101]	/* MoveIndirectRelPt */
      ENDF[ ]	/* EndFunctionDefinition */
    </assembly>
  </fpgm>

  <prep>
    <assembly>
      NPUSHB[ ]	/* 81 values pushed */
      223 224 22 23 28 212 213 22 23 28 123 124 22 27 123 124 25 209 210 22 23 28 118 119 22
      23 28 109 112 22 23 28 108 111 22 23 28 107 110 22 27 107 110 127 114 26 116 117 20 21
      28 103 106 20 21 28 102 105 20 21 28 101 104 20 27 101 104 133 113 26 25 115 22 122 67
      25 33 121 67 25 33
      NPUSHW[ ]	/* 54 values pushed */
      326 316 3 43 325 316 3 43 324 316 3 43 323 316 3 43 322 316 3 43 321 316 3 43 320
      316 3 43 319 316 3 43 318 316 3 43 317 316 3 43 315 316 3 43 314 316 3 43 313 316
      2 43 307 308
      PUSHB[ ]	/* 3 values pushed */
      3 43 192
      PUSHW[ ]	/* 1 value pushed */
      316
      NPUSHB[ ]	/* 17 values pushed */
      1 153 147 2 43 145 147 2 43 147 149 2 43 150 149 2 43
      NPUSHW[ ]	/* 46 values pushed */
      359 358 3 43 358 357 3 43 357 356 3 43 356 355 3 43 355 354 3 43 354 353 3 43 353
      352 3 43 351 352 3 43 350 352 3 43 349 352 3 43 348 352 3 43 347 352
      NPUSHB[ ]	/* 168 values pushed */
      3 43 138 137 2 43 137 133 2 43 129 127 2 43 125 127 2 43 127 133 2 43 136 133 1
      43 135 133 1 43 132 133 2 43 131 133 2 43 27 55 21 24 54 21 21 53 21 18 52 21
      15 51 21 12 50 21 9 49 21 6 48 21 3 47 21 0 46 21 38 39 14 40 39 15 42
      43 14 44 43 15 34 35 14 36 35 15 30 31 14 32 31 15 15 16 17 12 9 10 11 12
      6 7 8 12 3 4 5 12 0 1 2 12 27 1 29 13 24 7 26 13 21 16 23 13 18
      4 20 13 47 27 1 44 60 42 60 40 60 38 60 36 60 34 60 32 60 30 60 27 60 24
      60 21 60 18 60 15 60 9 60 6 60 3 60 0 60 80 51 84
      SVTCA[1]	/* SetFPVectorToAxis */
      PUSHB[ ]	/* 1 value pushed */
      18
      MPPEM[ ]	/* MeasurePixelPerEm */
      SVTCA[0]	/* SetFPVectorToAxis */
      MPPEM[ ]	/* MeasurePixelPerEm */
      EQ[ ]	/* Equal */
      WS[ ]	/* WriteStore */
      PUSHB[ ]	/* 1 value pushed */
      19
      SVTCA[1]	/* SetFPVectorToAxis */
      MPPEM[ ]	/* MeasurePixelPerEm */
      SVTCA[0]	/* SetFPVectorToAxis */
      MPPEM[ ]	/* MeasurePixelPerEm */
      GTEQ[ ]	/* GreaterThanOrEqual */
      WS[ ]	/* WriteStore */
      PUSHB[ ]	/* 1 value pushed */
      51
      CALL[ ]	/* CallFunction */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHW[ ]	/* 1 value pushed */
      800
      GT[ ]	/* GreaterThan */
      PUSHB[ ]	/* 1 value pushed */
      50
      CALL[ ]	/* CallFunction */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHB[ ]	/* 1 value pushed */
      9
      LT[ ]	/* LessThan */
      OR[ ]	/* LogicalOr */
      IF[ ]	/* If */
        PUSHB[ ]	/* 2 values pushed */
        1 1
        INSTCTRL[ ]	/* SetInstrExecControl */
      EIF[ ]	/* EndIf */
      PUSHB[ ]	/* 1 value pushed */
      51
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 1 value pushed */
      2
      GETINFO[ ]	/* GetInfo */
      PUSHW[ ]	/* 1 value pushed */
      256
      EQ[ ]	/* Equal */
      PUSHB[ ]	/* 1 value pushed */
      4
      GETINFO[ ]	/* GetInfo */
      PUSHW[ ]	/* 1 value pushed */
      512
      EQ[ ]	/* Equal */
      PUSHB[ ]	/* 1 value pushed */
      18
      RS[ ]	/* ReadStore */
      AND[ ]	/* LogicalAnd */
      OR[ ]	/* LogicalOr */
      IF[ ]	/* If */
        PUSHW[ ]	/* 1 value pushed */
        281
        PUSHB[ ]	/* 2 values pushed */
        1 1
        INSTCTRL[ ]	/* SetInstrExecControl */
        SCANCTRL[ ]	/* ScanConversionControl */
      ELSE[ ]	/* Else */
        PUSHW[ ]	/* 2 values pushed */
        1 256
        PUSHB[ ]	/* 1 value pushed */
        75
        ADD[ ]	/* Add */
        SCANCTRL[ ]	/* ScanConversionControl */
        SCANTYPE[ ]	/* ScanType */
      EIF[ ]	/* EndIf */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SCVTCI[ ]	/* SetCVTCutIn */
      PUSHB[ ]	/* 1 value pushed */
      100
      MPPEM[ ]	/* MeasurePixelPerEm */
      GTEQ[ ]	/* GreaterThanOrEqual */
      IF[ ]	/* If */
        PUSHB[ ]	/* 1 value pushed */
        128
        SCVTCI[ ]	/* SetCVTCutIn */
      EIF[ ]	/* EndIf */
      PUSHB[ ]	/* 1 value pushed */
      50
      MPPEM[ ]	/* MeasurePixelPerEm */
      GTEQ[ ]	/* GreaterThanOrEqual */
      IF[ ]	/* If */
        PUSHB[ ]	/* 1 value pushed */
        144
        SCVTCI[ ]	/* SetCVTCutIn */
      EIF[ ]	/* EndIf */
      SVTCA[0]	/* SetFPVectorToAxis */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHB[ ]	/* 1 value pushed */
      50
      LTEQ[ ]	/* LessThenOrEqual */
      PUSHB[ ]	/* 1 value pushed */
      27
      SWAP[ ]	/* SwapTopStack */
      WS[ ]	/* WriteStore */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 2 values pushed */
      40 38
      RCVT[ ]	/* ReadCVT */
      PUSHB[ ]	/* 1 value pushed */
      42
      RCVT[ ]	/* ReadCVT */
      SUB[ ]	/* Subtract */
      PUSHB[ ]	/* 1 value pushed */
      44
      RCVT[ ]	/* ReadCVT */
      ADD[ ]	/* Add */
      WCVTP[ ]	/* WriteCVTInPixels */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SVTCA[1]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      SVTCA[0]	/* SetFPVectorToAxis */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      DELTAC1[ ]	/* DeltaExceptionC1 */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 1 value pushed */
      24
      PUSHB[ ]	/* 1 value pushed */
      63
      MPPEM[ ]	/* MeasurePixelPerEm */
      GTEQ[ ]	/* GreaterThanOrEqual */
      WS[ ]	/* WriteStore */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      CALL[ ]	/* CallFunction */
      PUSHB[ ]	/* 2 values pushed */
      9 50
      CALL[ ]	/* CallFunction */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHB[ ]	/* 1 value pushed */
      80
      GT[ ]	/* GreaterThan */
      WS[ ]	/* WriteStore */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHB[ ]	/* 1 value pushed */
      8
      GT[ ]	/* GreaterThan */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHB[ ]	/* 1 value pushed */
      8
      LT[ ]	/* LessThan */
      OR[ ]	/* LogicalOr */
      PUSHB[ ]	/* 1 value pushed */
      26
      SWAP[ ]	/* SwapTopStack */
      WS[ ]	/* WriteStore */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHB[ ]	/* 1 value pushed */
      200
      GT[ ]	/* GreaterThan */
      MPPEM[ ]	/* MeasurePixelPerEm */
      PUSHB[ ]	/* 1 value pushed */
      54
      LT[ ]	/* LessThan */
      OR[ ]	/* LogicalOr */
      PUSHB[ ]	/* 1 value pushed */
      12
      SWAP[ ]	/* SwapTopStack */
      WS[ ]	/* WriteStore */
    </assembly>
  </prep>

  <cvt>
    <cv index="0" value="1636"/>
    <cv index="1" value="18"/>
    <cv index="2" value="0"/>
    <cv index="3" value="1548"/>
    <cv index="4" value="25"/>
    <cv index="5" value="0"/>
    <cv index="6" value="1548"/>
    <cv index="7" value="25"/>
    <cv index="8" value="0"/>
    <cv index="9" value="0"/>
    <cv index="10" value="0"/>
    <cv index="11" value="0"/>
    <cv index="12" value="0"/>
    <cv index="13" value="0"/>
    <cv index="14" value="0"/>
    <cv index="15" value="1106"/>
    <cv index="16" value="27"/>
    <cv index="17" value="0"/>
    <cv index="18" value="0"/>
    <cv index="19" value="-25"/>
    <cv index="20" value="0"/>
    <cv index="21" value="0"/>
    <cv index="22" value="-27"/>
    <cv index="23" value="0"/>
    <cv index="24" value="0"/>
    <cv index="25" value="-25"/>
    <cv index="26" value="0"/>
    <cv index="27" value="-508"/>
    <cv index="28" value="-12"/>
    <cv index="29" value="0"/>
    <cv index="30" value="0"/>
    <cv index="31" value="0"/>
    <cv index="32" value="0"/>
    <cv index="33" value="0"/>
    <cv index="34" value="0"/>
    <cv index="35" value="690"/>
    <cv index="36" value="750"/>
    <cv index="37" value="130"/>
    <cv index="38" value="1548"/>
    <cv index="39" value="25"/>
    <cv index="40" value="631"/>
    <cv index="41" value="-25"/>
    <cv index="42" value="917"/>
    <cv index="43" value="25"/>
    <cv index="44" value="0"/>
    <cv index="45" value="-25"/>
    <cv index="46" value="0"/>
    <cv index="47" value="0"/>
    <cv index="48" value="0"/>
    <cv index="49" value="0"/>
    <cv index="50" value="0"/>
    <cv index="51" value="0"/>
    <cv index="52" value="0"/>
    <cv index="53" value="1795"/>
    <cv index="54" value="0"/>
    <cv index="55" value="0"/>
    <cv index="56" value="0"/>
    <cv index="57" value="0"/>
    <cv index="58" value="0"/>
    <cv index="59" value="0"/>
    <cv index="60" value="1714"/>
    <cv index="61" value="-141"/>
    <cv index="62" value="0"/>
    <cv index="63" value="0"/>
    <cv index="64" value="0"/>
    <cv index="65" value="2048"/>
    <cv index="66" value="0"/>
    <cv index="67" value="2048"/>
    <cv index="68" value="0"/>
    <cv index="69" value="1024"/>
    <cv index="70" value="0"/>
    <cv index="71" value="0"/>
    <cv index="72" value="160"/>
    <cv index="73" value="170"/>
    <cv index="74" value="0"/>
    <cv index="75" value="0"/>
    <cv index="76" value="135"/>
    <cv index="77" value="0"/>
    <cv index="78" value="0"/>
    <cv index="79" value="0"/>
    <cv index="80" value="120"/>
    <cv index="81" value="0"/>
    <cv index="82" value="0"/>
    <cv index="83" value="150"/>
    <cv index="84" value="106"/>
    <cv index="85" value="0"/>
    <cv index="86" value="0"/>
    <cv index="87" value="0"/>
    <cv index="88" value="0"/>
    <cv index="89" value="0"/>
    <cv index="90" value="0"/>
    <cv index="91" value="0"/>
    <cv index="92" value="0"/>
    <cv index="93" value="0"/>
    <cv index="94" value="0"/>
    <cv index="95" value="0"/>
    <cv index="96" value="0"/>
    <cv index="97" value="0"/>
    <cv index="98" value="245"/>
    <cv index="99" value="245"/>
    <cv index="100" value="0"/>
    <cv index="101" value="0"/>
    <cv index="102" value="0"/>
    <cv index="103" value="0"/>
    <cv index="104" value="0"/>
    <cv index="105" value="0"/>
    <cv index="106" value="0"/>
    <cv index="107" value="0"/>
    <cv index="108" value="0"/>
    <cv index="109" value="0"/>
    <cv index="110" value="0"/>
    <cv index="111" value="0"/>
    <cv index="112" value="0"/>
    <cv index="113" value="0"/>
    <cv index="114" value="0"/>
    <cv index="115" value="0"/>
    <cv index="116" value="0"/>
    <cv index="117" value="0"/>
    <cv index="118" value="0"/>
    <cv index="119" value="0"/>
    <cv index="120" value="0"/>
    <cv index="121" value="0"/>
    <cv index="122" value="0"/>
    <cv index="123" value="0"/>
    <cv index="124" value="0"/>
    <cv index="125" value="210"/>
    <cv index="126" value="0"/>
    <cv index="127" value="200"/>
    <cv index="128" value="0"/>
    <cv index="129" value="0"/>
    <cv index="130" value="0"/>
    <cv index="131" value="200"/>
    <cv index="132" value="0"/>
    <cv index="133" value="195"/>
    <cv index="134" value="0"/>
    <cv index="135" value="0"/>
    <cv index="136" value="0"/>
    <cv index="137" value="200"/>
    <cv index="138" value="0"/>
    <cv index="139" value="195"/>
    <cv index="140" value="153"/>
    <cv index="141" value="0"/>
    <cv index="142" value="0"/>
    <cv index="143" value="0"/>
    <cv index="144" value="0"/>
    <cv index="145" value="178"/>
    <cv index="146" value="0"/>
    <cv index="147" value="0"/>
    <cv index="148" value="0"/>
    <cv index="149" value="162"/>
    <cv index="150" value="0"/>
    <cv index="151" value="0"/>
    <cv index="152" value="0"/>
    <cv index="153" value="163"/>
    <cv index="154" value="130"/>
    <cv index="155" value="0"/>
    <cv index="156" value="0"/>
    <cv index="157" value="0"/>
    <cv index="158" value="0"/>
    <cv index="159" value="0"/>
    <cv index="160" value="0"/>
    <cv index="161" value="0"/>
    <cv index="162" value="0"/>
    <cv index="163" value="0"/>
    <cv index="164" value="0"/>
    <cv index="165" value="0"/>
    <cv index="166" value="170"/>
    <cv index="167" value="0"/>
    <cv index="168" value="940"/>
    <cv index="169" value="80"/>
    <cv index="170" value="0"/>
    <cv index="171" value="0"/>
    <cv index="172" value="0"/>
    <cv index="173" value="0"/>
    <cv index="174" value="0"/>
    <cv index="175" value="255"/>
    <cv index="176" value="255"/>
    <cv index="177" value="189"/>
    <cv index="178" value="530"/>
    <cv index="179" value="480"/>
    <cv index="180" value="0"/>
    <cv index="181" value="0"/>
    <cv index="182" value="0"/>
    <cv index="183" value="0"/>
    <cv index="184" value="0"/>
    <cv index="185" value="0"/>
    <cv index="186" value="0"/>
    <cv index="187" value="0"/>
    <cv index="188" value="0"/>
    <cv index="189" value="152"/>
    <cv index="190" value="152"/>
    <cv index="191" value="0"/>
    <cv index="192" value="225"/>
    <cv index="193" value="225"/>
    <cv index="194" value="149"/>
    <cv index="195" value="92"/>
    <cv index="196" value="94"/>
    <cv index="197" value="94"/>
    <cv index="198" value="100"/>
    <cv index="199" value="100"/>
    <cv index="200" value="167"/>
    <cv index="201" value="170"/>
    <cv index="202" value="160"/>
    <cv index="203" value="124"/>
    <cv index="204" value="148"/>
    <cv index="205" value="160"/>
    <cv index="206" value="0"/>
    <cv index="207" value="0"/>
    <cv index="208" value="0"/>
    <cv index="209" value="0"/>
    <cv index="210" value="0"/>
    <cv index="211" value="235"/>
    <cv index="212" value="0"/>
    <cv index="213" value="0"/>
    <cv index="214" value="235"/>
    <cv index="215" value="565"/>
    <cv index="216" value="128"/>
    <cv index="217" value="0"/>
    <cv index="218" value="104"/>
    <cv index="219" value="130"/>
    <cv index="220" value="0"/>
    <cv index="221" value="0"/>
    <cv index="222" value="152"/>
    <cv index="223" value="0"/>
    <cv index="224" value="0"/>
    <cv index="225" value="110"/>
    <cv index="226" value="114"/>
    <cv index="227" value="142"/>
    <cv index="228" value="150"/>
    <cv index="229" value="0"/>
    <cv index="230" value="130"/>
    <cv index="231" value="0"/>
    <cv index="232" value="0"/>
    <cv index="233" value="0"/>
    <cv index="234" value="140"/>
    <cv index="235" value="120"/>
    <cv index="236" value="0"/>
    <cv index="237" value="0"/>
    <cv index="238" value="0"/>
    <cv index="239" value="128"/>
    <cv index="240" value="142"/>
    <cv index="241" value="950"/>
    <cv index="242" value="118"/>
    <cv index="243" value="0"/>
    <cv index="244" value="0"/>
    <cv index="245" value="0"/>
    <cv index="246" value="0"/>
    <cv index="247" value="0"/>
    <cv index="248" value="0"/>
    <cv index="249" value="0"/>
    <cv index="250" value="0"/>
    <cv index="251" value="0"/>
    <cv index="252" value="0"/>
    <cv index="253" value="0"/>
    <cv index="254" value="0"/>
    <cv index="255" value="0"/>
    <cv index="256" value="0"/>
    <cv index="257" value="0"/>
    <cv index="258" value="0"/>
    <cv index="259" value="0"/>
    <cv index="260" value="0"/>
    <cv index="261" value="0"/>
    <cv index="262" value="0"/>
    <cv index="263" value="0"/>
    <cv index="264" value="0"/>
    <cv index="265" value="0"/>
    <cv index="266" value="0"/>
    <cv index="267" value="0"/>
    <cv index="268" value="0"/>
    <cv index="269" value="0"/>
    <cv index="270" value="0"/>
    <cv index="271" value="0"/>
    <cv index="272" value="0"/>
    <cv index="273" value="0"/>
    <cv index="274" value="0"/>
    <cv index="275" value="0"/>
    <cv index="276" value="0"/>
    <cv index="277" value="0"/>
    <cv index="278" value="0"/>
    <cv index="279" value="0"/>
    <cv index="280" value="0"/>
    <cv index="281" value="0"/>
    <cv index="282" value="0"/>
    <cv index="283" value="0"/>
    <cv index="284" value="0"/>
    <cv index="285" value="0"/>
    <cv index="286" value="0"/>
    <cv index="287" value="0"/>
    <cv index="288" value="0"/>
    <cv index="289" value="0"/>
    <cv index="290" value="0"/>
    <cv index="291" value="0"/>
    <cv index="292" value="0"/>
    <cv index="293" value="0"/>
    <cv index="294" value="0"/>
    <cv index="295" value="0"/>
    <cv index="296" value="0"/>
    <cv index="297" value="0"/>
    <cv index="298" value="0"/>
    <cv index="299" value="0"/>
    <cv index="300" value="70"/>
    <cv index="301" value="75"/>
    <cv index="302" value="80"/>
    <cv index="303" value="85"/>
    <cv index="304" value="90"/>
    <cv index="305" value="95"/>
    <cv index="306" value="100"/>
    <cv index="307" value="105"/>
    <cv index="308" value="110"/>
    <cv index="309" value="115"/>
    <cv index="310" value="120"/>
    <cv index="311" value="125"/>
    <cv index="312" value="130"/>
    <cv index="313" value="135"/>
    <cv index="314" value="140"/>
    <cv index="315" value="145"/>
    <cv index="316" value="150"/>
    <cv index="317" value="155"/>
    <cv index="318" value="160"/>
    <cv index="319" value="165"/>
    <cv index="320" value="170"/>
    <cv index="321" value="175"/>
    <cv index="322" value="180"/>
    <cv index="323" value="185"/>
    <cv index="324" value="190"/>
    <cv index="325" value="195"/>
    <cv index="326" value="200"/>
    <cv index="327" value="225"/>
    <cv index="328" value="230"/>
    <cv index="329" value="235"/>
    <cv index="330" value="240"/>
    <cv index="331" value="245"/>
    <cv index="332" value="250"/>
    <cv index="333" value="255"/>
    <cv index="334" value="260"/>
    <cv index="335" value="265"/>
    <cv index="336" value="70"/>
    <cv index="337" value="75"/>
    <cv index="338" value="80"/>
    <cv index="339" value="85"/>
    <cv index="340" value="90"/>
    <cv index="341" value="95"/>
    <cv index="342" value="100"/>
    <cv index="343" value="105"/>
    <cv index="344" value="110"/>
    <cv index="345" value="115"/>
    <cv index="346" value="120"/>
    <cv index="347" value="125"/>
    <cv index="348" value="130"/>
    <cv index="349" value="135"/>
    <cv index="350" value="140"/>
    <cv index="351" value="145"/>
    <cv index="352" value="150"/>
    <cv index="353" value="155"/>
    <cv index="354" value="160"/>
    <cv index="355" value="165"/>
    <cv index="356" value="170"/>
    <cv index="357" value="175"/>
    <cv index="358" value="180"/>
    <cv index="359" value="185"/>
    <cv index="360" value="190"/>
    <cv index="361" value="195"/>
    <cv index="362" value="200"/>
    <cv index="363" value="225"/>
    <cv index="364" value="230"/>
    <cv index="365" value="235"/>
    <cv index="366" value="240"/>
    <cv index="367" value="245"/>
    <cv index="368" value="250"/>
    <cv index="369" value="255"/>
    <cv index="370" value="260"/>
    <cv index="371" value="265"/>
  </cvt>

  <loca>
    <!-- The 'loca' table will be calculated by the compiler -->
  </loca>

  <glyf>

    <!-- The xMin, yMin, xMax and yMax values
         will be recalculated by the compiler. -->

    <TTGlyph name=".notdef" xMin="179" yMin="0" xMax="1248" yMax="1510">
      <contour>
        <pt x="179" y="0" on="1"/>
        <pt x="179" y="1510" on="1"/>
        <pt x="1248" y="1510" on="1"/>
        <pt x="1248" y="0" on="1"/>
      </contour>
      <contour>
        <pt x="339" y="160" on="1"/>
        <pt x="1089" y="160" on="1"/>
        <pt x="1089" y="1350" on="1"/>
        <pt x="339" y="1350" on="1"/>
      </contour>
      <instructions>
        <assembly>
          PUSHB[ ]	/* 2 values pushed */
          0 4
          PUSHW[ ]	/* 1 value pushed */
          314
          PUSHB[ ]	/* 5 values pushed */
          89 0 18 1 7
          PUSHW[ ]	/* 1 value pushed */
          314
          NPUSHB[ ]	/* 10 values pushed */
          89 1 3 72 5 5 9 4 72 0
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE77C" xMin="40" yMin="-171" xMax="2022" yMax="1711">
      <contour>
        <pt x="816" y="1463" on="1"/>
        <pt x="816" y="1607" on="1"/>
        <pt x="1780" y="1607" on="1"/>
        <pt x="1780" y="1461" on="1"/>
        <pt x="1650" y="1274" on="0"/>
        <pt x="1474" y="1114" on="1"/>
        <pt x="1775" y="959" on="0"/>
        <pt x="2022" y="809" on="1"/>
        <pt x="1920" y="673" on="1"/>
        <pt x="1664" y="849" on="0"/>
        <pt x="1361" y="1017" on="1"/>
        <pt x="1123" y="822" on="0"/>
        <pt x="754" y="677" on="1"/>
        <pt x="714" y="749" on="0"/>
        <pt x="658" y="815" on="1"/>
        <pt x="1240" y="1005" on="0"/>
        <pt x="1596" y="1463" on="1"/>
      </contour>
      <contour>
        <pt x="688" y="-27" on="1"/>
        <pt x="1258" y="-27" on="1"/>
        <pt x="1258" y="461" on="1"/>
        <pt x="824" y="461" on="1"/>
        <pt x="824" y="605" on="1"/>
        <pt x="1840" y="605" on="1"/>
        <pt x="1840" y="461" on="1"/>
        <pt x="1416" y="461" on="1"/>
        <pt x="1416" y="-27" on="1"/>
        <pt x="1976" y="-27" on="1"/>
        <pt x="1976" y="-171" on="1"/>
        <pt x="688" y="-171" on="1"/>
      </contour>
      <contour>
        <pt x="284" y="509" on="1"/>
        <pt x="480" y="535" on="0"/>
        <pt x="714" y="573" on="1"/>
        <pt x="702" y="489" on="0"/>
        <pt x="696" y="425" on="1"/>
        <pt x="450" y="391" on="0"/>
        <pt x="100" y="331" on="1"/>
        <pt x="64" y="479" on="1"/>
        <pt x="219" y="639" on="0"/>
        <pt x="380" y="882" on="1"/>
        <pt x="186" y="870" on="0"/>
        <pt x="80" y="861" on="1"/>
        <pt x="42" y="997" on="1"/>
        <pt x="260" y="1287" on="0"/>
        <pt x="446" y="1711" on="1"/>
        <pt x="598" y="1651" on="1"/>
        <pt x="412" y="1293" on="0"/>
        <pt x="222" y="1009" on="1"/>
        <pt x="349" y="1012" on="0"/>
        <pt x="465" y="1015" on="1"/>
        <pt x="543" y="1142" on="0"/>
        <pt x="622" y="1289" on="1"/>
        <pt x="770" y="1215" on="1"/>
        <pt x="512" y="799" on="0"/>
      </contour>
      <contour>
        <pt x="40" y="45" on="1"/>
        <pt x="456" y="129" on="0"/>
        <pt x="742" y="201" on="1"/>
        <pt x="736" y="119" on="0"/>
        <pt x="736" y="53" on="1"/>
        <pt x="464" y="-3" on="0"/>
        <pt x="86" y="-103" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 38 values pushed */
          57 28 5 10 10 3 12 57 18 35 48 38 50 36 28 18 59 27 23 20 0 31 27 3 23
          8 8 7 7 3 20 31 12 12 14 14 46 29
          PUSHW[ ]	/* 1 value pushed */
          -16
          NPUSHB[ ]	/* 12 values pushed */
          29 35 35 36 36 18 41 59 53 53 41 25
          PUSHW[ ]	/* 1 value pushed */
          354
          PUSHB[ ]	/* 5 values pushed */
          18 0 50 16 50
          PUSHW[ ]	/* 4 values pushed */
          352 51 43 352
          NPUSHB[ ]	/* 11 values pushed */
          44 18 16 41 16 51 44 3 3 61 46
          PUSHW[ ]	/* 4 values pushed */
          358 64 41 -16
          PUSHB[ ]	/* 3 values pushed */
          41 59 53
          PUSHW[ ]	/* 7 values pushed */
          316 89 7 -16 8 7 313
          NPUSHB[ ]	/* 10 values pushed */
          89 8 8 12 10 5 5 3 12 14
          PUSHW[ ]	/* 4 values pushed */
          -16 12 14 314
          NPUSHB[ ]	/* 40 values pushed */
          89 191 12 1 15 12 31 12 63 12 3 13 3 12 64 21 29 72 15 12 31 12 47 12 3
          31 4 12 32 35 38 72 59 12 59 12 28 0 17 28
          PUSHW[ ]	/* 1 value pushed */
          315
          NPUSHB[ ]	/* 16 values pushed */
          89 15 57 31 57 47 57 79 57 95 57 5 35 4 55 57
          PUSHW[ ]	/* 1 value pushed */
          316
          PUSHB[ ]	/* 3 values pushed */
          89 35 36
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 13 values pushed */
          89 0 35 1 14 3 35 35 29 33 31 31 33
          PUSHW[ ]	/* 1 value pushed */
          316
          PUSHB[ ]	/* 5 values pushed */
          89 24 20 21 20
          PUSHW[ ]	/* 1 value pushed */
          315
          NPUSHB[ ]	/* 10 values pushed */
          89 51 50 50 0 46 38 40 46 40
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 69 values pushed */
          89 48 46 47 55 191 55 2 43 55 203 55 2 55 16 31 31 1 239 31 1 116 31 148 31
          164 31 196 31 4 128 31 176 31 208 31 3 31 16 55 31 21 46 46 21 31 55 4 1 25
          17 64 38 45 72 17 44 0 43 1 11 3 43 43 1 3 0 1 0
          PUSHW[ ]	/* 1 value pushed */
          315
          NPUSHB[ ]	/* 32 values pushed */
          89 0 1 48 1 64 1 80 1 128 1 144 1 192 1 208 1 224 1 9 80 1 96 1 112
          1 176 1 240 1 5 1
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SHPIX[ ]	/* ShiftZoneByPixel */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          SHP[0]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          CALL[ ]	/* CallFunction */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE77D" xMin="100" yMin="-279" xMax="2032" yMax="1701">
      <contour>
        <pt x="1542" y="1655" on="1"/>
        <pt x="1706" y="1655" on="1"/>
        <pt x="1706" y="1295" on="1"/>
        <pt x="1706" y="742" on="0"/>
        <pt x="1564" y="417" on="1"/>
        <pt x="1812" y="161" on="0"/>
        <pt x="2032" y="-87" on="1"/>
        <pt x="1894" y="-213" on="1"/>
        <pt x="1689" y="41" on="0"/>
        <pt x="1485" y="270" on="1"/>
        <pt x="1254" y="-81" on="0"/>
        <pt x="790" y="-279" on="1"/>
        <pt x="744" y="-217" on="0"/>
        <pt x="682" y="-141" on="1"/>
        <pt x="1186" y="91" on="0"/>
        <pt x="1360" y="397" on="1"/>
        <pt x="1546" y="697" on="0"/>
        <pt x="1542" y="1299" on="1"/>
      </contour>
      <contour>
        <pt x="922" y="547" on="1"/>
        <pt x="928" y="417" on="0"/>
        <pt x="938" y="357" on="1"/>
        <pt x="458" y="55" on="0"/>
        <pt x="340" y="-23" on="1"/>
        <pt x="274" y="-69" on="0"/>
        <pt x="214" y="-123" on="1"/>
        <pt x="100" y="35" on="1"/>
        <pt x="194" y="119" on="0"/>
        <pt x="192" y="237" on="1"/>
        <pt x="192" y="1627" on="1"/>
        <pt x="356" y="1627" on="1"/>
        <pt x="356" y="197" on="1"/>
        <pt x="576" y="329" on="0"/>
      </contour>
      <contour>
        <pt x="840" y="1701" on="1"/>
        <pt x="974" y="1489" on="0"/>
        <pt x="1138" y="1193" on="1"/>
        <pt x="982" y="1105" on="1"/>
        <pt x="826" y="1413" on="0"/>
        <pt x="698" y="1625" on="1"/>
      </contour>
      <instructions>
        <assembly>
          PUSHB[ ]	/* 3 values pushed */
          35 16 35
          PUSHW[ ]	/* 1 value pushed */
          353
          NPUSHB[ ]	/* 11 values pushed */
          34 34 6 20 20 30 4 9 9 11 2
          PUSHW[ ]	/* 6 values pushed */
          355 17 32 -16 32 350
          NPUSHB[ ]	/* 13 values pushed */
          37 17 37 17 37 27 11 13 13 30 7 16 7
          PUSHW[ ]	/* 1 value pushed */
          350
          PUSHB[ ]	/* 4 values pushed */
          6 6 39 30
          PUSHW[ ]	/* 1 value pushed */
          355
          NPUSHB[ ]	/* 50 values pushed */
          27 64 24 25 25 27 34 35 35 18 37 37 32 6 7 7 32 9 4 4 11 0 0 32 28
          28 176 32 1 0 32 16 32 2 16 32 64 32 128 32 176 32 192 32 208 32 240 32 7 32
          PUSHW[ ]	/* 1 value pushed */
          -64
          NPUSHB[ ]	/* 14 values pushed */
          32 40 72 15 32 1 13 3 32 32 18 30 25 25
          PUSHW[ ]	/* 4 values pushed */
          -16 24 25 318
          PUSHB[ ]	/* 7 values pushed */
          89 24 24 20 11 18 20
          PUSHW[ ]	/* 1 value pushed */
          324
          PUSHB[ ]	/* 3 values pushed */
          89 18 13
          PUSHW[ ]	/* 4 values pushed */
          -16 11 13 314
          NPUSHB[ ]	/* 31 values pushed */
          89 251 11 1 11 64 35 40 72 143 11 159 11 2 2 175 11 191 11 2 11 64 26 32 72
          11 64 11 15 72 11
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SDS[ ]	/* SetDeltaShiftInGState */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SVTCA[1]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SMD[ ]	/* SetMinimumDistance */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE77E" xMin="119" yMin="0" xMax="1093" yMax="1575">
      <contour>
        <pt x="853" y="1143" on="1"/>
        <pt x="853" y="1268" on="0"/>
        <pt x="695" y="1411" on="0"/>
        <pt x="559" y="1411" on="1"/>
        <pt x="463" y="1411" on="0"/>
        <pt x="267" y="1313" on="0"/>
        <pt x="182" y="1222" on="1"/>
        <pt x="182" y="1412" on="1"/>
        <pt x="258" y="1491" on="0"/>
        <pt x="451" y="1575" on="0"/>
        <pt x="581" y="1575" on="1"/>
        <pt x="791" y="1575" on="0"/>
        <pt x="1047" y="1350" on="0"/>
        <pt x="1047" y="1158" on="1"/>
        <pt x="1047" y="987" on="0"/>
        <pt x="890" y="737" on="0"/>
        <pt x="700" y="606" on="1"/>
        <pt x="506" y="472" on="0"/>
        <pt x="375" y="356" on="0"/>
        <pt x="323" y="250" on="0"/>
        <pt x="323" y="174" on="1"/>
        <pt x="1093" y="174" on="1"/>
        <pt x="1093" y="0" on="1"/>
        <pt x="119" y="0" on="1"/>
        <pt x="119" y="77" on="1"/>
        <pt x="119" y="211" on="0"/>
        <pt x="192" y="398" on="0"/>
        <pt x="360" y="575" on="0"/>
        <pt x="538" y="699" on="1"/>
        <pt x="720" y="827" on="0"/>
        <pt x="853" y="1020" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 28 values pushed */
          21 21 13 139 64 0 0 32 20 6 6 23 13 0 23 10 10 3 153 89 10 7 23 20 153
          89 23 24
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE77F" xMin="36" yMin="-283" xMax="2016" yMax="1541">
      <contour>
        <pt x="64" y="921" on="1"/>
        <pt x="848" y="921" on="1"/>
        <pt x="890" y="1129" on="0"/>
        <pt x="898" y="1385" on="1"/>
        <pt x="216" y="1385" on="1"/>
        <pt x="216" y="1541" on="1"/>
        <pt x="1840" y="1541" on="1"/>
        <pt x="1840" y="1385" on="1"/>
        <pt x="1066" y="1385" on="1"/>
        <pt x="1052" y="1129" on="0"/>
        <pt x="1014" y="921" on="1"/>
        <pt x="1992" y="921" on="1"/>
        <pt x="1992" y="765" on="1"/>
        <pt x="980" y="765" on="1"/>
        <pt x="828" y="89" on="0"/>
        <pt x="144" y="-283" on="1"/>
        <pt x="100" y="-215" on="0"/>
        <pt x="36" y="-141" on="1"/>
        <pt x="632" y="157" on="0"/>
        <pt x="812" y="765" on="1"/>
        <pt x="64" y="765" on="1"/>
      </contour>
      <contour>
        <pt x="1088" y="621" on="1"/>
        <pt x="1250" y="621" on="1"/>
        <pt x="1250" y="95" on="1"/>
        <pt x="1250" y="-63" on="0"/>
        <pt x="1396" y="-63" on="1"/>
        <pt x="1670" y="-63" on="1"/>
        <pt x="1806" y="-63" on="0"/>
        <pt x="1824" y="55" on="1"/>
        <pt x="1840" y="169" on="0"/>
        <pt x="1848" y="351" on="1"/>
        <pt x="1924" y="323" on="0"/>
        <pt x="2016" y="293" on="1"/>
        <pt x="1996" y="95" on="0"/>
        <pt x="1980" y="-5" on="1"/>
        <pt x="1954" y="-205" on="0"/>
        <pt x="1696" y="-205" on="1"/>
        <pt x="1350" y="-205" on="1"/>
        <pt x="1088" y="-205" on="0"/>
        <pt x="1088" y="71" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 10 values pushed */
          4 4 3 17 7 20 20 17 12 23
          PUSHW[ ]	/* 1 value pushed */
          354
          PUSHB[ ]	/* 4 values pushed */
          39 12 7 32
          PUSHW[ ]	/* 1 value pushed */
          356
          NPUSHB[ ]	/* 12 values pushed */
          39 3 30 30 41 3 15 17 17 1 10 19
          PUSHW[ ]	/* 1 value pushed */
          356
          PUSHB[ ]	/* 3 values pushed */
          13 13 8
          PUSHW[ ]	/* 1 value pushed */
          356
          PUSHB[ ]	/* 8 values pushed */
          64 3 32 30 30 25 25 37
          PUSHW[ ]	/* 1 value pushed */
          314
          PUSHB[ ]	/* 7 values pushed */
          89 21 21 13 20 0 20
          PUSHW[ ]	/* 1 value pushed */
          317
          NPUSHB[ ]	/* 10 values pushed */
          89 10 0 25 0 25 0 17 5 17
          PUSHW[ ]	/* 4 values pushed */
          -16 15 17 314
          NPUSHB[ ]	/* 11 values pushed */
          89 15 64 11 16 72 15 8 4 5 4
          PUSHW[ ]	/* 1 value pushed */
          317
          NPUSHB[ ]	/* 26 values pushed */
          89 47 5 111 5 127 5 175 5 191 5 5 47 5 63 5 79 5 111 5 175 5 239 5 6
          5
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SVTCA[1]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MIRP[01110]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE780" xMin="38" yMin="-273" xMax="1990" yMax="1705">
      <contour>
        <pt x="1884" y="-109" on="1"/>
        <pt x="1774" y="-259" on="1"/>
        <pt x="1443" y="-66" on="0"/>
        <pt x="1070" y="123" on="1"/>
        <pt x="773" y="-104" on="0"/>
        <pt x="132" y="-273" on="1"/>
        <pt x="96" y="-203" on="0"/>
        <pt x="38" y="-113" on="1"/>
        <pt x="621" y="16" on="0"/>
        <pt x="906" y="205" on="1"/>
        <pt x="626" y="344" on="0"/>
        <pt x="324" y="481" on="1"/>
        <pt x="460" y="777" on="0"/>
        <pt x="566" y="1059" on="1"/>
        <pt x="56" y="1059" on="1"/>
        <pt x="56" y="1207" on="1"/>
        <pt x="619" y="1207" on="1"/>
        <pt x="709" y="1461" on="0"/>
        <pt x="774" y="1705" on="1"/>
        <pt x="952" y="1669" on="1"/>
        <pt x="872" y="1419" on="0"/>
        <pt x="797" y="1207" on="1"/>
        <pt x="1990" y="1207" on="1"/>
        <pt x="1990" y="1059" on="1"/>
        <pt x="1573" y="1059" on="1"/>
        <pt x="1486" y="532" on="0"/>
        <pt x="1197" y="237" on="1"/>
        <pt x="1549" y="67" on="0"/>
      </contour>
      <contour>
        <pt x="1406" y="1059" on="1"/>
        <pt x="743" y="1059" on="1"/>
        <pt x="633" y="763" on="0"/>
        <pt x="532" y="547" on="1"/>
        <pt x="790" y="431" on="0"/>
        <pt x="1040" y="312" on="1"/>
        <pt x="1331" y="589" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 29 values pushed */
          1 0 0 23 5 26 3 3 24 5 9 33 33 28 7 14 21 29 29 19 31 13 16 16 11
          14 7 23 18
          PUSHW[ ]	/* 1 value pushed */
          358
          PUSHB[ ]	/* 3 values pushed */
          19 23 28
          PUSHW[ ]	/* 1 value pushed */
          355
          NPUSHB[ ]	/* 12 values pushed */
          19 24 16 24 24 36 5 7 7 31 64 11
          PUSHW[ ]	/* 1 value pushed */
          -16
          NPUSHB[ ]	/* 25 values pushed */
          11 19 0 18 1 15 3 18 18 15 33 26 26 0 29 29 14 3 9 9 1 24 14 15 14
          PUSHW[ ]	/* 1 value pushed */
          316
          PUSHB[ ]	/* 4 values pushed */
          89 21 15 7
          PUSHW[ ]	/* 4 values pushed */
          -16 5 7 318
          PUSHB[ ]	/* 5 values pushed */
          89 5 5 1 0
          PUSHW[ ]	/* 4 values pushed */
          -16 1 0 316
          NPUSHB[ ]	/* 17 values pushed */
          89 191 1 207 1 2 1 64 36 40 72 1 64 12 15 72 1
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SVTCA[1]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SMD[ ]	/* SetMinimumDistance */
          MDRP[01101]	/* MoveDirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          IP[ ]	/* InterpolatePts */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE781" xMin="200" yMin="0" xMax="1033" yMax="1549">
      <contour>
        <pt x="1033" y="0" on="1"/>
        <pt x="200" y="0" on="1"/>
        <pt x="200" y="1549" on="1"/>
        <pt x="998" y="1549" on="1"/>
        <pt x="998" y="1371" on="1"/>
        <pt x="400" y="1371" on="1"/>
        <pt x="400" y="875" on="1"/>
        <pt x="954" y="875" on="1"/>
        <pt x="954" y="698" on="1"/>
        <pt x="400" y="698" on="1"/>
        <pt x="400" y="177" on="1"/>
        <pt x="1033" y="177" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 37 values pushed */
          6 10 127 1 64 8 8 0 4 4 0 0 1 1 1 13 12 6 9 145 89 6 6 10 2
          2 5 145 89 2 3 1 10 145 89 1 18
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE783" xMin="128" yMin="-247" xMax="2024" yMax="1707">
      <contour>
        <pt x="760" y="1421" on="1"/>
        <pt x="1059" y="1421" on="1"/>
        <pt x="1108" y="1561" on="0"/>
        <pt x="1154" y="1707" on="1"/>
        <pt x="1306" y="1665" on="1"/>
        <pt x="1262" y="1540" on="0"/>
        <pt x="1219" y="1421" on="1"/>
        <pt x="1984" y="1421" on="1"/>
        <pt x="1984" y="1279" on="1"/>
        <pt x="1167" y="1279" on="1"/>
        <pt x="1076" y="1030" on="0"/>
        <pt x="988" y="805" on="1"/>
        <pt x="1320" y="805" on="1"/>
        <pt x="1320" y="1149" on="1"/>
        <pt x="1472" y="1149" on="1"/>
        <pt x="1472" y="805" on="1"/>
        <pt x="1970" y="805" on="1"/>
        <pt x="1970" y="661" on="1"/>
        <pt x="1472" y="661" on="1"/>
        <pt x="1472" y="15" on="1"/>
        <pt x="1472" y="-219" on="0"/>
        <pt x="1236" y="-219" on="1"/>
        <pt x="1102" y="-219" on="0"/>
        <pt x="980" y="-217" on="1"/>
        <pt x="968" y="-135" on="0"/>
        <pt x="950" y="-51" on="1"/>
        <pt x="1090" y="-67" on="0"/>
        <pt x="1194" y="-67" on="1"/>
        <pt x="1320" y="-67" on="0"/>
        <pt x="1320" y="59" on="1"/>
        <pt x="1320" y="661" on="1"/>
        <pt x="814" y="661" on="1"/>
        <pt x="814" y="807" on="1"/>
        <pt x="917" y="1033" on="0"/>
        <pt x="1008" y="1279" on="1"/>
        <pt x="760" y="1279" on="1"/>
      </contour>
      <contour>
        <pt x="714" y="483" on="1"/>
        <pt x="772" y="131" on="0"/>
        <pt x="526" y="85" on="1"/>
        <pt x="448" y="71" on="0"/>
        <pt x="324" y="83" on="1"/>
        <pt x="308" y="165" on="0"/>
        <pt x="280" y="251" on="1"/>
        <pt x="378" y="227" on="0"/>
        <pt x="464" y="235" on="1"/>
        <pt x="602" y="247" on="0"/>
        <pt x="554" y="489" on="1"/>
        <pt x="526" y="651" on="0"/>
        <pt x="374" y="849" on="1"/>
        <pt x="464" y="1145" on="0"/>
        <pt x="538" y="1431" on="1"/>
        <pt x="278" y="1431" on="1"/>
        <pt x="278" y="-247" on="1"/>
        <pt x="128" y="-247" on="1"/>
        <pt x="128" y="1571" on="1"/>
        <pt x="704" y="1571" on="1"/>
        <pt x="704" y="1431" on="1"/>
        <pt x="568" y="983" on="0"/>
        <pt x="532" y="875" on="1"/>
        <pt x="696" y="659" on="0"/>
      </contour>
      <contour>
        <pt x="1592" y="413" on="1"/>
        <pt x="1718" y="507" on="1"/>
        <pt x="1906" y="251" on="0"/>
        <pt x="2024" y="53" on="1"/>
        <pt x="1894" y="-35" on="1"/>
        <pt x="1722" y="255" on="0"/>
      </contour>
      <contour>
        <pt x="1016" y="491" on="1"/>
        <pt x="1146" y="411" on="1"/>
        <pt x="978" y="163" on="0"/>
        <pt x="826" y="-29" on="1"/>
        <pt x="758" y="17" on="0"/>
        <pt x="692" y="61" on="1"/>
        <pt x="858" y="245" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 19 values pushed */
          17 25 35 42 6 9 9 4 11 34 1 1 3 31 25 29 69 8 61
          PUSHW[ ]	/* 3 values pushed */
          -16 61 347
          PUSHB[ ]	/* 4 values pushed */
          60 15 12 19
          PUSHW[ ]	/* 4 values pushed */
          352 29 3 352
          PUSHB[ ]	/* 4 values pushed */
          4 66 16 66
          NPUSHW[ ]	/* 9 values pushed */
          348 67 11 357 31 69 -16 69 349
          PUSHB[ ]	/* 3 values pushed */
          71 35 50
          PUSHW[ ]	/* 1 value pushed */
          355
          PUSHB[ ]	/* 5 values pushed */
          15 56 1 56 58
          PUSHW[ ]	/* 1 value pushed */
          354
          PUSHB[ ]	/* 6 values pushed */
          15 48 1 12 3 48
          PUSHW[ ]	/* 1 value pushed */
          -16
          NPUSHB[ ]	/* 13 values pushed */
          48 60 29 31 71 48 5 53 8 17 64 16 64
          PUSHW[ ]	/* 1 value pushed */
          348
          NPUSHB[ ]	/* 9 values pushed */
          4 67 56 3 63 63 74 42 52
          PUSHW[ ]	/* 1 value pushed */
          352
          PUSHB[ ]	/* 6 values pushed */
          64 53 56 51 54 51
          PUSHW[ ]	/* 1 value pushed */
          314
          PUSHB[ ]	/* 3 values pushed */
          89 4 3
          PUSHW[ ]	/* 1 value pushed */
          -64
          NPUSHB[ ]	/* 11 values pushed */
          11 15 72 3 3 54 42 42 44 44 40
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 20 values pushed */
          89 63 64 64 71 69 69 31 53 60 61 61 67 66 66 27 18 31 11 31
          PUSHW[ ]	/* 1 value pushed */
          315
          NPUSHB[ ]	/* 10 values pushed */
          89 32 15 13 13 11 9 35 0 35
          PUSHW[ ]	/* 1 value pushed */
          314
          PUSHB[ ]	/* 7 values pushed */
          89 6 0 15 44 1 0
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 4 values pushed */
          17 20 72 0
          PUSHW[ ]	/* 1 value pushed */
          -64
          NPUSHB[ ]	/* 27 values pushed */
          12 15 72 44 11 0 44 11 0 3 27 15 54 31 54 47 54 3 11 3 54 53 53 23 21
          27 21
          PUSHW[ ]	/* 1 value pushed */
          316
          PUSHB[ ]	/* 4 values pushed */
          89 25 25 27
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01110]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE784" xMin="28" yMin="-283" xMax="2022" yMax="1685">
      <contour>
        <pt x="28" y="-117" on="1"/>
        <pt x="184" y="145" on="0"/>
        <pt x="196" y="681" on="1"/>
        <pt x="344" y="681" on="1"/>
        <pt x="340" y="509" on="0"/>
        <pt x="322" y="361" on="1"/>
        <pt x="408" y="159" on="0"/>
        <pt x="572" y="55" on="1"/>
        <pt x="572" y="827" on="1"/>
        <pt x="68" y="827" on="1"/>
        <pt x="68" y="967" on="1"/>
        <pt x="520" y="967" on="1"/>
        <pt x="520" y="1279" on="1"/>
        <pt x="152" y="1279" on="1"/>
        <pt x="152" y="1419" on="1"/>
        <pt x="520" y="1419" on="1"/>
        <pt x="520" y="1685" on="1"/>
        <pt x="672" y="1685" on="1"/>
        <pt x="672" y="1419" on="1"/>
        <pt x="1016" y="1419" on="1"/>
        <pt x="1016" y="1279" on="1"/>
        <pt x="672" y="1279" on="1"/>
        <pt x="672" y="967" on="1"/>
        <pt x="1098" y="967" on="1"/>
        <pt x="1098" y="827" on="1"/>
        <pt x="720" y="827" on="1"/>
        <pt x="720" y="505" on="1"/>
        <pt x="1064" y="505" on="1"/>
        <pt x="1064" y="365" on="1"/>
        <pt x="720" y="365" on="1"/>
        <pt x="720" y="-13" on="1"/>
        <pt x="838" y="-53" on="0"/>
        <pt x="986" y="-55" on="1"/>
        <pt x="1496" y="-61" on="0"/>
        <pt x="2022" y="-47" on="1"/>
        <pt x="1986" y="-137" on="0"/>
        <pt x="1966" y="-209" on="1"/>
        <pt x="1454" y="-211" on="0"/>
        <pt x="952" y="-207" on="1"/>
        <pt x="460" y="-187" on="0"/>
        <pt x="286" y="149" on="1"/>
        <pt x="230" y="-109" on="0"/>
        <pt x="120" y="-283" on="1"/>
        <pt x="80" y="-189" on="0"/>
      </contour>
      <contour>
        <pt x="1058" y="1473" on="1"/>
        <pt x="1178" y="1557" on="1"/>
        <pt x="1364" y="1259" on="0"/>
        <pt x="1542" y="969" on="1"/>
        <pt x="1698" y="1269" on="0"/>
        <pt x="1812" y="1601" on="1"/>
        <pt x="1962" y="1549" on="1"/>
        <pt x="1820" y="1153" on="0"/>
        <pt x="1638" y="813" on="1"/>
        <pt x="1822" y="509" on="0"/>
        <pt x="1998" y="211" on="1"/>
        <pt x="1862" y="111" on="1"/>
        <pt x="1702" y="389" on="0"/>
        <pt x="1546" y="651" on="1"/>
        <pt x="1366" y="345" on="0"/>
        <pt x="1150" y="89" on="1"/>
        <pt x="1088" y="155" on="0"/>
        <pt x="1026" y="195" on="1"/>
        <pt x="1268" y="483" on="0"/>
        <pt x="1454" y="807" on="1"/>
        <pt x="1250" y="1153" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 21 values pushed */
          40 5 2 24 24 63 30 28 20 13 9 57 47 52 52 63 63 30 34 20 45
          PUSHW[ ]	/* 3 values pushed */
          -16 45 346
          PUSHB[ ]	/* 4 values pushed */
          44 44 28 59
          PUSHW[ ]	/* 3 values pushed */
          -16 59 347
          PUSHB[ ]	/* 4 values pushed */
          61 18 15 22
          PUSHW[ ]	/* 1 value pushed */
          352
          PUSHB[ ]	/* 4 values pushed */
          11 11 26 30
          PUSHW[ ]	/* 1 value pushed */
          352
          PUSHB[ ]	/* 4 values pushed */
          7 55 16 55
          PUSHW[ ]	/* 1 value pushed */
          349
          PUSHB[ ]	/* 8 values pushed */
          54 54 50 61 7 2 34 49
          PUSHW[ ]	/* 1 value pushed */
          352
          NPUSHB[ ]	/* 11 values pushed */
          50 50 66 13 9 2 42 0 0 5 3
          PUSHW[ ]	/* 1 value pushed */
          352
          NPUSHB[ ]	/* 125 values pushed */
          64 2 63 36 1 75 36 91 36 107 36 3 30 7 31 5 57 63 63 55 44 47 52 52 54
          45 2 61 91 59 219 59 2 100 59 1 116 59 132 59 164 59 3 59 59 31 29 40 5 5
          2 9 54 11 55 1 52 55 68 55 100 55 148 55 164 55 228 55 244 55 7 112 55 128 55
          2 2 55 55 42 16 50 47 49 63 49 207 49 3 49 49 31 16 44 47 45 63 45 207 45
          255 45 4 176 45 1 45 45 14 239 16 1 111 16 127 16 2 0 16 1 12 3 16 26 29
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 31 values pushed */
          89 47 26 79 26 95 26 207 26 4 15 26 63 26 79 26 3 16 3 26 64 22 27 72 26
          25 9 22 10 10 9
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 37 values pushed */
          89 47 10 63 10 111 10 3 15 10 159 10 175 10 223 10 239 10 255 10 6 175 10 191 10
          239 10 255 10 4 0 10 1 11 3 10 0
          PUSHW[ ]	/* 4 values pushed */
          -16 42 0 316
          NPUSHB[ ]	/* 20 values pushed */
          89 42 64 11 27 72 0 42 16 42 32 42 64 42 80 42 5 45 3 42
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 8 values pushed */
          28 31 72 42 42 39 31 39
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 27 values pushed */
          89 26 10 14 31 64 28 50 72 0 31 16 31 32 31 3 17 3 31 16 14 21 13 18 14
          14 13
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 34 values pushed */
          89 127 14 143 14 2 127 14 1 63 14 1 16 14 32 14 144 14 3 32 14 192 14 2 80
          14 176 14 192 14 240 14 4 14
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          SVTCA[1]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01110]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE785" xMin="66" yMin="-147" xMax="1982" yMax="1521">
      <contour>
        <pt x="66" y="13" on="1"/>
        <pt x="934" y="13" on="1"/>
        <pt x="934" y="629" on="1"/>
        <pt x="252" y="629" on="1"/>
        <pt x="252" y="789" on="1"/>
        <pt x="934" y="789" on="1"/>
        <pt x="934" y="1361" on="1"/>
        <pt x="176" y="1361" on="1"/>
        <pt x="176" y="1521" on="1"/>
        <pt x="1872" y="1521" on="1"/>
        <pt x="1872" y="1361" on="1"/>
        <pt x="1110" y="1361" on="1"/>
        <pt x="1110" y="789" on="1"/>
        <pt x="1808" y="789" on="1"/>
        <pt x="1808" y="629" on="1"/>
        <pt x="1110" y="629" on="1"/>
        <pt x="1110" y="13" on="1"/>
        <pt x="1982" y="13" on="1"/>
        <pt x="1982" y="-147" on="1"/>
        <pt x="66" y="-147" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 17 values pushed */
          10 14 3 7 10 14 18 3 1 7 19 18 18 21 12 5 16
          PUSHW[ ]	/* 1 value pushed */
          357
          NPUSHB[ ]	/* 10 values pushed */
          64 1 1 21 20 19 11 7 8 7
          PUSHW[ ]	/* 1 value pushed */
          318
          PUSHB[ ]	/* 5 values pushed */
          89 15 3 4 3
          PUSHW[ ]	/* 1 value pushed */
          318
          NPUSHB[ ]	/* 44 values pushed */
          89 12 47 4 95 4 2 4 4 0 15 8 31 8 79 8 95 8 143 8 159 8 207 8 223
          8 239 8 9 18 3 8 64 34 44 72 8 64 11 15 72 8 0 19
          PUSHW[ ]	/* 1 value pushed */
          318
          PUSHB[ ]	/* 3 values pushed */
          89 16 0
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[0]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE786" xMin="26" yMin="-271" xMax="1940" yMax="1673">
      <contour>
        <pt x="1568" y="1427" on="1"/>
        <pt x="804" y="1427" on="1"/>
        <pt x="804" y="1571" on="1"/>
        <pt x="1850" y="1571" on="1"/>
        <pt x="1850" y="1425" on="1"/>
        <pt x="1028" y="929" on="1"/>
        <pt x="1940" y="929" on="1"/>
        <pt x="1912" y="369" on="0"/>
        <pt x="1902" y="171" on="1"/>
        <pt x="1892" y="-61" on="0"/>
        <pt x="1818" y="-145" on="1"/>
        <pt x="1748" y="-233" on="0"/>
        <pt x="1564" y="-231" on="1"/>
        <pt x="1480" y="-231" on="0"/>
        <pt x="1320" y="-225" on="1"/>
        <pt x="1306" y="-139" on="0"/>
        <pt x="1284" y="-55" on="1"/>
        <pt x="1412" y="-73" on="0"/>
        <pt x="1558" y="-77" on="1"/>
        <pt x="1728" y="-83" on="0"/>
        <pt x="1746" y="103" on="1"/>
        <pt x="1764" y="337" on="0"/>
        <pt x="1784" y="785" on="1"/>
        <pt x="1552" y="785" on="1"/>
        <pt x="1456" y="125" on="0"/>
        <pt x="920" y="-271" on="1"/>
        <pt x="864" y="-193" on="0"/>
        <pt x="816" y="-139" on="1"/>
        <pt x="1324" y="225" on="0"/>
        <pt x="1402" y="785" on="1"/>
        <pt x="1176" y="785" on="1"/>
        <pt x="1070" y="317" on="0"/>
        <pt x="642" y="1" on="1"/>
        <pt x="598" y="67" on="0"/>
        <pt x="546" y="129" on="1"/>
        <pt x="928" y="409" on="0"/>
        <pt x="1026" y="785" on="1"/>
        <pt x="756" y="785" on="1"/>
        <pt x="756" y="937" on="1"/>
      </contour>
      <contour>
        <pt x="26" y="433" on="1"/>
        <pt x="240" y="761" on="0"/>
        <pt x="326" y="1145" on="1"/>
        <pt x="44" y="1145" on="1"/>
        <pt x="44" y="1281" on="1"/>
        <pt x="352" y="1281" on="1"/>
        <pt x="352" y="1673" on="1"/>
        <pt x="496" y="1673" on="1"/>
        <pt x="496" y="1281" on="1"/>
        <pt x="780" y="1281" on="1"/>
        <pt x="780" y="1145" on="1"/>
        <pt x="496" y="1145" on="1"/>
        <pt x="496" y="807" on="1"/>
        <pt x="582" y="879" on="1"/>
        <pt x="716" y="733" on="0"/>
        <pt x="836" y="597" on="1"/>
        <pt x="718" y="495" on="1"/>
        <pt x="612" y="635" on="0"/>
        <pt x="496" y="771" on="1"/>
        <pt x="496" y="-267" on="1"/>
        <pt x="352" y="-267" on="1"/>
        <pt x="352" y="841" on="1"/>
        <pt x="244" y="473" on="0"/>
        <pt x="92" y="257" on="1"/>
        <pt x="64" y="343" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 16 values pushed */
          16 16 20 25 1 49 42 1 0 58 42 39 25 27 27 29
          PUSHW[ ]	/* 1 value pushed */
          352
          PUSHB[ ]	/* 7 values pushed */
          23 16 23 32 34 34 36
          PUSHW[ ]	/* 1 value pushed */
          352
          NPUSHB[ ]	/* 11 values pushed */
          30 16 30 30 49 5 5 37 55 16 55
          PUSHW[ ]	/* 1 value pushed */
          346
          NPUSHB[ ]	/* 10 values pushed */
          54 0 4 4 20 23 54 58 22 8
          PUSHW[ ]	/* 1 value pushed */
          353
          NPUSHB[ ]	/* 14 values pushed */
          37 59 20 20 65 59 62 39 39 47 51 44 41 58
          PUSHW[ ]	/* 1 value pushed */
          351
          PUSHB[ ]	/* 8 values pushed */
          64 59 54 55 55 34 37 34
          PUSHW[ ]	/* 4 values pushed */
          -16 32 34 312
          PUSHB[ ]	/* 3 values pushed */
          89 62 39
          PUSHW[ ]	/* 1 value pushed */
          321
          NPUSHB[ ]	/* 23 values pushed */
          89 0 32 16 32 32 32 96 32 4 11 6 32 62 32 62 12 1 59 59 27 25 27
          PUSHW[ ]	/* 4 values pushed */
          -16 25 27 312
          NPUSHB[ ]	/* 13 values pushed */
          89 0 25 1 11 6 25 25 12 16 18 12 18
          PUSHW[ ]	/* 1 value pushed */
          317
          NPUSHB[ ]	/* 18 values pushed */
          89 60 52 64 57 51 15 51 1 11 4 51 5 30 23 37 5 37
          PUSHW[ ]	/* 4 values pushed */
          315 89 38 -24
          NPUSHB[ ]	/* 9 values pushed */
          18 21 72 38 5 50 42 43 42
          PUSHW[ ]	/* 1 value pushed */
          313
          NPUSHB[ ]	/* 45 values pushed */
          89 47 43 52 16 47 43 63 43 2 79 43 191 43 207 43 223 43 4 52 5 43 43 5 52
          3 2 14 15 12 31 12 2 14 3 12 4 24 18 21 72 4 1 2 1
          PUSHW[ ]	/* 4 values pushed */
          315 89 45 -64
          NPUSHB[ ]	/* 16 values pushed */
          11 15 72 45 45 47 2 63 2 79 2 3 64 2 1 2
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SMD[ ]	/* SetMinimumDistance */
          RTG[ ]	/* RoundToGrid */
          SRP0[ ]	/* SetRefPoint0 */
          MDRP[01100]	/* MoveDirectRelPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SVTCA[1]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE787" xMin="24" yMin="-271" xMax="2012" yMax="1691">
      <contour>
        <pt x="24" y="279" on="1"/>
        <pt x="252" y="585" on="0"/>
        <pt x="368" y="961" on="1"/>
        <pt x="52" y="961" on="1"/>
        <pt x="52" y="1103" on="1"/>
        <pt x="380" y="1103" on="1"/>
        <pt x="380" y="1397" on="1"/>
        <pt x="226" y="1381" on="0"/>
        <pt x="90" y="1369" on="1"/>
        <pt x="76" y="1443" on="0"/>
        <pt x="50" y="1517" on="1"/>
        <pt x="438" y="1545" on="0"/>
        <pt x="820" y="1605" on="1"/>
        <pt x="872" y="1457" on="1"/>
        <pt x="692" y="1433" on="0"/>
        <pt x="530" y="1415" on="1"/>
        <pt x="530" y="1103" on="1"/>
        <pt x="848" y="1103" on="1"/>
        <pt x="848" y="961" on="1"/>
        <pt x="530" y="961" on="1"/>
        <pt x="530" y="735" on="1"/>
        <pt x="618" y="815" on="1"/>
        <pt x="762" y="691" on="0"/>
        <pt x="884" y="573" on="1"/>
        <pt x="772" y="459" on="1"/>
        <pt x="644" y="603" on="0"/>
        <pt x="530" y="709" on="1"/>
        <pt x="530" y="-271" on="1"/>
        <pt x="380" y="-271" on="1"/>
        <pt x="380" y="631" on="1"/>
        <pt x="262" y="323" on="0"/>
        <pt x="100" y="109" on="1"/>
        <pt x="66" y="191" on="0"/>
      </contour>
      <contour>
        <pt x="746" y="385" on="1"/>
        <pt x="1530" y="455" on="1"/>
        <pt x="1530" y="1691" on="1"/>
        <pt x="1684" y="1691" on="1"/>
        <pt x="1684" y="469" on="1"/>
        <pt x="2000" y="499" on="1"/>
        <pt x="2012" y="355" on="1"/>
        <pt x="1684" y="325" on="1"/>
        <pt x="1684" y="-271" on="1"/>
        <pt x="1530" y="-271" on="1"/>
        <pt x="1530" y="311" on="1"/>
        <pt x="762" y="241" on="1"/>
      </contour>
      <contour>
        <pt x="984" y="1379" on="1"/>
        <pt x="1076" y="1479" on="1"/>
        <pt x="1298" y="1309" on="0"/>
        <pt x="1436" y="1181" on="1"/>
        <pt x="1332" y="1063" on="1"/>
        <pt x="1190" y="1209" on="0"/>
      </contour>
      <contour>
        <pt x="866" y="899" on="1"/>
        <pt x="962" y="1001" on="1"/>
        <pt x="1190" y="823" on="0"/>
        <pt x="1306" y="717" on="1"/>
        <pt x="1202" y="595" on="1"/>
        <pt x="1108" y="693" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 44 values pushed */
          8 10 10 28 0 18 33 3 55 54 54 27 46 45 45 27 52 51 51 27 12 13 13 42 27
          18 23 33 24 24 23 23 42 27 3 0 39 39 49 48 48 37 34 41
          PUSHW[ ]	/* 1 value pushed */
          353
          NPUSHB[ ]	/* 12 values pushed */
          42 42 58 28 31 0 0 16 20 5 2 27
          PUSHW[ ]	/* 1 value pushed */
          352
          NPUSHB[ ]	/* 15 values pushed */
          64 28 28 28 15 42 31 42 2 14 3 42 42 31 23
          NPUSHW[ ]	/* 16 values pushed */
          -16 24 23 309 89 54 -16 55 54 310 89 48 -16 49 48 310
          NPUSHB[ ]	/* 29 values pushed */
          89 15 55 79 55 2 11 3 24 55 49 49 55 24 3 31 8 43 40 40 44 39 37 34 34
          33 38 44 33
          PUSHW[ ]	/* 1 value pushed */
          315
          NPUSHB[ ]	/* 15 values pushed */
          89 0 44 16 44 32 44 3 11 3 44 44 39 38 39
          PUSHW[ ]	/* 1 value pushed */
          315
          PUSHB[ ]	/* 8 values pushed */
          89 26 20 20 29 21 21 29
          PUSHW[ ]	/* 1 value pushed */
          323
          PUSHB[ ]	/* 5 values pushed */
          89 51 16 52 51
          PUSHW[ ]	/* 1 value pushed */
          310
          NPUSHB[ ]	/* 13 values pushed */
          89 19 3 0 3 16 3 32 3 3 35 3 3
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 5 values pushed */
          48 52 72 4 3
          PUSHW[ ]	/* 1 value pushed */
          313
          PUSHB[ ]	/* 7 values pushed */
          89 16 4 45 16 46 45
          PUSHW[ ]	/* 1 value pushed */
          310
          NPUSHB[ ]	/* 35 values pushed */
          89 21 38 16 2 47 52 1 144 52 160 52 176 52 3 15 4 1 13 3 38 21 52 4 46
          46 4 52 21 38 5 0 10 31 0
          PUSHW[ ]	/* 1 value pushed */
          320
          PUSHB[ ]	/* 8 values pushed */
          89 31 6 15 13 8 12 13
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 11 values pushed */
          89 15 12 1 11 3 12 12 10 10 8
          PUSHW[ ]	/* 1 value pushed */
          316
          PUSHB[ ]	/* 4 values pushed */
          89 35 35 10
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SLOOP[ ]	/* SetLoopVariable */
          SHPIX[ ]	/* ShiftZoneByPixel */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SVTCA[1]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE788" xMin="52" yMin="-255" xMax="1996" yMax="1537">
      <contour>
        <pt x="52" y="1537" on="1"/>
        <pt x="1996" y="1537" on="1"/>
        <pt x="1996" y="1373" on="1"/>
        <pt x="1024" y="1373" on="1"/>
        <pt x="1024" y="937" on="1"/>
        <pt x="1116" y="1065" on="1"/>
        <pt x="1574" y="795" on="0"/>
        <pt x="1884" y="579" on="1"/>
        <pt x="1766" y="417" on="1"/>
        <pt x="1456" y="655" on="0"/>
        <pt x="1024" y="919" on="1"/>
        <pt x="1024" y="-255" on="1"/>
        <pt x="842" y="-255" on="1"/>
        <pt x="842" y="1373" on="1"/>
        <pt x="52" y="1373" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 11 values pushed */
          8 7 7 2 14 2 2 16 14 4 11
          PUSHW[ ]	/* 1 value pushed */
          358
          NPUSHB[ ]	/* 66 values pushed */
          64 12 12 16 15 63 12 79 12 159 12 3 15 12 175 12 207 12 223 12 4 21 2 95 12
          111 12 127 12 3 15 12 47 12 63 12 79 12 111 12 159 12 175 12 207 12 223 12 9 26
          3 12 64 42 45 72 12 64 11 20 72 12 4 10 5 10
          PUSHW[ ]	/* 1 value pushed */
          315
          NPUSHB[ ]	/* 9 values pushed */
          89 5 16 5 5 0 12 7 7
          PUSHW[ ]	/* 4 values pushed */
          -16 8 7 318
          PUSHB[ ]	/* 6 values pushed */
          89 8 3 14 0 14
          PUSHW[ ]	/* 1 value pushed */
          319
          NPUSHB[ ]	/* 41 values pushed */
          89 47 0 63 0 111 0 127 0 143 0 5 47 0 111 0 127 0 175 0 191 0 239 0 255
          0 7 47 0 63 0 79 0 111 0 175 0 239 0 6 0
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE789" xMin="17" yMin="0" xMax="1162" yMax="1549">
      <contour>
        <pt x="930" y="1549" on="1"/>
        <pt x="930" y="526" on="1"/>
        <pt x="1162" y="526" on="1"/>
        <pt x="1162" y="364" on="1"/>
        <pt x="930" y="364" on="1"/>
        <pt x="930" y="0" on="1"/>
        <pt x="740" y="0" on="1"/>
        <pt x="740" y="364" on="1"/>
        <pt x="17" y="364" on="1"/>
        <pt x="17" y="517" on="1"/>
        <pt x="210" y="734" on="0"/>
        <pt x="600" y="1300" on="0"/>
        <pt x="727" y="1549" on="1"/>
      </contour>
      <contour>
        <pt x="237" y="526" on="1"/>
        <pt x="740" y="526" on="1"/>
        <pt x="740" y="1264" on="1"/>
        <pt x="636" y="1077" on="0"/>
        <pt x="398" y="726" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 31 values pushed */
          2 0 2 5 139 64 12 14 6 6 19 13 8 15 13 0 4 8 13 8 153 89 1 9 13
          13 6 0 6 6 24
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          MIAP[1]	/* MoveIndirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE78A" xMin="50" yMin="-285" xMax="2012" yMax="1701">
      <contour>
        <pt x="526" y="333" on="1"/>
        <pt x="791" y="215" on="0"/>
        <pt x="1098" y="70" on="1"/>
        <pt x="1550" y="461" on="1"/>
        <pt x="430" y="461" on="1"/>
        <pt x="430" y="609" on="1"/>
        <pt x="527" y="857" on="1"/>
        <pt x="50" y="857" on="1"/>
        <pt x="50" y="1009" on="1"/>
        <pt x="587" y="1009" on="1"/>
        <pt x="695" y="1283" on="1"/>
        <pt x="172" y="1283" on="1"/>
        <pt x="172" y="1435" on="1"/>
        <pt x="755" y="1435" on="1"/>
        <pt x="860" y="1701" on="1"/>
        <pt x="1042" y="1701" on="1"/>
        <pt x="937" y="1435" on="1"/>
        <pt x="1884" y="1435" on="1"/>
        <pt x="1884" y="1283" on="1"/>
        <pt x="877" y="1283" on="1"/>
        <pt x="769" y="1009" on="1"/>
        <pt x="2012" y="1009" on="1"/>
        <pt x="2012" y="857" on="1"/>
        <pt x="709" y="857" on="1"/>
        <pt x="612" y="611" on="1"/>
        <pt x="1778" y="611" on="1"/>
        <pt x="1778" y="455" on="1"/>
        <pt x="1246" y="0" on="1"/>
        <pt x="1380" y="-64" on="0"/>
        <pt x="1522" y="-133" on="1"/>
        <pt x="1424" y="-285" on="1"/>
        <pt x="922" y="-21" on="0"/>
        <pt x="442" y="199" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 36 values pushed */
          27 2 42 2 1 8 2 1 2 0 30 29 29 7 22 18 18 22 22 26 20 23 16 19 10
          13 11 11 6 7 6 9 13 9 4 14
          PUSHW[ ]	/* 1 value pushed */
          358
          NPUSHB[ ]	/* 23 values pushed */
          23 19 15 16 15 15 44 3 1 3 15 3 1 12 4 3 26 26 34 0 32 32 24
          PUSHW[ ]	/* 1 value pushed */
          358
          NPUSHB[ ]	/* 11 values pushed */
          4 64 7 7 4 2 27 32 16 0 32
          PUSHW[ ]	/* 1 value pushed */
          313
          NPUSHB[ ]	/* 10 values pushed */
          89 15 26 1 14 6 26 4 24 4
          PUSHW[ ]	/* 1 value pushed */
          316
          PUSHB[ ]	/* 7 values pushed */
          89 5 24 23 7 8 7
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 56 values pushed */
          89 20 8 27 4 0 132 0 2 196 0 244 0 2 176 0 1 2 0 0 32 0 2 11 79
          8 95 8 2 15 8 31 8 111 8 191 8 207 8 239 8 255 8 7 17 3 0 24 8 8
          24 0 3 29 12 29
          PUSHW[ ]	/* 4 values pushed */
          -16 30 29 316
          NPUSHB[ ]	/* 31 values pushed */
          89 15 30 1 56 3 30 64 36 40 72 30 64 26 29 72 30 64 18 21 72 30 64 11 15
          72 30 19 11 12 11
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 29 values pushed */
          89 16 12 32 14 48 14 160 14 3 80 14 96 14 2 14 14 127 12 1 176 12 192 12 2
          175 12 1 12
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SDS[ ]	/* SetDeltaShiftInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SDS[ ]	/* SetDeltaShiftInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE78B" xMin="24" yMin="-285" xMax="2022" yMax="1697">
      <contour>
        <pt x="766" y="791" on="1"/>
        <pt x="766" y="923" on="1"/>
        <pt x="1280" y="923" on="1"/>
        <pt x="1280" y="1229" on="1"/>
        <pt x="758" y="1229" on="1"/>
        <pt x="758" y="1375" on="1"/>
        <pt x="1280" y="1375" on="1"/>
        <pt x="1280" y="1697" on="1"/>
        <pt x="1440" y="1697" on="1"/>
        <pt x="1440" y="1375" on="1"/>
        <pt x="1984" y="1375" on="1"/>
        <pt x="1984" y="1229" on="1"/>
        <pt x="1440" y="1229" on="1"/>
        <pt x="1440" y="923" on="1"/>
        <pt x="1866" y="923" on="1"/>
        <pt x="1866" y="803" on="1"/>
        <pt x="1725" y="403" on="0"/>
        <pt x="1465" y="155" on="1"/>
        <pt x="1690" y="-22" on="0"/>
        <pt x="2022" y="-115" on="1"/>
        <pt x="1946" y="-203" on="0"/>
        <pt x="1894" y="-269" on="1"/>
        <pt x="1569" y="-137" on="0"/>
        <pt x="1343" y="52" on="1"/>
        <pt x="1080" y="-146" on="0"/>
        <pt x="728" y="-285" on="1"/>
        <pt x="686" y="-221" on="0"/>
        <pt x="622" y="-143" on="1"/>
        <pt x="979" y="-27" on="0"/>
        <pt x="1232" y="157" on="1"/>
        <pt x="1010" y="399" on="0"/>
        <pt x="899" y="791" on="1"/>
      </contour>
      <contour>
        <pt x="24" y="643" on="1"/>
        <pt x="175" y="686" on="0"/>
        <pt x="316" y="728" on="1"/>
        <pt x="316" y="1159" on="1"/>
        <pt x="50" y="1159" on="1"/>
        <pt x="50" y="1297" on="1"/>
        <pt x="316" y="1297" on="1"/>
        <pt x="316" y="1685" on="1"/>
        <pt x="470" y="1685" on="1"/>
        <pt x="470" y="1297" on="1"/>
        <pt x="704" y="1297" on="1"/>
        <pt x="704" y="1159" on="1"/>
        <pt x="470" y="1159" on="1"/>
        <pt x="470" y="776" on="1"/>
        <pt x="585" y="813" on="0"/>
        <pt x="694" y="849" on="1"/>
        <pt x="694" y="753" on="0"/>
        <pt x="698" y="693" on="1"/>
        <pt x="585" y="657" on="0"/>
        <pt x="470" y="620" on="1"/>
        <pt x="470" y="-25" on="1"/>
        <pt x="470" y="-237" on="0"/>
        <pt x="270" y="-239" on="1"/>
        <pt x="190" y="-241" on="0"/>
        <pt x="78" y="-239" on="1"/>
        <pt x="66" y="-155" on="0"/>
        <pt x="52" y="-69" on="1"/>
        <pt x="170" y="-81" on="0"/>
        <pt x="230" y="-81" on="1"/>
        <pt x="316" y="-81" on="0"/>
        <pt x="316" y="9" on="1"/>
        <pt x="316" y="569" on="1"/>
        <pt x="181" y="524" on="0"/>
        <pt x="44" y="477" on="1"/>
      </contour>
      <contour>
        <pt x="1692" y="791" on="1"/>
        <pt x="1053" y="791" on="1"/>
        <pt x="1143" y="475" on="0"/>
        <pt x="1353" y="257" on="1"/>
        <pt x="1589" y="481" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 36 values pushed */
          17 69 69 19 67 29 23 23 21 31 0 4 43 49 58 36 21 19 19 15 4 2 49 43 0
          3 31 52 58 36 32 11 32 9 6 13
          PUSHW[ ]	/* 6 values pushed */
          354 2 67 353 31 -16
          PUSHB[ ]	/* 6 values pushed */
          31 2 31 62 11 66
          PUSHW[ ]	/* 1 value pushed */
          357
          NPUSHB[ ]	/* 12 values pushed */
          15 15 72 25 27 27 32 41 45 38 34 52
          PUSHW[ ]	/* 1 value pushed */
          353
          NPUSHB[ ]	/* 14 values pushed */
          64 62 63 51 51 65 49 45 34 34 32 47 65 32
          PUSHW[ ]	/* 1 value pushed */
          319
          NPUSHB[ ]	/* 16 values pushed */
          89 0 65 1 22 3 65 65 21 4 69 29 29 27 67 27
          PUSHW[ ]	/* 4 values pushed */
          -16 25 27 314
          NPUSHB[ ]	/* 12 values pushed */
          89 23 17 17 15 25 25 21 56 54 60 54
          PUSHW[ ]	/* 1 value pushed */
          318
          PUSHB[ ]	/* 5 values pushed */
          89 58 60 47 49
          PUSHW[ ]	/* 1 value pushed */
          317
          PUSHB[ ]	/* 6 values pushed */
          89 67 15 0 1 0
          PUSHW[ ]	/* 1 value pushed */
          314
          PUSHB[ ]	/* 7 values pushed */
          89 13 1 44 36 37 36
          PUSHW[ ]	/* 1 value pushed */
          314
          NPUSHB[ ]	/* 17 values pushed */
          89 41 37 47 16 60 47 1 37 37 1 47 60 4 19 5 19
          PUSHW[ ]	/* 4 values pushed */
          -16 21 19 317
          NPUSHB[ ]	/* 56 values pushed */
          89 63 21 79 21 95 21 3 21 64 27 40 72 21 64 12 15 72 8 21 40 21 2 21 39
          39 16 7 32 7 96 7 3 0 7 16 7 64 7 80 7 144 7 208 7 224 7 7 16 3
          7 7 12 4 5 4
          PUSHW[ ]	/* 1 value pushed */
          315
          NPUSHB[ ]	/* 11 values pushed */
          89 9 143 5 239 5 2 48 5 1 5
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE78C" xMin="200" yMin="0" xMax="1178" yMax="1549">
      <contour>
        <pt x="200" y="0" on="1"/>
        <pt x="200" y="1549" on="1"/>
        <pt x="655" y="1549" on="1"/>
        <pt x="859" y="1549" on="0"/>
        <pt x="1103" y="1354" on="0"/>
        <pt x="1103" y="1193" on="1"/>
        <pt x="1103" y="1065" on="0"/>
        <pt x="958" y="869" on="0"/>
        <pt x="831" y="828" on="1"/>
        <pt x="831" y="824" on="1"/>
        <pt x="989" y="806" on="0"/>
        <pt x="1178" y="603" on="0"/>
        <pt x="1178" y="447" on="1"/>
        <pt x="1178" y="247" on="0"/>
        <pt x="891" y="0" on="0"/>
        <pt x="667" y="0" on="1"/>
      </contour>
      <contour>
        <pt x="400" y="1374" on="1"/>
        <pt x="400" y="889" on="1"/>
        <pt x="582" y="889" on="1"/>
        <pt x="727" y="889" on="0"/>
        <pt x="892" y="1030" on="0"/>
        <pt x="892" y="1155" on="1"/>
        <pt x="892" y="1374" on="0"/>
        <pt x="600" y="1374" on="1"/>
      </contour>
      <contour>
        <pt x="400" y="715" on="1"/>
        <pt x="400" y="175" on="1"/>
        <pt x="640" y="175" on="1"/>
        <pt x="797" y="175" on="0"/>
        <pt x="968" y="320" on="0"/>
        <pt x="968" y="449" on="1"/>
        <pt x="968" y="715" on="0"/>
        <pt x="607" y="715" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 38 values pushed */
          12 125 29 29 5 125 9 21 21 33 17 25 127 64 0 8 24 17 17 24 145 89 17 17 25
          1 1 16 145 89 1 3 0 25 145 89 0 18
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MIRP[01101]	/* MoveIndirectRelPt */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE78D" xMin="42" yMin="-285" xMax="2008" yMax="1605">
      <contour>
        <pt x="294" y="1605" on="1"/>
        <pt x="1754" y="1605" on="1"/>
        <pt x="1754" y="951" on="1"/>
        <pt x="1602" y="951" on="1"/>
        <pt x="1602" y="1035" on="1"/>
        <pt x="446" y="1035" on="1"/>
        <pt x="446" y="951" on="1"/>
        <pt x="294" y="951" on="1"/>
      </contour>
      <contour>
        <pt x="2008" y="-115" on="1"/>
        <pt x="1950" y="-195" on="0"/>
        <pt x="1916" y="-269" on="1"/>
        <pt x="1268" y="-181" on="0"/>
        <pt x="992" y="223" on="1"/>
        <pt x="812" y="-143" on="0"/>
        <pt x="130" y="-285" on="1"/>
        <pt x="108" y="-225" on="0"/>
        <pt x="42" y="-135" on="1"/>
        <pt x="712" y="-13" on="0"/>
        <pt x="870" y="295" on="1"/>
        <pt x="66" y="295" on="1"/>
        <pt x="66" y="435" on="1"/>
        <pt x="918" y="435" on="1"/>
        <pt x="940" y="537" on="0"/>
        <pt x="946" y="671" on="1"/>
        <pt x="188" y="671" on="1"/>
        <pt x="188" y="811" on="1"/>
        <pt x="1858" y="811" on="1"/>
        <pt x="1858" y="671" on="1"/>
        <pt x="1096" y="671" on="1"/>
        <pt x="1088" y="535" on="0"/>
        <pt x="1072" y="435" on="1"/>
        <pt x="1982" y="435" on="1"/>
        <pt x="1982" y="295" on="1"/>
        <pt x="1102" y="295" on="1"/>
        <pt x="1402" y="-79" on="0"/>
      </contour>
      <contour>
        <pt x="1602" y="1469" on="1"/>
        <pt x="446" y="1469" on="1"/>
        <pt x="446" y="1171" on="1"/>
        <pt x="1602" y="1171" on="1"/>
      </contour>
      <instructions>
        <assembly>
          PUSHB[ ]	/* 2 values pushed */
          19 33
          PUSHW[ ]	/* 1 value pushed */
          -16
          NPUSHB[ ]	/* 21 values pushed */
          33 18 12 12 10 19 7 32 27 24 32 2 10 8 8 2 14 16 16 7 30
          PUSHW[ ]	/* 3 values pushed */
          353 21 -16
          PUSHB[ ]	/* 3 values pushed */
          21 21 28
          PUSHW[ ]	/* 1 value pushed */
          352
          PUSHB[ ]	/* 4 values pushed */
          23 27 38 2
          PUSHW[ ]	/* 1 value pushed */
          352
          PUSHB[ ]	/* 8 values pushed */
          23 7 3 3 40 24 37 6
          PUSHW[ ]	/* 1 value pushed */
          352
          NPUSHB[ ]	/* 17 values pushed */
          64 7 3 7 3 7 25 5 12 16 12 33 19 30 20 20 19
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 16 values pushed */
          89 143 20 1 0 20 16 20 2 13 3 20 28 24 25 24
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 24 values pushed */
          89 15 25 1 255 25 1 143 25 223 25 2 0 25 16 25 64 25 3 13 3 25 37 5
          PUSHW[ ]	/* 1 value pushed */
          315
          NPUSHB[ ]	/* 14 values pushed */
          89 15 37 1 22 0 37 64 37 2 30 3 37 16
          PUSHW[ ]	/* 4 values pushed */
          -16 14 16 316
          PUSHB[ ]	/* 6 values pushed */
          89 14 14 10 8 10
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 19 values pushed */
          89 20 25 37 3 0 15 8 1 27 3 8 64 11 16 72 8 0 36
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 40 values pushed */
          89 63 0 79 0 2 0 0 16 0 32 0 144 0 4 0 0 48 0 64 0 80 0 128 0
          144 0 192 0 208 0 224 0 9 176 0 240 0 2 0
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 4 values pushed */
          45 48 72 0
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SVTCA[1]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE78E" xMin="91" yMin="-26" xMax="1113" yMax="1575">
      <contour>
        <pt x="91" y="744" on="1"/>
        <pt x="91" y="1154" on="0"/>
        <pt x="363" y="1575" on="0"/>
        <pt x="621" y="1575" on="1"/>
        <pt x="1113" y="1575" on="0"/>
        <pt x="1113" y="781" on="1"/>
        <pt x="1113" y="389" on="0"/>
        <pt x="836" y="-26" on="0"/>
        <pt x="586" y="-26" on="1"/>
        <pt x="350" y="-26" on="0"/>
        <pt x="91" y="368" on="0"/>
      </contour>
      <contour>
        <pt x="291" y="753" on="1"/>
        <pt x="291" y="136" on="0"/>
        <pt x="604" y="136" on="1"/>
        <pt x="912" y="136" on="0"/>
        <pt x="912" y="763" on="1"/>
        <pt x="912" y="1412" on="0"/>
        <pt x="610" y="1412" on="1"/>
        <pt x="291" y="1412" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 21 values pushed */
          5 137 15 15 20 11 137 64 0 8 13 153 89 8 25 3 17 153 89 3 7
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE78F" xMin="212" yMin="0" xMax="764" yMax="1583">
      <contour>
        <pt x="570" y="0" on="1"/>
        <pt x="570" y="1325" on="1"/>
        <pt x="524" y="1279" on="0"/>
        <pt x="305" y="1165" on="0"/>
        <pt x="212" y="1142" on="1"/>
        <pt x="212" y="1334" on="1"/>
        <pt x="335" y="1368" on="0"/>
        <pt x="615" y="1517" on="0"/>
        <pt x="690" y="1583" on="1"/>
        <pt x="764" y="1583" on="1"/>
        <pt x="764" y="0" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 21 values pushed */
          10 139 0 64 5 5 1 0 0 12 11 5 4 153 89 5 5 9 7 0 24
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          MIAP[1]	/* MoveIndirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE790" xMin="26" yMin="-261" xMax="1864" yMax="1603">
      <contour>
        <pt x="528" y="823" on="1"/>
        <pt x="1110" y="823" on="1"/>
        <pt x="1110" y="1051" on="1"/>
        <pt x="1258" y="1051" on="1"/>
        <pt x="1258" y="823" on="1"/>
        <pt x="1840" y="823" on="1"/>
        <pt x="1840" y="-261" on="1"/>
        <pt x="1692" y="-261" on="1"/>
        <pt x="1692" y="-145" on="1"/>
        <pt x="676" y="-145" on="1"/>
        <pt x="676" y="-261" on="1"/>
        <pt x="528" y="-261" on="1"/>
      </contour>
      <contour>
        <pt x="248" y="1603" on="1"/>
        <pt x="1864" y="1603" on="1"/>
        <pt x="1864" y="981" on="1"/>
        <pt x="1716" y="981" on="1"/>
        <pt x="1716" y="1091" on="1"/>
        <pt x="400" y="1091" on="1"/>
        <pt x="400" y="741" on="1"/>
        <pt x="404" y="81" on="0"/>
        <pt x="142" y="-257" on="1"/>
        <pt x="88" y="-191" on="0"/>
        <pt x="26" y="-127" on="1"/>
        <pt x="248" y="169" on="0"/>
        <pt x="248" y="709" on="1"/>
      </contour>
      <contour>
        <pt x="1716" y="1463" on="1"/>
        <pt x="400" y="1463" on="1"/>
        <pt x="400" y="1231" on="1"/>
        <pt x="1716" y="1231" on="1"/>
      </contour>
      <contour>
        <pt x="1258" y="-9" on="1"/>
        <pt x="1692" y="-9" on="1"/>
        <pt x="1692" y="271" on="1"/>
        <pt x="1258" y="271" on="1"/>
      </contour>
      <contour>
        <pt x="1692" y="687" on="1"/>
        <pt x="1258" y="687" on="1"/>
        <pt x="1258" y="407" on="1"/>
        <pt x="1692" y="407" on="1"/>
      </contour>
      <contour>
        <pt x="676" y="-9" on="1"/>
        <pt x="1110" y="-9" on="1"/>
        <pt x="1110" y="271" on="1"/>
        <pt x="676" y="271" on="1"/>
      </contour>
      <contour>
        <pt x="676" y="407" on="1"/>
        <pt x="1110" y="407" on="1"/>
        <pt x="1110" y="687" on="1"/>
        <pt x="676" y="687" on="1"/>
      </contour>
      <instructions>
        <assembly>
          PUSHB[ ]	/* 7 values pushed */
          20 22 22 24 36 30 6
          PUSHW[ ]	/* 1 value pushed */
          352
          PUSHB[ ]	/* 6 values pushed */
          7 4 35 1 42 29
          PUSHW[ ]	/* 1 value pushed */
          352
          PUSHB[ ]	/* 4 values pushed */
          38 41 37 10
          PUSHW[ ]	/* 1 value pushed */
          352
          PUSHB[ ]	/* 3 values pushed */
          11 28 14
          PUSHW[ ]	/* 1 value pushed */
          352
          NPUSHB[ ]	/* 10 values pushed */
          11 38 7 3 24 15 15 46 27 18
          PUSHW[ ]	/* 1 value pushed */
          352
          PUSHB[ ]	/* 6 values pushed */
          64 24 29 37 37 9
          PUSHW[ ]	/* 1 value pushed */
          313
          PUSHB[ ]	/* 5 values pushed */
          89 32 40 41 40
          PUSHW[ ]	/* 1 value pushed */
          313
          PUSHB[ ]	/* 7 values pushed */
          89 35 41 34 44 0 44
          PUSHW[ ]	/* 1 value pushed */
          313
          PUSHB[ ]	/* 8 values pushed */
          89 4 0 15 15 17 0 2
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 8 values pushed */
          11 26 72 2 2 17 27 17
          PUSHW[ ]	/* 1 value pushed */
          314
          NPUSHB[ ]	/* 38 values pushed */
          89 191 37 207 37 2 191 37 207 37 2 95 41 111 41 127 41 159 41 175 41 207 41 6 111
          41 127 41 207 41 3 0 41 16 41 2 11 0
          PUSHW[ ]	/* 1 value pushed */
          -64
          NPUSHB[ ]	/* 22 values pushed */
          11 14 72 0 27 16 27 2 13 3 37 41 0 27 27 0 41 37 4 22 12 22
          PUSHW[ ]	/* 4 values pushed */
          -16 20 22 312
          NPUSHB[ ]	/* 30 values pushed */
          89 11 11 7 7 15 20 31 20 143 20 159 20 175 20 5 20 20 64 12 15 72 0 20 1
          35 3 20 12 26
          PUSHW[ ]	/* 1 value pushed */
          314
          NPUSHB[ ]	/* 34 values pushed */
          89 12 64 12 2 77 79 12 1 0 12 48 12 64 12 128 12 144 12 192 12 208 12 224 12
          8 112 12 176 12 240 12 3 12
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE791" xMin="23" yMin="0" xMax="1417" yMax="1549">
      <contour>
        <pt x="1417" y="0" on="1"/>
        <pt x="1196" y="0" on="1"/>
        <pt x="1038" y="424" on="1"/>
        <pt x="393" y="424" on="1"/>
        <pt x="244" y="0" on="1"/>
        <pt x="23" y="0" on="1"/>
        <pt x="613" y="1549" on="1"/>
        <pt x="827" y="1549" on="1"/>
      </contour>
      <contour>
        <pt x="976" y="599" on="1"/>
        <pt x="742" y="1243" on="1"/>
        <pt x="731" y="1274" on="0"/>
        <pt x="718" y="1351" on="1"/>
        <pt x="713" y="1351" on="1"/>
        <pt x="702" y="1281" on="0"/>
        <pt x="688" y="1243" on="1"/>
        <pt x="456" y="599" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 35 values pushed */
          12 7 125 6 6 5 1 0 0 17 4 64 5 15 3 145 89 15 15 5 27 12 43 12 2
          139 12 1 12 6 3 5 18 1 18
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          MIAP[1]	/* MoveIndirectAbsPt */
          MIAP[1]	/* MoveIndirectAbsPt */
          MDRP[01101]	/* MoveDirectRelPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MDRP[01101]	/* MoveDirectRelPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDRP[01101]	/* MoveDirectRelPt */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          IP[ ]	/* InterpolatePts */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE792" xMin="60" yMin="-275" xMax="1908" yMax="1607">
      <contour>
        <pt x="230" y="1607" on="1"/>
        <pt x="1818" y="1607" on="1"/>
        <pt x="1818" y="653" on="1"/>
        <pt x="1666" y="653" on="1"/>
        <pt x="1666" y="737" on="1"/>
        <pt x="382" y="737" on="1"/>
        <pt x="382" y="653" on="1"/>
        <pt x="230" y="653" on="1"/>
      </contour>
      <contour>
        <pt x="104" y="497" on="1"/>
        <pt x="826" y="497" on="1"/>
        <pt x="837" y="575" on="0"/>
        <pt x="846" y="671" on="1"/>
        <pt x="1008" y="671" on="1"/>
        <pt x="997" y="572" on="0"/>
        <pt x="987" y="497" on="1"/>
        <pt x="1908" y="497" on="1"/>
        <pt x="1888" y="239" on="0"/>
        <pt x="1870" y="91" on="1"/>
        <pt x="1832" y="-233" on="0"/>
        <pt x="1530" y="-233" on="1"/>
        <pt x="1338" y="-233" on="0"/>
        <pt x="1136" y="-225" on="1"/>
        <pt x="1128" y="-157" on="0"/>
        <pt x="1106" y="-49" on="1"/>
        <pt x="1326" y="-73" on="0"/>
        <pt x="1506" y="-73" on="1"/>
        <pt x="1688" y="-73" on="0"/>
        <pt x="1710" y="105" on="1"/>
        <pt x="1726" y="219" on="0"/>
        <pt x="1738" y="357" on="1"/>
        <pt x="964" y="357" on="1"/>
        <pt x="891" y="-86" on="0"/>
        <pt x="164" y="-275" on="1"/>
        <pt x="158" y="-267" on="0"/>
        <pt x="60" y="-131" on="1"/>
        <pt x="720" y="22" on="0"/>
        <pt x="803" y="357" on="1"/>
        <pt x="104" y="357" on="1"/>
      </contour>
      <contour>
        <pt x="382" y="873" on="1"/>
        <pt x="948" y="873" on="1"/>
        <pt x="948" y="1105" on="1"/>
        <pt x="382" y="1105" on="1"/>
      </contour>
      <contour>
        <pt x="1100" y="873" on="1"/>
        <pt x="1666" y="873" on="1"/>
        <pt x="1666" y="1105" on="1"/>
        <pt x="1100" y="1105" on="1"/>
      </contour>
      <contour>
        <pt x="1666" y="1471" on="1"/>
        <pt x="1100" y="1471" on="1"/>
        <pt x="1100" y="1241" on="1"/>
        <pt x="1666" y="1241" on="1"/>
      </contour>
      <contour>
        <pt x="382" y="1241" on="1"/>
        <pt x="948" y="1241" on="1"/>
        <pt x="948" y="1471" on="1"/>
        <pt x="382" y="1471" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 12 values pushed */
          23 23 29 32 37 32 34 34 7 49 43 2
          PUSHW[ ]	/* 1 value pushed */
          352
          PUSHB[ ]	/* 4 values pushed */
          3 48 51 42
          PUSHW[ ]	/* 4 values pushed */
          352 39 11 354
          PUSHB[ ]	/* 7 values pushed */
          12 16 12 12 9 14 36
          PUSHW[ ]	/* 1 value pushed */
          354
          PUSHB[ ]	/* 4 values pushed */
          30 30 6 15
          PUSHW[ ]	/* 1 value pushed */
          356
          NPUSHB[ ]	/* 10 values pushed */
          3 39 7 29 29 55 37 50 38 6
          PUSHW[ ]	/* 1 value pushed */
          352
          PUSHB[ ]	/* 3 values pushed */
          64 7 34
          PUSHW[ ]	/* 4 values pushed */
          -16 32 34 315
          NPUSHB[ ]	/* 20 values pushed */
          89 15 32 31 32 47 32 3 35 3 32 64 25 29 72 32 32 20 21 23
          PUSHW[ ]	/* 1 value pushed */
          315
          PUSHB[ ]	/* 8 values pushed */
          89 19 21 21 20 25 25 20
          PUSHW[ ]	/* 1 value pushed */
          315
          PUSHB[ ]	/* 5 values pushed */
          89 30 37 8 37
          PUSHW[ ]	/* 1 value pushed */
          315
          NPUSHB[ ]	/* 14 values pushed */
          89 14 8 3 7 11 11 7 3 3 5 8 38 5
          PUSHW[ ]	/* 1 value pushed */
          315
          PUSHB[ ]	/* 7 values pushed */
          89 42 38 45 41 50 41
          PUSHW[ ]	/* 1 value pushed */
          315
          NPUSHB[ ]	/* 70 values pushed */
          89 48 50 47 38 127 38 143 38 159 38 223 38 239 38 6 15 38 31 38 47 38 207 38 223
          38 5 13 38 64 18 21 72 32 38 48 38 2 143 50 223 50 2 31 50 127 50 207 50 3
          8 38 50 50 38 8 3 0 15 25 31 25 2 14 3 25 47 53 0 53
          PUSHW[ ]	/* 1 value pushed */
          315
          NPUSHB[ ]	/* 29 values pushed */
          89 63 0 79 0 2 0 0 80 0 128 0 144 0 192 0 208 0 224 0 7 112 0 176 0
          240 0 3 0
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 4 values pushed */
          41 44 72 0
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE793" xMin="28" yMin="-285" xMax="2020" yMax="1709">
      <contour>
        <pt x="28" y="433" on="1"/>
        <pt x="238" y="791" on="0"/>
        <pt x="324" y="1143" on="1"/>
        <pt x="50" y="1143" on="1"/>
        <pt x="50" y="1281" on="1"/>
        <pt x="330" y="1281" on="1"/>
        <pt x="330" y="1695" on="1"/>
        <pt x="476" y="1695" on="1"/>
        <pt x="476" y="1281" on="1"/>
        <pt x="708" y="1281" on="1"/>
        <pt x="708" y="1143" on="1"/>
        <pt x="476" y="1143" on="1"/>
        <pt x="476" y="957" on="1"/>
        <pt x="546" y="1011" on="1"/>
        <pt x="688" y="831" on="0"/>
        <pt x="742" y="747" on="1"/>
        <pt x="634" y="667" on="1"/>
        <pt x="572" y="761" on="0"/>
        <pt x="476" y="899" on="1"/>
        <pt x="476" y="-277" on="1"/>
        <pt x="330" y="-277" on="1"/>
        <pt x="330" y="791" on="1"/>
        <pt x="226" y="453" on="0"/>
        <pt x="92" y="257" on="1"/>
        <pt x="66" y="343" on="0"/>
      </contour>
      <contour>
        <pt x="1070" y="773" on="1"/>
        <pt x="1178" y="489" on="0"/>
        <pt x="1336" y="307" on="1"/>
        <pt x="1484" y="489" on="0"/>
        <pt x="1580" y="791" on="1"/>
        <pt x="1734" y="735" on="1"/>
        <pt x="1602" y="389" on="0"/>
        <pt x="1448" y="197" on="1"/>
        <pt x="1674" y="9" on="0"/>
        <pt x="2020" y="-87" on="1"/>
        <pt x="1972" y="-145" on="0"/>
        <pt x="1918" y="-237" on="1"/>
        <pt x="1558" y="-111" on="0"/>
        <pt x="1340" y="81" on="1"/>
        <pt x="1110" y="-139" on="0"/>
        <pt x="732" y="-285" on="1"/>
        <pt x="692" y="-221" on="0"/>
        <pt x="636" y="-141" on="1"/>
        <pt x="1006" y="-11" on="0"/>
        <pt x="1228" y="193" on="1"/>
        <pt x="1058" y="385" on="0"/>
        <pt x="942" y="711" on="1"/>
      </contour>
      <contour>
        <pt x="776" y="1389" on="1"/>
        <pt x="1316" y="1389" on="1"/>
        <pt x="1274" y="1503" on="0"/>
        <pt x="1202" y="1651" on="1"/>
        <pt x="1336" y="1709" on="1"/>
        <pt x="1414" y="1571" on="0"/>
        <pt x="1468" y="1447" on="1"/>
        <pt x="1338" y="1389" on="1"/>
        <pt x="1980" y="1389" on="1"/>
        <pt x="1980" y="1249" on="1"/>
        <pt x="776" y="1249" on="1"/>
      </contour>
      <contour>
        <pt x="1070" y="1205" on="1"/>
        <pt x="1208" y="1137" on="1"/>
        <pt x="1032" y="833" on="0"/>
        <pt x="840" y="579" on="1"/>
        <pt x="780" y="621" on="0"/>
        <pt x="714" y="663" on="1"/>
        <pt x="922" y="927" on="0"/>
      </contour>
      <contour>
        <pt x="1466" y="1107" on="1"/>
        <pt x="1574" y="1197" on="1"/>
        <pt x="1792" y="965" on="0"/>
        <pt x="1988" y="721" on="1"/>
        <pt x="1866" y="617" on="1"/>
        <pt x="1692" y="859" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 24 values pushed */
          32 38 38 30 40 44 27 27 29 42 57 10 3 36 34 34 68 57 58 19 3 0 56 29
          NPUSHW[ ]	/* 9 values pushed */
          353 30 66 -16 66 344 65 48 352
          PUSHB[ ]	/* 6 values pushed */
          53 16 53 53 54 51
          NPUSHW[ ]	/* 12 values pushed */
          349 50 58 350 59 25 348 46 61 -16 61 347
          PUSHB[ ]	/* 5 values pushed */
          63 10 16 16 16
          PUSHW[ ]	/* 1 value pushed */
          344
          NPUSHB[ ]	/* 11 values pushed */
          15 63 46 50 65 4 20 56 69 16 69
          PUSHW[ ]	/* 1 value pushed */
          346
          NPUSHB[ ]	/* 18 values pushed */
          15 59 30 3 68 68 72 40 42 42 23 0 0 8 12 5 2 19
          PUSHW[ ]	/* 1 value pushed */
          351
          NPUSHB[ ]	/* 15 values pushed */
          64 20 63 61 61 68 69 69 34 57 59 58 58 65 66
          PUSHW[ ]	/* 1 value pushed */
          -64
          NPUSHB[ ]	/* 13 values pushed */
          11 19 72 66 66 57 15 16 16 0 21 23 0
          PUSHW[ ]	/* 1 value pushed */
          321
          PUSHB[ ]	/* 7 values pushed */
          89 23 23 57 36 47 57
          PUSHW[ ]	/* 1 value pushed */
          314
          NPUSHB[ ]	/* 29 values pushed */
          89 50 51 51 47 38 44 44 36 46 46 25 27 32 32 34 25 30 29 29 4 25 20 25 36
          25 3 11 25
          PUSHW[ ]	/* 1 value pushed */
          -64
          NPUSHB[ ]	/* 20 values pushed */
          20 23 72 0 25 1 36 2 25 25 18 12 12 21 13 64 11 3 4 3
          PUSHW[ ]	/* 1 value pushed */
          314
          NPUSHB[ ]	/* 25 values pushed */
          89 8 4 13 16 13 4 13 4 34 54 47 6 6 0 47 1 14 3 47 20 20 42 40 42
          PUSHW[ ]	/* 4 values pushed */
          -16 40 42 315
          PUSHB[ ]	/* 5 values pushed */
          89 40 40 36 34
          PUSHW[ ]	/* 4 values pushed */
          -16 36 34 316
          NPUSHB[ ]	/* 9 values pushed */
          89 79 36 95 36 111 36 3 36
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SMD[ ]	/* SetMinimumDistance */
          RTG[ ]	/* RoundToGrid */
          SRP0[ ]	/* SetRefPoint0 */
          MDRP[01101]	/* MoveDirectRelPt */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SVTCA[1]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01110]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE794" xMin="200" yMin="0" xMax="1800" yMax="1549">
      <contour>
        <pt x="1601" y="0" on="1"/>
        <pt x="1601" y="1026" on="1"/>
        <pt x="1601" y="1153" on="0"/>
        <pt x="1616" y="1331" on="1"/>
        <pt x="1611" y="1331" on="1"/>
        <pt x="1585" y="1219" on="0"/>
        <pt x="1565" y="1175" on="1"/>
        <pt x="1054" y="0" on="1"/>
        <pt x="943" y="0" on="1"/>
        <pt x="433" y="1166" on="1"/>
        <pt x="415" y="1206" on="0"/>
        <pt x="387" y="1331" on="1"/>
        <pt x="381" y="1331" on="1"/>
        <pt x="391" y="1223" on="0"/>
        <pt x="391" y="1017" on="1"/>
        <pt x="391" y="0" on="1"/>
        <pt x="200" y="0" on="1"/>
        <pt x="200" y="1549" on="1"/>
        <pt x="471" y="1549" on="1"/>
        <pt x="928" y="487" on="1"/>
        <pt x="980" y="365" on="0"/>
        <pt x="997" y="297" on="1"/>
        <pt x="1004" y="297" on="1"/>
        <pt x="1056" y="440" on="0"/>
        <pt x="1077" y="491" on="1"/>
        <pt x="1542" y="1549" on="1"/>
        <pt x="1800" y="1549" on="1"/>
        <pt x="1800" y="0" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 23 values pushed */
          27 177 25 0 22 7 8 0 8 0 8 29 16 18 12 11 11 15 177 64 16 25 4
          PUSHW[ ]	/* 1 value pushed */
          326
          PUSHB[ ]	/* 5 values pushed */
          89 25 3 17 12
          PUSHW[ ]	/* 1 value pushed */
          326
          NPUSHB[ ]	/* 10 values pushed */
          89 17 3 16 18 21 8 18 0 18
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          MIAP[1]	/* MoveIndirectAbsPt */
          MDRP[01101]	/* MoveDirectRelPt */
          MIAP[1]	/* MoveIndirectAbsPt */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDRP[01101]	/* MoveDirectRelPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP0[ ]	/* SetRefPoint0 */
          MDRP[01101]	/* MoveDirectRelPt */
          IP[ ]	/* InterpolatePts */
          SRP0[ ]	/* SetRefPoint0 */
          MDRP[00100]	/* MoveDirectRelPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE795" xMin="36" yMin="-255" xMax="1916" yMax="1703">
      <contour>
        <pt x="1044" y="1225" on="1"/>
        <pt x="970" y="859" on="0"/>
        <pt x="760" y="471" on="1"/>
        <pt x="988" y="161" on="0"/>
        <pt x="1134" y="-49" on="1"/>
        <pt x="996" y="-155" on="1"/>
        <pt x="830" y="87" on="0"/>
        <pt x="668" y="317" on="1"/>
        <pt x="452" y="-19" on="0"/>
        <pt x="150" y="-255" on="1"/>
        <pt x="110" y="-199" on="0"/>
        <pt x="36" y="-121" on="1"/>
        <pt x="354" y="117" on="0"/>
        <pt x="568" y="459" on="1"/>
        <pt x="352" y="761" on="0"/>
        <pt x="142" y="1039" on="1"/>
        <pt x="266" y="1129" on="1"/>
        <pt x="482" y="845" on="0"/>
        <pt x="656" y="611" on="1"/>
        <pt x="794" y="867" on="0"/>
        <pt x="888" y="1225" on="1"/>
        <pt x="44" y="1225" on="1"/>
        <pt x="44" y="1371" on="1"/>
        <pt x="596" y="1371" on="1"/>
        <pt x="526" y="1509" on="0"/>
        <pt x="450" y="1633" on="1"/>
        <pt x="588" y="1703" on="1"/>
        <pt x="688" y="1543" on="0"/>
        <pt x="744" y="1427" on="1"/>
        <pt x="634" y="1371" on="1"/>
        <pt x="1184" y="1371" on="1"/>
        <pt x="1184" y="1225" on="1"/>
      </contour>
      <contour>
        <pt x="1758" y="1663" on="1"/>
        <pt x="1916" y="1663" on="1"/>
        <pt x="1916" y="25" on="1"/>
        <pt x="1916" y="-235" on="0"/>
        <pt x="1678" y="-237" on="1"/>
        <pt x="1572" y="-239" on="0"/>
        <pt x="1358" y="-233" on="1"/>
        <pt x="1346" y="-151" on="0"/>
        <pt x="1328" y="-55" on="1"/>
        <pt x="1490" y="-75" on="0"/>
        <pt x="1604" y="-75" on="1"/>
        <pt x="1758" y="-77" on="0"/>
        <pt x="1758" y="75" on="1"/>
      </contour>
      <contour>
        <pt x="1292" y="1463" on="1"/>
        <pt x="1444" y="1463" on="1"/>
        <pt x="1444" y="199" on="1"/>
        <pt x="1292" y="199" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 30 values pushed */
          45 7 13 13 5 15 18 2 2 4 16 45 22 26 48 32 48 40 4 4 5 5 9 21 32
          26 38 36 42 36
          PUSHW[ ]	/* 1 value pushed */
          318
          PUSHB[ ]	/* 6 values pushed */
          89 42 42 11 22 11
          PUSHW[ ]	/* 4 values pushed */
          -16 9 11 313
          NPUSHB[ ]	/* 16 values pushed */
          89 9 15 16 16 21 25 26 26 22 0 21 29 22 22 21
          PUSHW[ ]	/* 1 value pushed */
          315
          NPUSHB[ ]	/* 33 values pushed */
          89 22 28 28 20 29 2 7 7 0 9 13 18 18 20 11 40 31 21 31 48 0 29 23 23
          20 26 9 11 11 15 40 47
          PUSHW[ ]	/* 1 value pushed */
          352
          PUSHB[ ]	/* 4 values pushed */
          48 5 16 5
          PUSHW[ ]	/* 1 value pushed */
          350
          PUSHB[ ]	/* 3 values pushed */
          4 4 20
          PUSHW[ ]	/* 1 value pushed */
          353
          PUSHB[ ]	/* 4 values pushed */
          0 16 0 26
          PUSHW[ ]	/* 3 values pushed */
          -16 26 350
          PUSHB[ ]	/* 4 values pushed */
          25 0 16 34
          PUSHW[ ]	/* 1 value pushed */
          354
          PUSHB[ ]	/* 8 values pushed */
          48 25 15 44 44 50 21 16
          PUSHW[ ]	/* 4 values pushed */
          -16 16 347 15
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE796" xMin="8" yMin="-273" xMax="1996" yMax="1721">
      <contour>
        <pt x="950" y="1643" on="1"/>
        <pt x="1096" y="1721" on="1"/>
        <pt x="1182" y="1611" on="0"/>
        <pt x="1260" y="1483" on="1"/>
        <pt x="1163" y="1427" on="1"/>
        <pt x="1974" y="1427" on="1"/>
        <pt x="1974" y="1275" on="1"/>
        <pt x="416" y="1275" on="1"/>
        <pt x="416" y="785" on="1"/>
        <pt x="416" y="77" on="0"/>
        <pt x="124" y="-273" on="1"/>
        <pt x="76" y="-207" on="0"/>
        <pt x="8" y="-135" on="1"/>
        <pt x="248" y="133" on="0"/>
        <pt x="248" y="781" on="1"/>
        <pt x="248" y="1427" on="1"/>
        <pt x="1094" y="1427" on="1"/>
        <pt x="1029" y="1537" on="0"/>
      </contour>
      <contour>
        <pt x="404" y="-3" on="1"/>
        <pt x="1329" y="-3" on="1"/>
        <pt x="1485" y="396" on="0"/>
        <pt x="1660" y="1089" on="1"/>
        <pt x="1834" y="1041" on="1"/>
        <pt x="1647" y="381" on="0"/>
        <pt x="1502" y="-3" on="1"/>
        <pt x="1996" y="-3" on="1"/>
        <pt x="1996" y="-155" on="1"/>
        <pt x="404" y="-155" on="1"/>
      </contour>
      <contour>
        <pt x="512" y="979" on="1"/>
        <pt x="664" y="1031" on="1"/>
        <pt x="788" y="667" on="0"/>
        <pt x="904" y="215" on="1"/>
        <pt x="734" y="163" on="1"/>
        <pt x="642" y="559" on="0"/>
      </contour>
      <contour>
        <pt x="994" y="1079" on="1"/>
        <pt x="1148" y="1123" on="1"/>
        <pt x="1252" y="763" on="0"/>
        <pt x="1332" y="317" on="1"/>
        <pt x="1156" y="271" on="1"/>
        <pt x="1098" y="667" on="0"/>
      </contour>
      <instructions>
        <assembly>
          PUSHB[ ]	/* 4 values pushed */
          27 27 10 32
          PUSHW[ ]	/* 4 values pushed */
          356 31 38 357
          NPUSHB[ ]	/* 13 values pushed */
          37 31 37 31 37 8 22 6 6 26 26 22 24
          PUSHW[ ]	/* 4 values pushed */
          357 19 35 353
          PUSHB[ ]	/* 8 values pushed */
          34 3 3 4 4 16 16 1
          NPUSHW[ ]	/* 9 values pushed */
          -16 1 351 0 29 352 28 19 -16
          NPUSHB[ ]	/* 11 values pushed */
          19 34 0 28 28 0 34 19 4 14 21
          PUSHW[ ]	/* 1 value pushed */
          357
          PUSHB[ ]	/* 7 values pushed */
          22 22 41 10 12 12 8
          PUSHW[ ]	/* 1 value pushed */
          356
          NPUSHB[ ]	/* 23 values pushed */
          64 14 31 32 32 18 28 29 37 38 0 29 1 11 3 29 38 29 38 7 18 18 27
          PUSHW[ ]	/* 1 value pushed */
          316
          PUSHB[ ]	/* 6 values pushed */
          89 24 128 18 1 18
          PUSHW[ ]	/* 1 value pushed */
          -64
          NPUSHB[ ]	/* 34 values pushed */
          12 15 72 18 18 12 15 34 35 35 7 22 79 21 95 21 2 15 21 31 21 2 19 3 21
          64 28 33 72 21 21 7 15 7
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 55 values pushed */
          89 0 0 1 1 11 1 1 4 207 15 1 79 15 127 15 143 15 175 15 191 15 207 15 6
          0 15 1 63 15 127 15 175 15 191 15 223 15 239 15 255 15 7 32 15 1 15 15 31 15
          2 12 3 15 12
          PUSHW[ ]	/* 4 values pushed */
          -16 10 12 314
          NPUSHB[ ]	/* 19 values pushed */
          89 47 10 159 10 2 175 10 191 10 207 10 3 10 64 12 15 72 10
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SVTCA[1]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP1[ ]	/* SetRefPoint1 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE797" xMin="30" yMin="-269" xMax="2016" yMax="1699">
      <contour>
        <pt x="1702" y="463" on="1"/>
        <pt x="1702" y="573" on="1"/>
        <pt x="1328" y="573" on="1"/>
        <pt x="1328" y="445" on="1"/>
        <pt x="1184" y="445" on="1"/>
        <pt x="1184" y="573" on="1"/>
        <pt x="814" y="573" on="1"/>
        <pt x="814" y="423" on="1"/>
        <pt x="670" y="423" on="1"/>
        <pt x="670" y="1207" on="1"/>
        <pt x="1184" y="1207" on="1"/>
        <pt x="1184" y="1339" on="1"/>
        <pt x="572" y="1339" on="1"/>
        <pt x="572" y="1467" on="1"/>
        <pt x="1184" y="1467" on="1"/>
        <pt x="1184" y="1699" on="1"/>
        <pt x="1328" y="1699" on="1"/>
        <pt x="1328" y="1467" on="1"/>
        <pt x="1968" y="1467" on="1"/>
        <pt x="1968" y="1339" on="1"/>
        <pt x="1328" y="1339" on="1"/>
        <pt x="1328" y="1207" on="1"/>
        <pt x="1846" y="1207" on="1"/>
        <pt x="1846" y="463" on="1"/>
      </contour>
      <contour>
        <pt x="30" y="1135" on="1"/>
        <pt x="232" y="1135" on="1"/>
        <pt x="232" y="1699" on="1"/>
        <pt x="380" y="1699" on="1"/>
        <pt x="380" y="1135" on="1"/>
        <pt x="572" y="1135" on="1"/>
        <pt x="572" y="991" on="1"/>
        <pt x="380" y="991" on="1"/>
        <pt x="380" y="-269" on="1"/>
        <pt x="232" y="-269" on="1"/>
        <pt x="232" y="991" on="1"/>
        <pt x="30" y="991" on="1"/>
      </contour>
      <contour>
        <pt x="520" y="339" on="1"/>
        <pt x="1546" y="339" on="1"/>
        <pt x="1546" y="455" on="1"/>
        <pt x="1694" y="455" on="1"/>
        <pt x="1694" y="339" on="1"/>
        <pt x="2016" y="339" on="1"/>
        <pt x="2016" y="211" on="1"/>
        <pt x="1694" y="211" on="1"/>
        <pt x="1694" y="-19" on="1"/>
        <pt x="1694" y="-245" on="0"/>
        <pt x="1454" y="-245" on="1"/>
        <pt x="1340" y="-245" on="0"/>
        <pt x="1172" y="-241" on="1"/>
        <pt x="1164" y="-177" on="0"/>
        <pt x="1148" y="-93" on="1"/>
        <pt x="1310" y="-107" on="0"/>
        <pt x="1436" y="-107" on="1"/>
        <pt x="1546" y="-107" on="0"/>
        <pt x="1546" y="1" on="1"/>
        <pt x="1546" y="211" on="1"/>
        <pt x="520" y="211" on="1"/>
      </contour>
      <contour>
        <pt x="1328" y="693" on="1"/>
        <pt x="1702" y="693" on="1"/>
        <pt x="1702" y="829" on="1"/>
        <pt x="1328" y="829" on="1"/>
      </contour>
      <contour>
        <pt x="814" y="693" on="1"/>
        <pt x="1184" y="693" on="1"/>
        <pt x="1184" y="829" on="1"/>
        <pt x="814" y="829" on="1"/>
      </contour>
      <contour>
        <pt x="1702" y="1083" on="1"/>
        <pt x="1328" y="1083" on="1"/>
        <pt x="1328" y="949" on="1"/>
        <pt x="1702" y="949" on="1"/>
      </contour>
      <contour>
        <pt x="814" y="949" on="1"/>
        <pt x="1184" y="949" on="1"/>
        <pt x="1184" y="1083" on="1"/>
        <pt x="814" y="1083" on="1"/>
      </contour>
      <contour>
        <pt x="756" y="101" on="1"/>
        <pt x="846" y="201" on="1"/>
        <pt x="990" y="107" on="0"/>
        <pt x="1118" y="5" on="1"/>
        <pt x="1022" y="-101" on="1"/>
        <pt x="904" y="-1" on="0"/>
      </contour>
      <contour>
        <pt x="1728" y="1471" on="1"/>
        <pt x="1608" y="1537" on="0"/>
        <pt x="1476" y="1597" on="1"/>
        <pt x="1538" y="1699" on="1"/>
        <pt x="1684" y="1637" on="0"/>
        <pt x="1790" y="1583" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 9 values pushed */
          79 84 84 0 19 19 42 42 23
          PUSHW[ ]	/* 1 value pushed */
          351
          NPUSHB[ ]	/* 13 values pushed */
          0 68 58 0 77 76 50 50 76 76 32 40 44
          PUSHW[ ]	/* 1 value pushed */
          352
          NPUSHB[ ]	/* 12 values pushed */
          54 37 54 82 81 81 0 67 57 21 17 3
          PUSHW[ ]	/* 1 value pushed */
          351
          NPUSHB[ ]	/* 21 values pushed */
          4 70 62 14 10 4 30 12 56 56 12 30 3 8 32 74 73 73 69 61 7
          PUSHW[ ]	/* 1 value pushed */
          351
          NPUSHB[ ]	/* 13 values pushed */
          8 0 54 4 8 8 4 54 0 4 86 28 32
          PUSHW[ ]	/* 1 value pushed */
          352
          PUSHB[ ]	/* 7 values pushed */
          33 64 35 35 25 33 84
          PUSHW[ ]	/* 4 values pushed */
          -16 79 84 308
          NPUSHB[ ]	/* 30 values pushed */
          89 16 79 32 79 2 4 79 1 244 79 1 217 79 1 0 79 16 79 2 11 3 79 79 81
          48 81 16 82 81
          PUSHW[ ]	/* 4 values pushed */
          306 89 74 -32
          NPUSHB[ ]	/* 49 values pushed */
          23 27 72 182 74 1 132 74 148 74 164 74 3 114 74 1 54 74 86 74 102 74 3 37 74
          1 6 74 22 74 2 0 77 16 77 48 77 3 11 3 74 77 74 77 48 43 56 36 56
          PUSHW[ ]	/* 1 value pushed */
          312
          NPUSHB[ ]	/* 10 values pushed */
          89 40 32 0 48 0 96 0 3 0
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 7 values pushed */
          11 16 72 0 38 1 38
          PUSHW[ ]	/* 1 value pushed */
          -64
          NPUSHB[ ]	/* 24 values pushed */
          11 16 72 15 8 31 8 2 23 3 0 38 4 8 8 4 38 0 4 36 2 6 61 6
          PUSHW[ ]	/* 1 value pushed */
          310
          PUSHB[ ]	/* 7 values pushed */
          89 57 61 60 64 69 64
          PUSHW[ ]	/* 1 value pushed */
          310
          PUSHB[ ]	/* 7 values pushed */
          89 67 69 31 35 24 35
          PUSHW[ ]	/* 1 value pushed */
          315
          PUSHB[ ]	/* 7 values pushed */
          89 28 24 66 72 9 72
          PUSHW[ ]	/* 1 value pushed */
          310
          PUSHB[ ]	/* 7 values pushed */
          89 21 9 20 12 13 12
          PUSHW[ ]	/* 1 value pushed */
          312
          NPUSHB[ ]	/* 94 values pushed */
          89 17 13 48 36 192 36 208 36 3 0 61 1 48 61 80 61 2 31 69 143 69 2 143 69
          159 69 2 80 69 1 15 69 47 69 2 15 9 31 9 47 9 3 11 63 13 207 13 2 0
          13 16 13 2 12 36 61 69 24 9 13 13 9 24 69 61 36 6 50 82 26 26 82 15 15
          112 82 128 82 2 0 82 96 82 160 82 176 82 192 82 5 14 3 82
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 6 values pushed */
          28 31 72 82 52 46
          PUSHW[ ]	/* 1 value pushed */
          314
          NPUSHB[ ]	/* 10 values pushed */
          89 52 52 48 50 33 33 48 50 48
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 19 values pushed */
          89 255 50 1 47 50 143 50 159 50 175 50 4 50 64 11 21 72 50
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[0]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE798" xMin="111" yMin="0" xMax="1095" yMax="1549">
      <contour>
        <pt x="1095" y="1428" on="1"/>
        <pt x="851" y="1002" on="0"/>
        <pt x="572" y="277" on="0"/>
        <pt x="539" y="0" on="1"/>
        <pt x="335" y="0" on="1"/>
        <pt x="372" y="273" on="0"/>
        <pt x="648" y="973" on="0"/>
        <pt x="879" y="1376" on="1"/>
        <pt x="111" y="1376" on="1"/>
        <pt x="111" y="1549" on="1"/>
        <pt x="1095" y="1549" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 9 values pushed */
          7 0 0 12 9 9 3 64 4
          PUSHW[ ]	/* 1 value pushed */
          -16
          NPUSHB[ ]	/* 11 values pushed */
          4 0 8 9 8 153 89 9 6 4 24
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SMD[ ]	/* SetMinimumDistance */
          MDRP[01101]	/* MoveDirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDRP[01101]	/* MoveDirectRelPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE799" xMin="80" yMin="-259" xMax="2020" yMax="1691">
      <contour>
        <pt x="720" y="847" on="1"/>
        <pt x="958" y="847" on="1"/>
        <pt x="958" y="1691" on="1"/>
        <pt x="1112" y="1691" on="1"/>
        <pt x="1112" y="847" on="1"/>
        <pt x="1992" y="847" on="1"/>
        <pt x="1992" y="703" on="1"/>
        <pt x="1433" y="703" on="1"/>
        <pt x="1588" y="214" on="0"/>
        <pt x="2020" y="-41" on="1"/>
        <pt x="1942" y="-117" on="0"/>
        <pt x="1890" y="-181" on="1"/>
        <pt x="1434" y="158" on="0"/>
        <pt x="1289" y="703" on="1"/>
        <pt x="1112" y="703" on="1"/>
        <pt x="1112" y="17" on="1"/>
        <pt x="1218" y="69" on="0"/>
        <pt x="1406" y="177" on="1"/>
        <pt x="1420" y="85" on="0"/>
        <pt x="1438" y="19" on="1"/>
        <pt x="1304" y="-49" on="0"/>
        <pt x="1110" y="-165" on="1"/>
        <pt x="1036" y="-217" on="0"/>
        <pt x="994" y="-259" on="1"/>
        <pt x="886" y="-121" on="1"/>
        <pt x="958" y="-49" on="0"/>
        <pt x="958" y="45" on="1"/>
        <pt x="958" y="703" on="1"/>
        <pt x="720" y="703" on="1"/>
      </contour>
      <contour>
        <pt x="86" y="1595" on="1"/>
        <pt x="726" y="1595" on="1"/>
        <pt x="726" y="923" on="1"/>
        <pt x="578" y="923" on="1"/>
        <pt x="578" y="985" on="1"/>
        <pt x="274" y="985" on="1"/>
        <pt x="242" y="639" on="1"/>
        <pt x="712" y="639" on="1"/>
        <pt x="688" y="241" on="0"/>
        <pt x="674" y="55" on="1"/>
        <pt x="650" y="-227" on="0"/>
        <pt x="398" y="-227" on="1"/>
        <pt x="316" y="-227" on="0"/>
        <pt x="134" y="-221" on="1"/>
        <pt x="122" y="-145" on="0"/>
        <pt x="100" y="-51" on="1"/>
        <pt x="274" y="-67" on="0"/>
        <pt x="370" y="-67" on="1"/>
        <pt x="502" y="-67" on="0"/>
        <pt x="520" y="65" on="1"/>
        <pt x="542" y="221" on="0"/>
        <pt x="554" y="503" on="1"/>
        <pt x="80" y="503" on="1"/>
        <pt x="138" y="1121" on="1"/>
        <pt x="578" y="1121" on="1"/>
        <pt x="578" y="1459" on="1"/>
        <pt x="86" y="1459" on="1"/>
      </contour>
      <contour>
        <pt x="1164" y="1085" on="1"/>
        <pt x="1506" y="1287" on="0"/>
        <pt x="1804" y="1571" on="1"/>
        <pt x="1922" y="1459" on="1"/>
        <pt x="1614" y="1177" on="0"/>
        <pt x="1258" y="957" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 18 values pushed */
          28 44 55 17 19 19 59 15 23 24 24 26 38 6 11 9 9 7
          PUSHW[ ]	/* 3 values pushed */
          351 13 -16
          PUSHB[ ]	/* 4 values pushed */
          13 4 1 15
          PUSHW[ ]	/* 4 values pushed */
          353 26 38 346
          PUSHB[ ]	/* 5 values pushed */
          50 50 28 53 31
          PUSHW[ ]	/* 1 value pushed */
          352
          NPUSHB[ ]	/* 14 values pushed */
          32 32 26 13 3 51 6 59 61 56 56 58 16 58
          PUSHW[ ]	/* 1 value pushed */
          346
          PUSHB[ ]	/* 4 values pushed */
          59 59 63 34
          PUSHW[ ]	/* 1 value pushed */
          349
          PUSHB[ ]	/* 5 values pushed */
          52 52 44 55 35
          PUSHW[ ]	/* 4 values pushed */
          354 64 51 -16
          PUSHB[ ]	/* 5 values pushed */
          51 15 24 17 24
          PUSHW[ ]	/* 4 values pushed */
          -16 23 24 314
          NPUSHB[ ]	/* 12 values pushed */
          89 15 23 31 23 2 14 3 23 23 11 9
          PUSHW[ ]	/* 4 values pushed */
          -16 11 9 314
          NPUSHB[ ]	/* 36 values pushed */
          89 59 16 58 32 58 2 58 58 61 15 61 31 61 79 61 95 61 4 11 0 61 16 61 2
          19 3 11 61 11 61 55 42 40 46 40
          PUSHW[ ]	/* 1 value pushed */
          318
          PUSHB[ ]	/* 3 values pushed */
          89 17 19
          PUSHW[ ]	/* 1 value pushed */
          318
          PUSHB[ ]	/* 3 values pushed */
          89 35 51
          PUSHW[ ]	/* 1 value pushed */
          314
          PUSHB[ ]	/* 6 values pushed */
          89 14 7 28 0 28
          PUSHW[ ]	/* 1 value pushed */
          315
          NPUSHB[ ]	/* 9 values pushed */
          89 4 0 32 32 34 0 52 34
          PUSHW[ ]	/* 1 value pushed */
          314
          NPUSHB[ ]	/* 49 values pushed */
          89 15 52 31 52 63 52 95 52 111 52 207 52 6 15 52 111 52 255 52 3 11 3 52 64
          21 24 72 17 35 0 52 52 0 35 17 4 46 29 44 44 46 64 16 40 72 46 29 55
          PUSHW[ ]	/* 4 values pushed */
          314 89 2 -64
          NPUSHB[ ]	/* 27 values pushed */
          11 15 72 2 2 63 29 79 29 2 48 29 64 29 128 29 192 29 208 29 5 176 29 240 29
          2 29
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          IP[ ]	/* InterpolatePts */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE79A" xMin="56" yMin="-291" xMax="2000" yMax="1709">
      <contour>
        <pt x="288" y="883" on="1"/>
        <pt x="948" y="883" on="1"/>
        <pt x="948" y="1057" on="1"/>
        <pt x="56" y="1057" on="1"/>
        <pt x="56" y="1193" on="1"/>
        <pt x="598" y="1193" on="1"/>
        <pt x="598" y="1385" on="1"/>
        <pt x="118" y="1385" on="1"/>
        <pt x="118" y="1521" on="1"/>
        <pt x="598" y="1521" on="1"/>
        <pt x="598" y="1709" on="1"/>
        <pt x="750" y="1709" on="1"/>
        <pt x="750" y="1521" on="1"/>
        <pt x="1302" y="1521" on="1"/>
        <pt x="1302" y="1709" on="1"/>
        <pt x="1454" y="1709" on="1"/>
        <pt x="1454" y="1521" on="1"/>
        <pt x="1934" y="1521" on="1"/>
        <pt x="1934" y="1385" on="1"/>
        <pt x="1454" y="1385" on="1"/>
        <pt x="1454" y="1193" on="1"/>
        <pt x="2000" y="1193" on="1"/>
        <pt x="2000" y="1057" on="1"/>
        <pt x="1100" y="1057" on="1"/>
        <pt x="1100" y="883" on="1"/>
        <pt x="1762" y="883" on="1"/>
        <pt x="1762" y="55" on="1"/>
        <pt x="1612" y="55" on="1"/>
        <pt x="1612" y="115" on="1"/>
        <pt x="438" y="115" on="1"/>
        <pt x="438" y="55" on="1"/>
        <pt x="288" y="55" on="1"/>
      </contour>
      <contour>
        <pt x="1198" y="-43" on="1"/>
        <pt x="1256" y="77" on="1"/>
        <pt x="1680" y="-35" on="0"/>
        <pt x="1970" y="-135" on="1"/>
        <pt x="1906" y="-271" on="1"/>
        <pt x="1532" y="-145" on="0"/>
      </contour>
      <contour>
        <pt x="750" y="1193" on="1"/>
        <pt x="1302" y="1193" on="1"/>
        <pt x="1302" y="1385" on="1"/>
        <pt x="750" y="1385" on="1"/>
      </contour>
      <contour>
        <pt x="744" y="77" on="1"/>
        <pt x="832" y="-49" on="1"/>
        <pt x="484" y="-199" on="0"/>
        <pt x="146" y="-291" on="1"/>
        <pt x="118" y="-231" on="0"/>
        <pt x="76" y="-155" on="1"/>
        <pt x="436" y="-67" on="0"/>
      </contour>
      <contour>
        <pt x="1612" y="751" on="1"/>
        <pt x="1100" y="751" on="1"/>
        <pt x="1100" y="563" on="1"/>
        <pt x="1612" y="563" on="1"/>
      </contour>
      <contour>
        <pt x="1100" y="247" on="1"/>
        <pt x="1612" y="247" on="1"/>
        <pt x="1612" y="435" on="1"/>
        <pt x="1100" y="435" on="1"/>
      </contour>
      <contour>
        <pt x="438" y="563" on="1"/>
        <pt x="948" y="563" on="1"/>
        <pt x="948" y="751" on="1"/>
        <pt x="438" y="751" on="1"/>
      </contour>
      <contour>
        <pt x="438" y="247" on="1"/>
        <pt x="948" y="247" on="1"/>
        <pt x="948" y="435" on="1"/>
        <pt x="438" y="435" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 29 values pushed */
          18 7 18 36 35 35 22 26 33 32 32 27 53 42 43 43 62 30 45 47 47 31 7 3 22
          3 16 13 20
          PUSHW[ ]	/* 1 value pushed */
          352
          PUSHB[ ]	/* 6 values pushed */
          39 24 51 1 58 53
          PUSHW[ ]	/* 1 value pushed */
          352
          PUSHB[ ]	/* 4 values pushed */
          62 12 9 38
          PUSHW[ ]	/* 1 value pushed */
          352
          PUSHB[ ]	/* 5 values pushed */
          5 22 52 54 26
          PUSHW[ ]	/* 1 value pushed */
          352
          NPUSHB[ ]	/* 12 values pushed */
          5 62 39 3 31 27 27 66 3 57 61 30
          PUSHW[ ]	/* 1 value pushed */
          352
          NPUSHB[ ]	/* 18 values pushed */
          64 31 27 27 0 31 1 22 3 31 14 31 47 29 14 10 36 35
          PUSHW[ ]	/* 1 value pushed */
          313
          PUSHB[ ]	/* 4 values pushed */
          89 36 33 32
          PUSHW[ ]	/* 1 value pushed */
          310
          PUSHB[ ]	/* 8 values pushed */
          89 33 33 42 43 16 42 43
          PUSHW[ ]	/* 1 value pushed */
          311
          NPUSHB[ ]	/* 16 values pushed */
          89 0 42 16 42 80 42 96 42 112 42 5 160 42 1 42
          PUSHW[ ]	/* 1 value pushed */
          -64
          NPUSHB[ ]	/* 22 values pushed */
          22 28 72 42 56 64 51 57 0 64 16 64 2 0 64 16 64 2 22 3 57 64
          PUSHW[ ]	/* 1 value pushed */
          312
          NPUSHB[ ]	/* 41 values pushed */
          89 47 57 1 15 57 239 57 255 57 3 24 3 57 64 27 31 72 57 60 61 57 128 0 48
          53 61 0 29 16 29 2 0 29 16 29 2 22 3 61 29
          PUSHW[ ]	/* 1 value pushed */
          312
          NPUSHB[ ]	/* 34 values pushed */
          89 191 61 207 61 2 61 64 15 19 72 0 61 1 12 61 50 60 24 0 0 60 16 60 2
          0 60 16 60 2 22 3 0 60
          PUSHW[ ]	/* 1 value pushed */
          312
          NPUSHB[ ]	/* 21 values pushed */
          89 15 0 1 11 2 15 0 31 0 2 19 3 0 23 3 20 38 4 4 3
          PUSHW[ ]	/* 1 value pushed */
          313
          NPUSHB[ ]	/* 15 values pushed */
          89 0 4 1 22 3 4 4 0 61 42 4 47 8 47
          PUSHW[ ]	/* 4 values pushed */
          -16 45 47 313
          NPUSHB[ ]	/* 24 values pushed */
          89 36 7 45 64 18 21 72 45 64 11 15 72 45 10 8 19 41 7 16 12 8 8 7
          PUSHW[ ]	/* 1 value pushed */
          313
          PUSHB[ ]	/* 8 values pushed */
          89 47 8 1 192 8 1 8
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SVTCA[1]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE79B" xMin="12" yMin="-231" xMax="2036" yMax="1689">
      <contour>
        <pt x="308" y="1317" on="1"/>
        <pt x="262" y="767" on="1"/>
        <pt x="464" y="767" on="1"/>
        <pt x="516" y="1441" on="1"/>
        <pt x="62" y="1441" on="1"/>
        <pt x="62" y="1577" on="1"/>
        <pt x="668" y="1577" on="1"/>
        <pt x="606" y="767" on="1"/>
        <pt x="732" y="767" on="1"/>
        <pt x="718" y="345" on="0"/>
        <pt x="706" y="73" on="1"/>
        <pt x="700" y="-231" on="0"/>
        <pt x="442" y="-231" on="1"/>
        <pt x="334" y="-231" on="0"/>
        <pt x="188" y="-225" on="1"/>
        <pt x="178" y="-151" on="0"/>
        <pt x="162" y="-67" on="1"/>
        <pt x="306" y="-85" on="0"/>
        <pt x="418" y="-85" on="1"/>
        <pt x="558" y="-85" on="0"/>
        <pt x="566" y="85" on="1"/>
        <pt x="578" y="305" on="0"/>
        <pt x="586" y="631" on="1"/>
        <pt x="106" y="631" on="1"/>
        <pt x="170" y="1317" on="1"/>
      </contour>
      <contour>
        <pt x="748" y="-33" on="1"/>
        <pt x="1470" y="-33" on="1"/>
        <pt x="1614" y="323" on="0"/>
        <pt x="1726" y="711" on="1"/>
        <pt x="1878" y="663" on="1"/>
        <pt x="1760" y="305" on="0"/>
        <pt x="1628" y="-33" on="1"/>
        <pt x="1980" y="-33" on="1"/>
        <pt x="1980" y="-171" on="1"/>
        <pt x="748" y="-171" on="1"/>
      </contour>
      <contour>
        <pt x="1474" y="1689" on="1"/>
        <pt x="1436" y="1625" on="1"/>
        <pt x="1678" y="1195" on="0"/>
        <pt x="2036" y="999" on="1"/>
        <pt x="1972" y="919" on="0"/>
        <pt x="1930" y="859" on="1"/>
        <pt x="1578" y="1119" on="0"/>
        <pt x="1356" y="1485" on="1"/>
        <pt x="1152" y="1123" on="0"/>
        <pt x="786" y="835" on="1"/>
        <pt x="750" y="887" on="0"/>
        <pt x="686" y="961" on="1"/>
        <pt x="1084" y="1237" on="0"/>
        <pt x="1296" y="1689" on="1"/>
      </contour>
      <contour>
        <pt x="952" y="953" on="1"/>
        <pt x="1776" y="953" on="1"/>
        <pt x="1776" y="815" on="1"/>
        <pt x="952" y="815" on="1"/>
      </contour>
      <contour>
        <pt x="1194" y="697" on="1"/>
        <pt x="1336" y="735" on="1"/>
        <pt x="1420" y="435" on="0"/>
        <pt x="1474" y="211" on="1"/>
        <pt x="1328" y="169" on="1"/>
        <pt x="1270" y="445" on="0"/>
      </contour>
      <contour>
        <pt x="850" y="607" on="1"/>
        <pt x="990" y="651" on="1"/>
        <pt x="1088" y="367" on="0"/>
        <pt x="1154" y="145" on="1"/>
        <pt x="1006" y="95" on="1"/>
        <pt x="940" y="351" on="0"/>
      </contour>
      <contour>
        <pt x="12" y="331" on="1"/>
        <pt x="244" y="377" on="0"/>
        <pt x="522" y="443" on="1"/>
        <pt x="520" y="363" on="0"/>
        <pt x="524" y="301" on="1"/>
        <pt x="296" y="253" on="0"/>
        <pt x="42" y="183" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 25 values pushed */
          16 23 16 20 23 24 71 33 51 35 52 34 69 33 29 44 46 46 59 7 71 65 65 4 31
          PUSHW[ ]	/* 3 values pushed */
          354 26 -16
          PUSHB[ ]	/* 4 values pushed */
          26 35 42 36
          PUSHW[ ]	/* 6 values pushed */
          350 48 -16 48 57 351
          PUSHB[ ]	/* 8 values pushed */
          0 56 1 12 3 56 56 54
          PUSHW[ ]	/* 4 values pushed */
          350 53 63 352
          PUSHB[ ]	/* 3 values pushed */
          62 52 60
          PUSHW[ ]	/* 1 value pushed */
          350
          PUSHB[ ]	/* 4 values pushed */
          59 34 69 11
          PUSHW[ ]	/* 1 value pushed */
          349
          PUSHB[ ]	/* 5 values pushed */
          20 20 6 3 7
          PUSHW[ ]	/* 1 value pushed */
          350
          NPUSHB[ ]	/* 13 values pushed */
          2 26 48 53 59 2 5 4 40 38 38 51 28
          PUSHW[ ]	/* 1 value pushed */
          352
          PUSHB[ ]	/* 6 values pushed */
          62 0 29 29 73 24
          PUSHW[ ]	/* 1 value pushed */
          340
          PUSHB[ ]	/* 3 values pushed */
          1 1 0
          PUSHW[ ]	/* 1 value pushed */
          367
          NPUSHB[ ]	/* 21 values pushed */
          64 4 16 24 62 63 63 69 56 57 57 25 23 24 46 4 42 36 36 44 48
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 8 values pushed */
          11 15 72 48 31 25 25 34
          PUSHW[ ]	/* 1 value pushed */
          314
          PUSHB[ ]	/* 4 values pushed */
          89 25 71 65
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 19 values pushed */
          89 0 71 16 71 32 71 176 71 240 71 5 11 3 71 71 69 67 69
          PUSHW[ ]	/* 1 value pushed */
          314
          NPUSHB[ ]	/* 17 values pushed */
          89 67 16 0 67 1 22 3 67 59 60 60 23 7 1 1 23
          PUSHW[ ]	/* 1 value pushed */
          313
          NPUSHB[ ]	/* 13 values pushed */
          89 1 29 28 28 52 53 54 54 52 64 49 52
          PUSHW[ ]	/* 1 value pushed */
          314
          PUSHB[ ]	/* 3 values pushed */
          89 49 46
          PUSHW[ ]	/* 4 values pushed */
          -16 44 46 311
          PUSHB[ ]	/* 5 values pushed */
          89 44 44 40 38
          PUSHW[ ]	/* 4 values pushed */
          -16 40 38 314
          NPUSHB[ ]	/* 10 values pushed */
          89 40 40 4 14 12 16 18 18 12
          PUSHW[ ]	/* 1 value pushed */
          315
          NPUSHB[ ]	/* 17 values pushed */
          89 25 67 1 49 4 5 18 64 12 15 72 18 48 5 5 4
          PUSHW[ ]	/* 1 value pushed */
          313
          NPUSHB[ ]	/* 9 values pushed */
          89 47 5 63 5 79 5 3 5
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SMD[ ]	/* SetMinimumDistance */
          RTG[ ]	/* RoundToGrid */
          SRP0[ ]	/* SetRefPoint0 */
          MDRP[01110]	/* MoveDirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHPIX[ ]	/* ShiftZoneByPixel */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SVTCA[1]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01110]	/* MoveIndirectRelPt */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MIRP[01101]	/* MoveIndirectRelPt */
          IP[ ]	/* InterpolatePts */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MIRP[01101]	/* MoveIndirectRelPt */
          IP[ ]	/* InterpolatePts */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE79C" xMin="100" yMin="-26" xMax="1094" yMax="1575">
      <contour>
        <pt x="185" y="210" on="1"/>
        <pt x="313" y="136" on="0"/>
        <pt x="461" y="136" on="1"/>
        <pt x="669" y="136" on="0"/>
        <pt x="898" y="464" on="0"/>
        <pt x="898" y="766" on="1"/>
        <pt x="896" y="764" on="0"/>
        <pt x="894" y="766" on="1"/>
        <pt x="792" y="572" on="0"/>
        <pt x="551" y="572" on="1"/>
        <pt x="356" y="572" on="0"/>
        <pt x="100" y="840" on="0"/>
        <pt x="100" y="1054" on="1"/>
        <pt x="100" y="1282" on="0"/>
        <pt x="380" y="1575" on="0"/>
        <pt x="603" y="1575" on="1"/>
        <pt x="834" y="1575" on="0"/>
        <pt x="1094" y="1212" on="0"/>
        <pt x="1094" y="865" on="1"/>
        <pt x="1094" y="436" on="0"/>
        <pt x="758" y="-26" on="0"/>
        <pt x="461" y="-26" on="1"/>
        <pt x="298" y="-26" on="0"/>
        <pt x="185" y="27" on="1"/>
      </contour>
      <contour>
        <pt x="298" y="1079" on="1"/>
        <pt x="298" y="923" on="0"/>
        <pt x="458" y="740" on="0"/>
        <pt x="599" y="740" on="1"/>
        <pt x="721" y="740" on="0"/>
        <pt x="887" y="907" on="0"/>
        <pt x="887" y="1026" on="1"/>
        <pt x="887" y="1193" on="0"/>
        <pt x="722" y="1412" on="0"/>
        <pt x="587" y="1412" on="1"/>
        <pt x="462" y="1412" on="0"/>
        <pt x="298" y="1222" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 43 values pushed */
          18 137 5 30 30 37 24 137 12 64 23 23 12 0 23 153 89 27 9 153 89 7 27 0 16
          0 27 0 27 2 15 21 2 153 89 21 25 15 33 153 89 15 7
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MIRP[01101]	/* MoveIndirectRelPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE79D" xMin="40" yMin="-251" xMax="2008" yMax="1729">
      <contour>
        <pt x="382" y="1255" on="1"/>
        <pt x="1680" y="1255" on="1"/>
        <pt x="1680" y="767" on="1"/>
        <pt x="1528" y="767" on="1"/>
        <pt x="1528" y="831" on="1"/>
        <pt x="534" y="831" on="1"/>
        <pt x="534" y="769" on="1"/>
        <pt x="382" y="769" on="1"/>
      </contour>
      <contour>
        <pt x="310" y="-251" on="1"/>
        <pt x="158" y="-251" on="1"/>
        <pt x="158" y="687" on="1"/>
        <pt x="1906" y="687" on="1"/>
        <pt x="1906" y="7" on="1"/>
        <pt x="1906" y="-239" on="0"/>
        <pt x="1674" y="-239" on="1"/>
        <pt x="1544" y="-239" on="0"/>
        <pt x="1382" y="-235" on="1"/>
        <pt x="1370" y="-167" on="0"/>
        <pt x="1350" y="-77" on="1"/>
        <pt x="1534" y="-91" on="0"/>
        <pt x="1632" y="-91" on="1"/>
        <pt x="1754" y="-91" on="0"/>
        <pt x="1754" y="31" on="1"/>
        <pt x="1754" y="559" on="1"/>
        <pt x="310" y="559" on="1"/>
      </contour>
      <contour>
        <pt x="580" y="427" on="1"/>
        <pt x="1484" y="427" on="1"/>
        <pt x="1484" y="9" on="1"/>
        <pt x="724" y="9" on="1"/>
        <pt x="724" y="-77" on="1"/>
        <pt x="580" y="-77" on="1"/>
      </contour>
      <contour>
        <pt x="40" y="1519" on="1"/>
        <pt x="956" y="1519" on="1"/>
        <pt x="912" y="1604" on="0"/>
        <pt x="872" y="1669" on="1"/>
        <pt x="1022" y="1729" on="1"/>
        <pt x="1079" y="1630" on="0"/>
        <pt x="1133" y="1519" on="1"/>
        <pt x="2008" y="1519" on="1"/>
        <pt x="2008" y="1387" on="1"/>
        <pt x="40" y="1387" on="1"/>
      </contour>
      <contour>
        <pt x="1528" y="1131" on="1"/>
        <pt x="534" y="1131" on="1"/>
        <pt x="534" y="955" on="1"/>
        <pt x="1528" y="955" on="1"/>
      </contour>
      <contour>
        <pt x="1340" y="133" on="1"/>
        <pt x="1340" y="303" on="1"/>
        <pt x="724" y="303" on="1"/>
        <pt x="724" y="133" on="1"/>
      </contour>
      <instructions>
        <assembly>
          PUSHB[ ]	/* 2 values pushed */
          43 6
          PUSHW[ ]	/* 1 value pushed */
          352
          PUSHB[ ]	/* 3 values pushed */
          7 48 29
          PUSHW[ ]	/* 4 values pushed */
          351 30 32 357
          PUSHB[ ]	/* 5 values pushed */
          37 16 37 37 35
          PUSHW[ ]	/* 4 values pushed */
          352 34 27 351
          PUSHB[ ]	/* 5 values pushed */
          45 18 45 44 2
          PUSHW[ ]	/* 1 value pushed */
          352
          PUSHB[ ]	/* 4 values pushed */
          3 39 39 12
          PUSHW[ ]	/* 1 value pushed */
          352
          NPUSHB[ ]	/* 19 values pushed */
          22 7 30 34 45 3 22 22 3 45 34 30 7 6 9 50 40 40 8
          PUSHW[ ]	/* 1 value pushed */
          352
          NPUSHB[ ]	/* 19 values pushed */
          64 9 34 0 35 16 35 2 15 3 35 35 31 30 30 28 9 48 28
          PUSHW[ ]	/* 1 value pushed */
          311
          PUSHB[ ]	/* 8 values pushed */
          89 15 48 1 23 3 25 47
          PUSHW[ ]	/* 1 value pushed */
          311
          PUSHB[ ]	/* 3 values pushed */
          89 10 24
          PUSHW[ ]	/* 1 value pushed */
          312
          NPUSHB[ ]	/* 9 values pushed */
          89 7 3 7 3 5 10 43 5
          PUSHW[ ]	/* 1 value pushed */
          311
          PUSHB[ ]	/* 8 values pushed */
          89 0 43 1 23 3 0 42
          PUSHW[ ]	/* 1 value pushed */
          311
          NPUSHB[ ]	/* 94 values pushed */
          89 43 48 59 48 187 48 3 11 25 1 43 25 59 25 107 25 123 25 4 107 10 123 10 2
          10 64 11 14 72 27 43 1 107 43 123 43 171 43 3 43 64 23 26 72 47 43 63 43 2
          11 43 27 43 2 27 0 1 171 0 1 47 0 63 0 2 2 15 0 31 0 2 11 3 48
          25 10 43 0 0 43 10 25 48 5 18 31 15 40 1 21 6 31 40
          PUSHW[ ]	/* 1 value pushed */
          312
          NPUSHB[ ]	/* 33 values pushed */
          89 37 96 31 144 31 160 31 224 31 4 15 31 63 31 79 31 191 31 4 11 31 15 14 31
          14 47 14 3 35 3 20 14
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 19 values pushed */
          89 20 20 16 18 9 9 16 15 16 31 16 47 16 3 35 3 18 16
          PUSHW[ ]	/* 1 value pushed */
          318
          NPUSHB[ ]	/* 14 values pushed */
          89 47 18 1 95 18 111 18 127 18 159 18 4 18
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SDS[ ]	/* SetDeltaShiftInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SVTCA[1]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE79E" xMin="46" yMin="-117" xMax="2000" yMax="1699">
      <contour>
        <pt x="188" y="43" on="1"/>
        <pt x="934" y="43" on="1"/>
        <pt x="934" y="905" on="1"/>
        <pt x="46" y="905" on="1"/>
        <pt x="46" y="1071" on="1"/>
        <pt x="934" y="1071" on="1"/>
        <pt x="934" y="1699" on="1"/>
        <pt x="1114" y="1699" on="1"/>
        <pt x="1114" y="1071" on="1"/>
        <pt x="2000" y="1071" on="1"/>
        <pt x="2000" y="905" on="1"/>
        <pt x="1114" y="905" on="1"/>
        <pt x="1114" y="43" on="1"/>
        <pt x="1860" y="43" on="1"/>
        <pt x="1860" y="-117" on="1"/>
        <pt x="188" y="-117" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 12 values pushed */
          14 15 14 10 15 3 10 10 17 8 5 12
          PUSHW[ ]	/* 1 value pushed */
          358
          NPUSHB[ ]	/* 22 values pushed */
          64 1 1 17 16 3 0 6 160 6 176 6 192 6 4 14 3 6 11 3 4 3
          PUSHW[ ]	/* 1 value pushed */
          319
          PUSHB[ ]	/* 5 values pushed */
          89 8 4 0 15
          PUSHW[ ]	/* 1 value pushed */
          318
          PUSHB[ ]	/* 3 values pushed */
          89 12 0
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 4 values pushed */
          24 40 72 0
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SHP[0]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SVTCA[1]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE79F" xMin="98" yMin="-25" xMax="1103" yMax="1575">
      <contour>
        <pt x="98" y="432" on="1"/>
        <pt x="98" y="566" on="0"/>
        <pt x="258" y="792" on="0"/>
        <pt x="384" y="840" on="1"/>
        <pt x="283" y="897" on="0"/>
        <pt x="165" y="1075" on="0"/>
        <pt x="165" y="1179" on="1"/>
        <pt x="165" y="1289" on="0"/>
        <pt x="278" y="1471" on="0"/>
        <pt x="479" y="1575" on="0"/>
        <pt x="600" y="1575" on="1"/>
        <pt x="722" y="1575" on="0"/>
        <pt x="924" y="1472" on="0"/>
        <pt x="1036" y="1290" on="0"/>
        <pt x="1036" y="1179" on="1"/>
        <pt x="1036" y="1077" on="0"/>
        <pt x="921" y="898" on="0"/>
        <pt x="819" y="840" on="1"/>
        <pt x="945" y="791" on="0"/>
        <pt x="1103" y="565" on="0"/>
        <pt x="1103" y="432" on="1"/>
        <pt x="1103" y="300" on="0"/>
        <pt x="977" y="91" on="0"/>
        <pt x="745" y="-25" on="0"/>
        <pt x="600" y="-25" on="1"/>
        <pt x="456" y="-25" on="0"/>
        <pt x="226" y="91" on="0"/>
        <pt x="98" y="301" on="0"/>
      </contour>
      <contour>
        <pt x="290" y="441" on="1"/>
        <pt x="290" y="303" on="0"/>
        <pt x="460" y="137" on="0"/>
        <pt x="601" y="137" on="1"/>
        <pt x="739" y="137" on="0"/>
        <pt x="914" y="306" on="0"/>
        <pt x="914" y="441" on="1"/>
        <pt x="914" y="569" on="0"/>
        <pt x="737" y="744" on="0"/>
        <pt x="601" y="744" on="1"/>
        <pt x="466" y="744" on="0"/>
        <pt x="290" y="573" on="0"/>
      </contour>
      <contour>
        <pt x="346" y="1163" on="1"/>
        <pt x="346" y="1059" on="0"/>
        <pt x="494" y="910" on="0"/>
        <pt x="601" y="910" on="1"/>
        <pt x="706" y="910" on="0"/>
        <pt x="859" y="1060" on="0"/>
        <pt x="859" y="1163" on="1"/>
        <pt x="859" y="1268" on="0"/>
        <pt x="712" y="1414" on="0"/>
        <pt x="601" y="1414" on="1"/>
        <pt x="491" y="1414" on="0"/>
        <pt x="346" y="1271" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 42 values pushed */
          17 3 14 40 137 6 14 137 46 6 46 6 0 20 139 34 34 53 28 139 64 0 43 37 153
          89 43 43 24 10 24 31 153 89 24 25 10 49 153 89 10 7
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE7A0" xMin="18" yMin="-263" xMax="1914" yMax="1619">
      <contour>
        <pt x="376" y="881" on="1"/>
        <pt x="376" y="373" on="0"/>
        <pt x="332" y="183" on="1"/>
        <pt x="284" y="-49" on="0"/>
        <pt x="132" y="-263" on="1"/>
        <pt x="74" y="-189" on="0"/>
        <pt x="18" y="-129" on="1"/>
        <pt x="144" y="63" on="0"/>
        <pt x="184" y="257" on="1"/>
        <pt x="216" y="425" on="0"/>
        <pt x="216" y="843" on="1"/>
        <pt x="216" y="1619" on="1"/>
        <pt x="1914" y="1619" on="1"/>
        <pt x="1914" y="23" on="1"/>
        <pt x="1914" y="-235" on="0"/>
        <pt x="1666" y="-239" on="1"/>
        <pt x="1524" y="-241" on="0"/>
        <pt x="1350" y="-235" on="1"/>
        <pt x="1342" y="-175" on="0"/>
        <pt x="1318" y="-73" on="1"/>
        <pt x="1512" y="-85" on="0"/>
        <pt x="1616" y="-85" on="1"/>
        <pt x="1758" y="-85" on="0"/>
        <pt x="1758" y="49" on="1"/>
        <pt x="1758" y="1475" on="1"/>
        <pt x="376" y="1475" on="1"/>
      </contour>
      <contour>
        <pt x="636" y="607" on="1"/>
        <pt x="1492" y="607" on="1"/>
        <pt x="1492" y="67" on="1"/>
        <pt x="788" y="67" on="1"/>
        <pt x="788" y="-61" on="1"/>
        <pt x="636" y="-61" on="1"/>
      </contour>
      <contour>
        <pt x="472" y="909" on="1"/>
        <pt x="986" y="909" on="1"/>
        <pt x="986" y="1111" on="1"/>
        <pt x="564" y="1111" on="1"/>
        <pt x="564" y="1247" on="1"/>
        <pt x="986" y="1247" on="1"/>
        <pt x="986" y="1423" on="1"/>
        <pt x="1142" y="1423" on="1"/>
        <pt x="1142" y="1247" on="1"/>
        <pt x="1564" y="1247" on="1"/>
        <pt x="1564" y="1111" on="1"/>
        <pt x="1142" y="1111" on="1"/>
        <pt x="1142" y="909" on="1"/>
        <pt x="1658" y="909" on="1"/>
        <pt x="1658" y="773" on="1"/>
        <pt x="472" y="773" on="1"/>
      </contour>
      <contour>
        <pt x="1340" y="203" on="1"/>
        <pt x="1340" y="471" on="1"/>
        <pt x="788" y="471" on="1"/>
        <pt x="788" y="203" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 20 values pushed */
          46 42 35 47 46 28 42 23 44 35 33 47 31 0 4 6 6 10 19 28
          PUSHW[ ]	/* 1 value pushed */
          352
          PUSHB[ ]	/* 4 values pushed */
          48 40 37 44
          PUSHW[ ]	/* 1 value pushed */
          353
          PUSHB[ ]	/* 3 values pushed */
          33 51 30
          PUSHW[ ]	/* 4 values pushed */
          352 31 13 353
          NPUSHB[ ]	/* 9 values pushed */
          31 33 48 3 10 23 23 53 0
          PUSHW[ ]	/* 1 value pushed */
          354
          PUSHB[ ]	/* 3 values pushed */
          64 10 38
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 4 values pushed */
          22 25 72 38
          PUSHW[ ]	/* 1 value pushed */
          -64
          NPUSHB[ ]	/* 9 values pushed */
          13 19 72 38 38 25 36 11 25
          PUSHW[ ]	/* 1 value pushed */
          315
          PUSHB[ ]	/* 8 values pushed */
          89 15 17 1 11 4 19 17
          PUSHW[ ]	/* 1 value pushed */
          318
          NPUSHB[ ]	/* 12 values pushed */
          89 0 31 1 11 3 31 31 29 4 51 29
          PUSHW[ ]	/* 1 value pushed */
          313
          PUSHB[ ]	/* 3 values pushed */
          89 26 50
          PUSHW[ ]	/* 1 value pushed */
          313
          PUSHB[ ]	/* 3 values pushed */
          89 32 47
          PUSHW[ ]	/* 1 value pushed */
          313
          PUSHB[ ]	/* 7 values pushed */
          89 44 32 43 35 36 35
          PUSHW[ ]	/* 1 value pushed */
          313
          PUSHB[ ]	/* 7 values pushed */
          89 40 36 4 19 1 19
          PUSHW[ ]	/* 1 value pushed */
          -64
          NPUSHB[ ]	/* 82 values pushed */
          30 34 72 64 51 1 0 51 224 51 240 51 3 159 26 175 26 2 0 26 240 26 2 11 64
          32 160 32 2 112 36 128 36 144 36 3 16 36 32 36 2 19 51 26 32 36 36 32 26 51
          19 5 6 15 11 31 11 2 12 16 11 32 11 48 11 3 0 11 64 11 80 11 128 11 144
          11 160 11 6 16 3 11
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 4 values pushed */
          37 40 72 11
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 6 values pushed */
          28 31 72 11 21 15
          PUSHW[ ]	/* 1 value pushed */
          317
          NPUSHB[ ]	/* 10 values pushed */
          89 15 21 1 35 3 21 21 6 6
          PUSHW[ ]	/* 4 values pushed */
          -16 4 6 313
          NPUSHB[ ]	/* 12 values pushed */
          89 4 64 28 37 72 4 64 12 15 72 4
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SVTCA[1]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE7A1" xMin="168" yMin="-277" xMax="1888" yMax="1707">
      <contour>
        <pt x="168" y="1271" on="1"/>
        <pt x="938" y="1271" on="1"/>
        <pt x="938" y="1707" on="1"/>
        <pt x="1110" y="1707" on="1"/>
        <pt x="1110" y="1271" on="1"/>
        <pt x="1888" y="1271" on="1"/>
        <pt x="1888" y="359" on="1"/>
        <pt x="1724" y="359" on="1"/>
        <pt x="1724" y="467" on="1"/>
        <pt x="1110" y="467" on="1"/>
        <pt x="1110" y="-277" on="1"/>
        <pt x="938" y="-277" on="1"/>
        <pt x="938" y="467" on="1"/>
        <pt x="332" y="467" on="1"/>
        <pt x="332" y="359" on="1"/>
        <pt x="168" y="359" on="1"/>
      </contour>
      <contour>
        <pt x="1724" y="1123" on="1"/>
        <pt x="1110" y="1123" on="1"/>
        <pt x="1110" y="615" on="1"/>
        <pt x="1724" y="615" on="1"/>
      </contour>
      <contour>
        <pt x="332" y="615" on="1"/>
        <pt x="938" y="615" on="1"/>
        <pt x="938" y="1123" on="1"/>
        <pt x="332" y="1123" on="1"/>
      </contour>
      <instructions>
        <assembly>
          PUSHB[ ]	/* 2 values pushed */
          19 6
          PUSHW[ ]	/* 1 value pushed */
          355
          PUSHB[ ]	/* 4 values pushed */
          7 18 4 10
          PUSHW[ ]	/* 1 value pushed */
          356
          NPUSHB[ ]	/* 11 values pushed */
          11 21 1 11 7 11 7 11 25 20 14
          PUSHW[ ]	/* 1 value pushed */
          355
          NPUSHB[ ]	/* 11 values pushed */
          64 15 15 15 9 13 7 7 13 20 13
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 60 values pushed */
          89 18 11 20 1 11 20 171 11 1 223 11 1 2 95 11 111 11 127 11 207 11 4 11 64
          12 15 72 11 17 23 160 2 1 112 2 128 2 2 111 2 1 0 2 32 2 48 2 96 2
          112 2 160 2 176 2 7 14 3 2
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 8 values pushed */
          27 34 72 2 2 23 0 23
          PUSHW[ ]	/* 1 value pushed */
          316
          PUSHB[ ]	/* 6 values pushed */
          89 4 63 0 1 0
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[0]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SDS[ ]	/* SetDeltaShiftInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          MDAP[1]	/* MoveDirectAbsPt */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SVTCA[1]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP0[ ]	/* SetRefPoint0 */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE7A2" xMin="26" yMin="-145" xMax="2012" yMax="1709">
      <contour>
        <pt x="40" y="5" on="1"/>
        <pt x="968" y="5" on="1"/>
        <pt x="968" y="515" on="1"/>
        <pt x="260" y="515" on="1"/>
        <pt x="260" y="669" on="1"/>
        <pt x="968" y="669" on="1"/>
        <pt x="968" y="1131" on="1"/>
        <pt x="440" y="1131" on="1"/>
        <pt x="307" y="891" on="0"/>
        <pt x="134" y="697" on="1"/>
        <pt x="92" y="763" on="0"/>
        <pt x="26" y="837" on="1"/>
        <pt x="308" y="1153" on="0"/>
        <pt x="472" y="1609" on="1"/>
        <pt x="636" y="1565" on="1"/>
        <pt x="583" y="1419" on="0"/>
        <pt x="519" y="1285" on="1"/>
        <pt x="968" y="1285" on="1"/>
        <pt x="968" y="1709" on="1"/>
        <pt x="1140" y="1709" on="1"/>
        <pt x="1140" y="1285" on="1"/>
        <pt x="1904" y="1285" on="1"/>
        <pt x="1904" y="1131" on="1"/>
        <pt x="1140" y="1131" on="1"/>
        <pt x="1140" y="669" on="1"/>
        <pt x="1848" y="669" on="1"/>
        <pt x="1848" y="515" on="1"/>
        <pt x="1140" y="515" on="1"/>
        <pt x="1140" y="5" on="1"/>
        <pt x="2012" y="5" on="1"/>
        <pt x="2012" y="-145" on="1"/>
        <pt x="40" y="-145" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 23 values pushed */
          16 7 14 9 22 26 3 31 22 26 30 3 9 31 11 30 30 33 20 24 17 5 28
          PUSHW[ ]	/* 1 value pushed */
          356
          PUSHB[ ]	/* 7 values pushed */
          1 1 33 9 11 11 13
          PUSHW[ ]	/* 1 value pushed */
          355
          NPUSHB[ ]	/* 37 values pushed */
          64 14 14 13 13 16 15 18 1 12 96 18 144 18 2 0 18 16 18 64 18 80 18 128 18
          144 18 176 18 192 18 208 18 9 16 3 18
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 7 values pushed */
          31 34 72 18 18 7 11
          PUSHW[ ]	/* 4 values pushed */
          -16 9 11 314
          NPUSHB[ ]	/* 36 values pushed */
          89 15 9 31 9 47 9 191 9 4 15 9 47 9 63 9 111 9 127 9 191 9 207 9 223
          9 8 11 3 9 9 31 23 7 16 7
          PUSHW[ ]	/* 1 value pushed */
          317
          PUSHB[ ]	/* 5 values pushed */
          89 27 3 4 3
          PUSHW[ ]	/* 1 value pushed */
          317
          NPUSHB[ ]	/* 16 values pushed */
          89 24 4 4 0 20 0 16 32 16 2 12 3 16 0 31
          PUSHW[ ]	/* 1 value pushed */
          316
          PUSHB[ ]	/* 3 values pushed */
          89 28 0
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[0]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SVTCA[1]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE7A3" xMin="174" yMin="-27" xMax="1054" yMax="1549">
      <contour>
        <pt x="1054" y="478" on="1"/>
        <pt x="1054" y="251" on="0"/>
        <pt x="753" y="-27" on="0"/>
        <pt x="499" y="-27" on="1"/>
        <pt x="281" y="-27" on="0"/>
        <pt x="174" y="38" on="1"/>
        <pt x="174" y="238" on="1"/>
        <pt x="331" y="136" on="0"/>
        <pt x="494" y="136" on="1"/>
        <pt x="656" y="136" on="0"/>
        <pt x="855" y="315" on="0"/>
        <pt x="855" y="463" on="1"/>
        <pt x="855" y="611" on="0"/>
        <pt x="648" y="776" on="0"/>
        <pt x="459" y="776" on="1"/>
        <pt x="313" y="776" on="0"/>
        <pt x="196" y="763" on="1"/>
        <pt x="253" y="1549" on="1"/>
        <pt x="977" y="1549" on="1"/>
        <pt x="977" y="1377" on="1"/>
        <pt x="418" y="1377" on="1"/>
        <pt x="386" y="938" on="1"/>
        <pt x="527" y="944" on="1"/>
        <pt x="773" y="944" on="0"/>
        <pt x="1054" y="699" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 46 values pushed */
          18 18 0 137 11 11 26 16 5 5 21 139 64 16 0 5 153 89 16 14 22 14 153 89 21
          22 6 16 6 22 6 22 23 17 3 8 153 89 3 25 17 20 153 89 17 6
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE7A4" xMin="26" yMin="-255" xMax="2022" yMax="1697">
      <contour>
        <pt x="64" y="371" on="1"/>
        <pt x="988" y="371" on="1"/>
        <pt x="988" y="457" on="1"/>
        <pt x="1366" y="649" on="1"/>
        <pt x="412" y="649" on="1"/>
        <pt x="412" y="785" on="1"/>
        <pt x="1600" y="785" on="1"/>
        <pt x="1600" y="625" on="1"/>
        <pt x="1140" y="397" on="1"/>
        <pt x="1140" y="371" on="1"/>
        <pt x="1984" y="371" on="1"/>
        <pt x="1984" y="231" on="1"/>
        <pt x="1140" y="231" on="1"/>
        <pt x="1140" y="-29" on="1"/>
        <pt x="1140" y="-255" on="0"/>
        <pt x="902" y="-255" on="1"/>
        <pt x="784" y="-255" on="0"/>
        <pt x="596" y="-251" on="1"/>
        <pt x="590" y="-183" on="0"/>
        <pt x="572" y="-81" on="1"/>
        <pt x="750" y="-99" on="0"/>
        <pt x="872" y="-99" on="1"/>
        <pt x="988" y="-99" on="0"/>
        <pt x="988" y="5" on="1"/>
        <pt x="988" y="231" on="1"/>
        <pt x="64" y="231" on="1"/>
      </contour>
      <contour>
        <pt x="146" y="1459" on="1"/>
        <pt x="952" y="1459" on="1"/>
        <pt x="952" y="1697" on="1"/>
        <pt x="1096" y="1697" on="1"/>
        <pt x="1096" y="1459" on="1"/>
        <pt x="1902" y="1459" on="1"/>
        <pt x="1902" y="1319" on="1"/>
        <pt x="1194" y="1319" on="1"/>
        <pt x="1618" y="1007" on="0"/>
        <pt x="2022" y="917" on="1"/>
        <pt x="1970" y="835" on="0"/>
        <pt x="1930" y="769" on="1"/>
        <pt x="1416" y="941" on="0"/>
        <pt x="1096" y="1253" on="1"/>
        <pt x="1096" y="857" on="1"/>
        <pt x="952" y="857" on="1"/>
        <pt x="952" y="1261" on="1"/>
        <pt x="672" y="969" on="0"/>
        <pt x="120" y="747" on="1"/>
        <pt x="96" y="807" on="0"/>
        <pt x="26" y="889" on="1"/>
        <pt x="546" y="1063" on="0"/>
        <pt x="836" y="1319" on="1"/>
        <pt x="146" y="1319" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 14 values pushed */
          37 35 35 11 32 32 11 11 7 19 19 46 9 13
          PUSHW[ ]	/* 1 value pushed */
          352
          NPUSHB[ ]	/* 22 values pushed */
          1 23 23 3 3 7 7 51 4 4 41 44 44 46 49 49 46 25 25 46 46 33
          PUSHW[ ]	/* 1 value pushed */
          -16
          PUSHB[ ]	/* 3 values pushed */
          33 30 40
          PUSHW[ ]	/* 1 value pushed */
          351
          PUSHB[ ]	/* 7 values pushed */
          64 48 16 48 27 41 46
          PUSHW[ ]	/* 4 values pushed */
          -16 44 46 314
          PUSHB[ ]	/* 5 values pushed */
          89 44 44 37 35
          PUSHW[ ]	/* 4 values pushed */
          -16 37 35 316
          NPUSHB[ ]	/* 12 values pushed */
          89 37 37 15 42 39 16 39 33 49 26 49
          PUSHW[ ]	/* 1 value pushed */
          314
          PUSHB[ ]	/* 5 values pushed */
          89 7 4 5 4
          PUSHW[ ]	/* 1 value pushed */
          313
          NPUSHB[ ]	/* 18 values pushed */
          89 41 41 5 15 8 63 8 2 12 4 8 2 64 12 25 0 25
          PUSHW[ ]	/* 1 value pushed */
          314
          NPUSHB[ ]	/* 20 values pushed */
          89 9 0 5 2 0 0 2 5 3 21 30 26 28 28 26 17 15 21 15
          PUSHW[ ]	/* 1 value pushed */
          317
          NPUSHB[ ]	/* 15 values pushed */
          89 19 19 255 21 1 47 21 1 63 21 111 21 2 21
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SMD[ ]	/* SetMinimumDistance */
          RTG[ ]	/* RoundToGrid */
          SRP0[ ]	/* SetRefPoint0 */
          MDRP[01101]	/* MoveDirectRelPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE7A5" xMin="118" yMin="-26" xMax="1115" yMax="1575">
      <contour>
        <pt x="1018" y="1350" on="1"/>
        <pt x="897" y="1412" on="0"/>
        <pt x="765" y="1412" on="1"/>
        <pt x="564" y="1412" on="0"/>
        <pt x="320" y="1062" on="0"/>
        <pt x="318" y="759" on="1"/>
        <pt x="323" y="759" on="1"/>
        <pt x="433" y="972" on="0"/>
        <pt x="674" y="972" on="1"/>
        <pt x="875" y="972" on="0"/>
        <pt x="1115" y="710" on="0"/>
        <pt x="1115" y="493" on="1"/>
        <pt x="1115" y="266" on="0"/>
        <pt x="838" y="-26" on="0"/>
        <pt x="623" y="-26" on="1"/>
        <pt x="387" y="-26" on="0"/>
        <pt x="118" y="343" on="0"/>
        <pt x="118" y="682" on="1"/>
        <pt x="118" y="1092" on="0"/>
        <pt x="471" y="1575" on="0"/>
        <pt x="759" y="1575" on="1"/>
        <pt x="924" y="1575" on="0"/>
        <pt x="1018" y="1530" on="1"/>
      </contour>
      <contour>
        <pt x="330" y="507" on="1"/>
        <pt x="330" y="354" on="0"/>
        <pt x="493" y="136" on="0"/>
        <pt x="628" y="136" on="1"/>
        <pt x="756" y="136" on="0"/>
        <pt x="916" y="324" on="0"/>
        <pt x="916" y="472" on="1"/>
        <pt x="916" y="632" on="0"/>
        <pt x="765" y="810" on="0"/>
        <pt x="626" y="810" on="1"/>
        <pt x="494" y="810" on="0"/>
        <pt x="330" y="630" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 27 values pushed */
          0 0 11 137 29 29 36 5 23 137 64 17 5 32 8 32 153 89 8 8 26 20 0 22 153
          89 0
          PUSHW[ ]	/* 1 value pushed */
          -16
          NPUSHB[ ]	/* 15 values pushed */
          0 0 2 20 2 153 89 20 7 14 26 153 89 14 25
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SVTCA[1]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE7A6" xMin="32" yMin="-269" xMax="2010" yMax="1709">
      <contour>
        <pt x="2010" y="257" on="1"/>
        <pt x="1958" y="205" on="0"/>
        <pt x="1874" y="117" on="1"/>
        <pt x="1390" y="490" on="0"/>
        <pt x="1102" y="1073" on="1"/>
        <pt x="1102" y="281" on="1"/>
        <pt x="1560" y="281" on="1"/>
        <pt x="1560" y="141" on="1"/>
        <pt x="1102" y="141" on="1"/>
        <pt x="1102" y="-269" on="1"/>
        <pt x="946" y="-269" on="1"/>
        <pt x="946" y="141" on="1"/>
        <pt x="472" y="141" on="1"/>
        <pt x="472" y="281" on="1"/>
        <pt x="946" y="281" on="1"/>
        <pt x="946" y="1073" on="1"/>
        <pt x="691" y="565" on="0"/>
        <pt x="164" y="93" on="1"/>
        <pt x="86" y="167" on="0"/>
        <pt x="32" y="213" on="1"/>
        <pt x="601" y="680" on="0"/>
        <pt x="883" y="1201" on="1"/>
        <pt x="76" y="1201" on="1"/>
        <pt x="76" y="1349" on="1"/>
        <pt x="946" y="1349" on="1"/>
        <pt x="946" y="1709" on="1"/>
        <pt x="1102" y="1709" on="1"/>
        <pt x="1102" y="1349" on="1"/>
        <pt x="1972" y="1349" on="1"/>
        <pt x="1972" y="1201" on="1"/>
        <pt x="1159" y="1201" on="1"/>
        <pt x="1477" y="603" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 24 values pushed */
          7 7 2 9 12 22 2 0 0 29 12 10 17 29 5 27 30 29 4 21 14 24 3 9
          PUSHW[ ]	/* 1 value pushed */
          353
          PUSHB[ ]	/* 5 values pushed */
          10 10 33 22 17
          PUSHW[ ]	/* 3 values pushed */
          -16 17 348
          NPUSHB[ ]	/* 25 values pushed */
          64 19 30 22 127 25 1 0 25 16 25 2 15 3 25 25 15 16 15 4 16 4 22 23 22
          PUSHW[ ]	/* 1 value pushed */
          316
          PUSHB[ ]	/* 7 values pushed */
          89 27 23 19 17 2 0
          PUSHW[ ]	/* 4 values pushed */
          -16 2 0 314
          PUSHB[ ]	/* 7 values pushed */
          89 2 2 8 12 13 12
          PUSHW[ ]	/* 1 value pushed */
          314
          NPUSHB[ ]	/* 18 values pushed */
          89 127 10 1 64 10 1 10 10 5 79 13 95 13 111 13 3 13
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          RTG[ ]	/* RoundToGrid */
          SRP0[ ]	/* SetRefPoint0 */
          MDRP[00100]	/* MoveDirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SHP[1]	/* ShiftPointByLastPoint */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SVTCA[1]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01110]	/* MoveIndirectRelPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SLOOP[ ]	/* SetLoopVariable */
          SHP[1]	/* ShiftPointByLastPoint */
          SLOOP[ ]	/* SetLoopVariable */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE7A7" xMin="28" yMin="-263" xMax="2028" yMax="1691">
      <contour>
        <pt x="28" y="-109" on="1"/>
        <pt x="853" y="258" on="0"/>
        <pt x="918" y="993" on="1"/>
        <pt x="64" y="993" on="1"/>
        <pt x="64" y="1149" on="1"/>
        <pt x="925" y="1149" on="1"/>
        <pt x="930" y="1418" on="0"/>
        <pt x="930" y="1691" on="1"/>
        <pt x="1104" y="1691" on="1"/>
        <pt x="1104" y="1422" on="0"/>
        <pt x="1099" y="1149" on="1"/>
        <pt x="1986" y="1149" on="1"/>
        <pt x="1986" y="993" on="1"/>
        <pt x="1096" y="993" on="1"/>
        <pt x="1238" y="194" on="0"/>
        <pt x="2028" y="-61" on="1"/>
        <pt x="1926" y="-159" on="0"/>
        <pt x="1876" y="-223" on="1"/>
        <pt x="1225" y="39" on="0"/>
        <pt x="1025" y="710" on="1"/>
        <pt x="869" y="103" on="0"/>
        <pt x="152" y="-263" on="1"/>
        <pt x="112" y="-209" on="0"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 17 values pushed */
          17 15 15 12 3 3 0 12 12 19 5 21 0 0 13 2 10
          PUSHW[ ]	/* 1 value pushed */
          357
          NPUSHB[ ]	/* 9 values pushed */
          64 5 5 24 23 19 3 21 0
          PUSHW[ ]	/* 4 values pushed */
          -16 21 0 317
          PUSHB[ ]	/* 5 values pushed */
          89 21 21 17 15
          PUSHW[ ]	/* 4 values pushed */
          -16 17 15 318
          NPUSHB[ ]	/* 34 values pushed */
          89 79 17 95 17 2 31 17 47 17 223 17 239 17 4 17 13 3 15 7 1 13 0 7 224
          7 2 14 3 7 7 3 4 3
          PUSHW[ ]	/* 1 value pushed */
          317
          NPUSHB[ ]	/* 23 values pushed */
          89 10 0 4 16 4 48 4 128 4 144 4 192 4 6 128 4 176 4 192 4 3 4
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SHP[1]	/* ShiftPointByLastPoint */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE7A8" xMin="143" yMin="-26" xMax="1049" yMax="1575">
      <contour>
        <pt x="143" y="259" on="1"/>
        <pt x="302" y="136" on="0"/>
        <pt x="502" y="136" on="1"/>
        <pt x="662" y="136" on="0"/>
        <pt x="849" y="293" on="0"/>
        <pt x="849" y="425" on="1"/>
        <pt x="849" y="719" on="0"/>
        <pt x="428" y="719" on="1"/>
        <pt x="299" y="719" on="1"/>
        <pt x="299" y="881" on="1"/>
        <pt x="422" y="881" on="1"/>
        <pt x="795" y="881" on="0"/>
        <pt x="795" y="1157" on="1"/>
        <pt x="795" y="1412" on="0"/>
        <pt x="510" y="1412" on="1"/>
        <pt x="347" y="1412" on="0"/>
        <pt x="203" y="1302" on="1"/>
        <pt x="203" y="1487" on="1"/>
        <pt x="355" y="1575" on="0"/>
        <pt x="558" y="1575" on="1"/>
        <pt x="756" y="1575" on="0"/>
        <pt x="996" y="1368" on="0"/>
        <pt x="996" y="1203" on="1"/>
        <pt x="996" y="899" on="0"/>
        <pt x="686" y="812" on="1"/>
        <pt x="686" y="808" on="1"/>
        <pt x="854" y="790" on="0"/>
        <pt x="1049" y="589" on="0"/>
        <pt x="1049" y="439" on="1"/>
        <pt x="1049" y="230" on="0"/>
        <pt x="748" y="-26" on="0"/>
        <pt x="498" y="-26" on="1"/>
        <pt x="278" y="-26" on="0"/>
        <pt x="143" y="56" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 51 values pushed */
          8 8 12 33 16 16 33 28 137 5 5 22 137 64 25 12 33 12 33 35 34 0 33 153 89
          24 8 9 9 8 153 89 0 16 0 9 0 9 2 19 31 2 153 89 31 25 16 17 153 89
          16
          PUSHW[ ]	/* 1 value pushed */
          -16
          NPUSHB[ ]	/* 9 values pushed */
          16 16 14 19 14 153 89 19 7
          SVTCA[0]	/* SetFPVectorToAxis */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MIAP[1]	/* MoveIndirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[0]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SVTCA[1]	/* SetFPVectorToAxis */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

    <TTGlyph name="uniE7A9" xMin="6" yMin="-303" xMax="2022" yMax="1581">
      <contour>
        <pt x="6" y="545" on="1"/>
        <pt x="236" y="935" on="0"/>
        <pt x="334" y="1389" on="1"/>
        <pt x="72" y="1389" on="1"/>
        <pt x="72" y="1521" on="1"/>
        <pt x="782" y="1521" on="1"/>
        <pt x="782" y="1389" on="1"/>
        <pt x="480" y="1389" on="1"/>
        <pt x="426" y="1157" on="0"/>
        <pt x="352" y="953" on="1"/>
        <pt x="732" y="953" on="1"/>
        <pt x="732" y="-3" on="1"/>
        <pt x="354" y="-3" on="1"/>
        <pt x="354" y="-131" on="1"/>
        <pt x="218" y="-131" on="1"/>
        <pt x="218" y="633" on="1"/>
        <pt x="166" y="529" on="0"/>
        <pt x="108" y="435" on="1"/>
        <pt x="56" y="495" on="0"/>
      </contour>
      <contour>
        <pt x="930" y="1191" on="1"/>
        <pt x="1252" y="1191" on="1"/>
        <pt x="1306" y="1441" on="1"/>
        <pt x="834" y="1441" on="1"/>
        <pt x="834" y="1581" on="1"/>
        <pt x="1992" y="1581" on="1"/>
        <pt x="1992" y="1441" on="1"/>
        <pt x="1468" y="1441" on="1"/>
        <pt x="1406" y="1191" on="1"/>
        <pt x="1898" y="1191" on="1"/>
        <pt x="1898" y="149" on="1"/>
        <pt x="1752" y="149" on="1"/>
        <pt x="1752" y="1051" on="1"/>
        <pt x="1076" y="1051" on="1"/>
        <pt x="1076" y="149" on="1"/>
        <pt x="930" y="149" on="1"/>
      </contour>
      <contour>
        <pt x="1338" y="921" on="1"/>
        <pt x="1484" y="921" on="1"/>
        <pt x="1484" y="615" on="1"/>
        <pt x="1484" y="327" on="0"/>
        <pt x="1416" y="159" on="1"/>
        <pt x="1490" y="235" on="1"/>
        <pt x="1806" y="27" on="0"/>
        <pt x="2022" y="-135" on="1"/>
        <pt x="1918" y="-273" on="1"/>
        <pt x="1642" y="-49" on="0"/>
        <pt x="1402" y="123" on="1"/>
        <pt x="1268" y="-143" on="0"/>
        <pt x="862" y="-303" on="1"/>
        <pt x="814" y="-229" on="0"/>
        <pt x="768" y="-167" on="1"/>
        <pt x="1158" y="-19" on="0"/>
        <pt x="1268" y="201" on="1"/>
        <pt x="1338" y="341" on="0"/>
        <pt x="1338" y="619" on="1"/>
      </contour>
      <contour>
        <pt x="596" y="821" on="1"/>
        <pt x="354" y="821" on="1"/>
        <pt x="354" y="129" on="1"/>
        <pt x="596" y="129" on="1"/>
      </contour>
      <instructions>
        <assembly>
          NPUSHB[ ]	/* 20 values pushed */
          39 45 45 37 47 22 6 3 47 49 49 11 22 6 34 7 3 14 25 37
          PUSHW[ ]	/* 4 values pushed */
          351 53 21 354
          PUSHB[ ]	/* 5 values pushed */
          26 16 26 26 27
          NPUSHW[ ]	/* 9 values pushed */
          353 20 -16 20 33 351 34 11 349
          PUSHB[ ]	/* 6 values pushed */
          57 25 43 42 42 29
          PUSHW[ ]	/* 1 value pushed */
          351
          NPUSHB[ ]	/* 11 values pushed */
          57 34 20 53 4 14 30 30 59 14 2
          PUSHW[ ]	/* 1 value pushed */
          351
          NPUSHB[ ]	/* 10 values pushed */
          7 16 7 7 17 0 0 56 9 13
          PUSHW[ ]	/* 1 value pushed */
          349
          NPUSHB[ ]	/* 50 values pushed */
          64 14 30 64 16 20 72 30 64 11 14 72 36 30 1 207 34 1 15 34 1 16 2 15 34
          47 34 111 34 127 34 4 43 3 34 64 36 40 72 34 64 17 29 72 34 64 11 15 72 14
          PUSHW[ ]	/* 1 value pushed */
          -64
          NPUSHB[ ]	/* 26 values pushed */
          11 16 72 14 30 34 40 35 14 47 12 15 0 55 40 45 39 39 47 30 42 32 34 56 56
          12
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 9 values pushed */
          89 0 56 16 56 2 15 3 56
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 4 values pushed */
          38 44 72 56
          PUSHW[ ]	/* 1 value pushed */
          -64
          PUSHB[ ]	/* 5 values pushed */
          22 27 72 56 0
          PUSHW[ ]	/* 4 values pushed */
          -16 17 0 316
          PUSHB[ ]	/* 4 values pushed */
          89 17 9 55
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 13 values pushed */
          89 0 9 1 15 3 9 35 32 27 19 19 32
          PUSHW[ ]	/* 1 value pushed */
          316
          PUSHB[ ]	/* 6 values pushed */
          89 19 7 3 4 3
          PUSHW[ ]	/* 1 value pushed */
          316
          PUSHB[ ]	/* 8 values pushed */
          89 0 4 1 17 3 4 49
          PUSHW[ ]	/* 4 values pushed */
          -16 47 49 316
          NPUSHB[ ]	/* 17 values pushed */
          89 47 64 34 50 72 47 47 43 4 19 9 56 4 42 23 42
          PUSHW[ ]	/* 4 values pushed */
          -16 43 42 316
          NPUSHB[ ]	/* 37 values pushed */
          89 17 22 127 43 143 43 159 43 3 15 43 31 43 47 43 143 43 255 43 5 19 43 64 12
          16 72 0 43 1 48 3 43 26 22 23 22
          PUSHW[ ]	/* 1 value pushed */
          316
          NPUSHB[ ]	/* 28 values pushed */
          89 47 23 63 23 79 23 127 23 4 0 23 64 23 80 23 144 23 4 48 23 192 23 2 240
          23 1 23
          SVTCA[0]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP3[ ]	/* DeltaExceptionP3 */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHPIX[ ]	/* ShiftZoneByPixel */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          CALL[ ]	/* CallFunction */
          SRP1[ ]	/* SetRefPoint1 */
          SVTCA[0]	/* SetFPVectorToAxis */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          RTG[ ]	/* RoundToGrid */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          SDS[ ]	/* SetDeltaShiftInGState */
          SDB[ ]	/* SetDeltaBaseInGState */
          DELTAP1[ ]	/* DeltaExceptionP1 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          DELTAP2[ ]	/* DeltaExceptionP2 */
          CALL[ ]	/* CallFunction */
          CALL[ ]	/* CallFunction */
          SVTCA[1]	/* SetFPVectorToAxis */
          MDAP[1]	/* MoveDirectAbsPt */
          SMD[ ]	/* SetMinimumDistance */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MIRP[01101]	/* MoveIndirectRelPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP2[ ]	/* SetRefPoint2 */
          SLOOP[ ]	/* SetLoopVariable */
          IP[ ]	/* InterpolatePts */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MIRP[01101]	/* MoveIndirectRelPt */
          SHP[0]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          SHPIX[ ]	/* ShiftZoneByPixel */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MIRP[01101]	/* MoveIndirectRelPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          IP[ ]	/* InterpolatePts */
          MDAP[1]	/* MoveDirectAbsPt */
          SHP[1]	/* ShiftPointByLastPoint */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          MDAP[1]	/* MoveDirectAbsPt */
          SRP1[ ]	/* SetRefPoint1 */
          SRP2[ ]	/* SetRefPoint2 */
          IP[ ]	/* InterpolatePts */
          SRP1[ ]	/* SetRefPoint1 */
          SHP[1]	/* ShiftPointByLastPoint */
          IUP[0]	/* InterpolateUntPts */
          IUP[1]	/* InterpolateUntPts */
        </assembly>
      </instructions>
    </TTGlyph>

  </glyf>

  <name>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x403">
      Normal
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x405">
      obyčejné
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x406">
      Normal
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x407">
      Standard
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x408">
      Κανονικά
    </namerecord>
    <namerecord nameID="0" platformID="3" platEncID="1" langID="0x409">
      © 2016  Microsoft Corporation. All Rights Reserved. Portions © 2016 Beijing Founder Electronics Co. Ltd. All Rights Reserved.
    </namerecord>
    <namerecord nameID="1" platformID="3" platEncID="1" langID="0x409">
      Microsoft YaHei
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x409">
      Regular
    </namerecord>
    <namerecord nameID="3" platformID="3" platEncID="1" langID="0x409">
      Microsoft YaHei Regular
    </namerecord>
    <namerecord nameID="4" platformID="3" platEncID="1" langID="0x409">
      Microsoft YaHei
    </namerecord>
    <namerecord nameID="5" platformID="3" platEncID="1" langID="0x409">
      Version 6.22
    </namerecord>
    <namerecord nameID="6" platformID="3" platEncID="1" langID="0x409">
      MicrosoftYaHei
    </namerecord>
    <namerecord nameID="7" platformID="3" platEncID="1" langID="0x409">
      Microsoft YaHei is a trademark of the Microsoft group of companies.
    </namerecord>
    <namerecord nameID="8" platformID="3" platEncID="1" langID="0x409">
      Microsoft Corporation
    </namerecord>
    <namerecord nameID="9" platformID="3" platEncID="1" langID="0x409">
      Founder
    </namerecord>
    <namerecord nameID="10" platformID="3" platEncID="1" langID="0x409">
      The font glyphs are certified compliant with China standard GB18030-2000 with the font name Founder Lan Ting Hei.  Microsoft Licensed the font glyph from Beijing Founder  Electronics Co. Ltd.&#13;
本字库字形从北京北大方正电子有限公司授权。本字库字形 以字库名方正兰亭黑通过中国标准符合性检测，符合中国 GB18030-2000标准。&#13;

    </namerecord>
    <namerecord nameID="11" platformID="3" platEncID="1" langID="0x409">
      http://www.microsoft.com/typography
    </namerecord>
    <namerecord nameID="12" platformID="3" platEncID="1" langID="0x409">
      http://www.founder.com.cn/cn
    </namerecord>
    <namerecord nameID="13" platformID="3" platEncID="1" langID="0x409">
      Microsoft supplied font. You may use this font to create, display and print content as permitted by the license terms, or terms of use, of the Microsoft product, service or content in which this font was included. You may only (i) embed this font in content as permitted by the embedding restrictions included in this font; and (ii) temporarily download this font to a printer or other output device to help print content. Any other use is prohibited.
    </namerecord>
    <namerecord nameID="14" platformID="3" platEncID="1" langID="0x409">
      http://www.microsoft.com/typography/fonts
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x40a">
      Normal
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x40b">
      Normaali
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x40c">
      Normal
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x40e">
      Normál
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x410">
      Normale
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x413">
      Standaard
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x414">
      Normal
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x415">
      Normalny
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x416">
      Normal
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x419">
      Обычный
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x41b">
      Normálne
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x41d">
      Normal
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x41f">
      Normal
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x424">
      Navadno
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x42d">
      Arrunta
    </namerecord>
    <namerecord nameID="0" platformID="3" platEncID="1" langID="0x804">
      © 2016 微软公司版权所有 © 2016 北京北大方正电子有限公司部分版权所有
    </namerecord>
    <namerecord nameID="1" platformID="3" platEncID="1" langID="0x804">
      微软雅黑
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x804">
      Regular
    </namerecord>
    <namerecord nameID="3" platformID="3" platEncID="1" langID="0x804">
      微软雅黑 Regular
    </namerecord>
    <namerecord nameID="4" platformID="3" platEncID="1" langID="0x804">
      微软雅黑
    </namerecord>
    <namerecord nameID="5" platformID="3" platEncID="1" langID="0x804">
      Version 6.22
    </namerecord>
    <namerecord nameID="6" platformID="3" platEncID="1" langID="0x804">
      MicrosoftYaHeiRegular
    </namerecord>
    <namerecord nameID="7" platformID="3" platEncID="1" langID="0x804">
      Microsoft YaHei is a trademark of the Microsoft group of companies.
    </namerecord>
    <namerecord nameID="8" platformID="3" platEncID="1" langID="0x804">
      Microsoft Corporation
    </namerecord>
    <namerecord nameID="9" platformID="3" platEncID="1" langID="0x804">
      北大方正电子有限公司
    </namerecord>
    <namerecord nameID="10" platformID="3" platEncID="1" langID="0x804">
      The font glyphs are certified compliant with China standard GB18030-2000 with the font name Founder Lan Ting Hei.  Microsoft Licensed the font glyph from Beijing Founder  Electronics Co. Ltd.&#13;
本字库字形从北京北大方正电子有限公司授权。本字库字形 以字库名方正兰亭黑通过中国标准符合性检测，符合中国 GB18030-2000标准。
    </namerecord>
    <namerecord nameID="11" platformID="3" platEncID="1" langID="0x804">
      http://www.microsoft.com/typography
    </namerecord>
    <namerecord nameID="12" platformID="3" platEncID="1" langID="0x804">
      http://www.founder.com.cn/cn
    </namerecord>
    <namerecord nameID="13" platformID="3" platEncID="1" langID="0x804">
      Microsoft supplied font. You may use this font to create, display and print content as permitted by the license terms, or terms of use, of the Microsoft product, service or content in which this font was included. You may only (i) embed this font in content as permitted by the embedding restrictions included in this font; and (ii) temporarily download this font to a printer or other output device to help print content. Any other use is prohibited.
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x80a">
      Normal
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0x816">
      Normal
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0xc0a">
      Normal
    </namerecord>
    <namerecord nameID="2" platformID="3" platEncID="1" langID="0xc0c">
      Normal
    </namerecord>
  </name>

  <post>
    <formatType value="3.0"/>
    <italicAngle value="0.0"/>
    <underlinePosition value="-178"/>
    <underlineThickness value="129"/>
    <isFixedPitch value="0"/>
    <minMemType42 value="0"/>
    <maxMemType42 value="0"/>
    <minMemType1 value="0"/>
    <maxMemType1 value="0"/>
  </post>

  <gasp>
    <gaspRange rangeMaxPPEM="8" rangeGaspBehavior="14"/>
    <gaspRange rangeMaxPPEM="21" rangeGaspBehavior="7"/>
    <gaspRange rangeMaxPPEM="65535" rangeGaspBehavior="11"/>
  </gasp>

  <MERG raw="True">
    <hexdata>
      00000001 000a0000 000c0000 
    </hexdata>
  </MERG>

  <meta>
    <text tag="dlng">
      Hans
    </text>
    <text tag="slng">
      Hans
    </text>
  </meta>

  <vhea>
    <tableVersion value="0x00010000"/>
    <ascent value="1740"/>
    <descent value="-308"/>
    <lineGap value="0"/>
    <advanceHeightMax value="2048"/>
    <minTopSideBearing value="-217"/>
    <minBottomSideBearing value="-217"/>
    <yMaxExtent value="2265"/>
    <caretSlopeRise value="0"/>
    <caretSlopeRun value="1"/>
    <caretOffset value="0"/>
    <reserved1 value="0"/>
    <reserved2 value="0"/>
    <reserved3 value="0"/>
    <reserved4 value="0"/>
    <metricDataFormat value="0"/>
    <numberOfVMetrics value="1"/>
  </vhea>

</ttFont>
